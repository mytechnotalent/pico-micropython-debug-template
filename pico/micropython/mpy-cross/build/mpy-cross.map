# Path: build/mpy-cross
# Arch: x86_64
# Object files:
[  0] linker synthesized
[  1] build/py/mpstate.o
[  2] build/py/nlr.o
[  3] build/py/nlrx64.o
[  4] build/py/malloc.o
[  5] build/py/gc.o
[  6] build/py/qstr.o
[  7] build/py/vstr.o
[  8] build/py/mpprint.o
[  9] build/py/unicode.o
[ 10] build/py/mpz.o
[ 11] build/py/reader.o
[ 12] build/py/lexer.o
[ 13] build/py/parse.o
[ 14] build/py/scope.o
[ 15] build/py/compile.o
[ 16] build/py/emitcommon.o
[ 17] build/py/emitbc.o
[ 18] build/py/asmbase.o
[ 19] build/py/asmx64.o
[ 20] build/py/emitnx64.o
[ 21] build/py/asmx86.o
[ 22] build/py/emitnx86.o
[ 23] build/py/asmthumb.o
[ 24] build/py/emitnthumb.o
[ 25] build/py/emitinlinethumb.o
[ 26] build/py/asmarm.o
[ 27] build/py/emitnarm.o
[ 28] build/py/asmxtensa.o
[ 29] build/py/emitnxtensa.o
[ 30] build/py/emitinlinextensa.o
[ 31] build/py/emitnxtensawin.o
[ 32] build/py/formatfloat.o
[ 33] build/py/parsenumbase.o
[ 34] build/py/parsenum.o
[ 35] build/py/emitglue.o
[ 36] build/py/persistentcode.o
[ 37] build/py/runtime.o
[ 38] build/py/runtime_utils.o
[ 39] build/py/scheduler.o
[ 40] build/py/nativeglue.o
[ 41] build/py/pairheap.o
[ 42] build/py/ringbuf.o
[ 43] build/py/stackctrl.o
[ 44] build/py/argcheck.o
[ 45] build/py/warning.o
[ 46] build/py/map.o
[ 47] build/py/obj.o
[ 48] build/py/objarray.o
[ 49] build/py/objbool.o
[ 50] build/py/objboundmeth.o
[ 51] build/py/objcell.o
[ 52] build/py/objclosure.o
[ 53] build/py/objcomplex.o
[ 54] build/py/objdict.o
[ 55] build/py/objenumerate.o
[ 56] build/py/objexcept.o
[ 57] build/py/objfilter.o
[ 58] build/py/objfloat.o
[ 59] build/py/objfun.o
[ 60] build/py/objgenerator.o
[ 61] build/py/objgetitemiter.o
[ 62] build/py/objint.o
[ 63] build/py/objint_mpz.o
[ 64] build/py/objlist.o
[ 65] build/py/objmap.o
[ 66] build/py/objmodule.o
[ 67] build/py/objobject.o
[ 68] build/py/objpolyiter.o
[ 69] build/py/objproperty.o
[ 70] build/py/objnone.o
[ 71] build/py/objrange.o
[ 72] build/py/objreversed.o
[ 73] build/py/objset.o
[ 74] build/py/objsingleton.o
[ 75] build/py/objslice.o
[ 76] build/py/objstr.o
[ 77] build/py/objstrunicode.o
[ 78] build/py/objtuple.o
[ 79] build/py/objtype.o
[ 80] build/py/objzip.o
[ 81] build/py/opmethods.o
[ 82] build/py/sequence.o
[ 83] build/py/stream.o
[ 84] build/py/binary.o
[ 85] build/py/builtinimport.o
[ 86] build/py/builtinevex.o
[ 87] build/py/modbuiltins.o
[ 88] build/py/modmicropython.o
[ 89] build/py/modstruct.o
[ 90] build/py/vm.o
[ 91] build/py/bc.o
[ 92] build/py/smallint.o
[ 93] build/main.o
[ 94] build/gccollect.o
[ 95] build/shared/runtime/gchelper_generic.o
[ 96] /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/libm.tbd
# Sections:
# Address	Size    	Segment	Section
0x100004690	0x00045402	__TEXT	__text
0x100049A92	0x000000C0	__TEXT	__stubs
0x100049B54	0x00000150	__TEXT	__stub_helper
0x100049CB0	0x00001235	__TEXT	__const
0x10004AEE5	0x000050CD	__TEXT	__cstring
0x10004FFB4	0x00000048	__TEXT	__unwind_info
0x100050000	0x000000D8	__DATA_CONST	__got
0x1000500E0	0x00003CE0	__DATA_CONST	__const
0x100054000	0x00000100	__DATA	__la_symbol_ptr
0x100054100	0x00000010	__DATA	__data
0x100054110	0x00000334	__DATA	__common
0x100054444	0x00000004	__DATA	__bss
# Symbols:
# Address	Size    	File  Name
0x100004690	0x0000001A	[  2] _nlr_push_tail
0x1000046AA	0x00000018	[  2] _nlr_pop
0x1000046C2	0x00000032	[  3] _nlr_push
0x1000046F4	0x00000053	[  3] _nlr_jump
0x100004747	0x00000029	[  4] _m_malloc
0x100004770	0x0000000C	[  4] _m_malloc_maybe
0x10000477C	0x0000000A	[  4] _m_malloc0
0x100004786	0x0000002C	[  4] _m_realloc
0x1000047B2	0x0000000A	[  4] _m_realloc_maybe
0x1000047BC	0x0000000A	[  4] _m_free
0x1000047D0	0x00000090	[  5] _gc_init
0x100004860	0x00000020	[  5] _gc_is_locked
0x100004880	0x00000040	[  5] _gc_collect_start
0x1000048C0	0x000001D0	[  5] _gc_collect_root
0x100004A90	0x00000290	[  5] _gc_collect_end
0x100004D20	0x00000200	[  5] _gc_alloc
0x100004F20	0x000000E0	[  5] _gc_free
0x100005000	0x00000360	[  5] _gc_realloc
0x100005360	0x00000040	[  6] _qstr_compute_hash
0x1000053A0	0x00000023	[  6] _qstr_init
0x1000053C3	0x000000E3	[  6] _qstr_find_strn
0x1000054A6	0x0000001F	[  6] _qstr_from_str
0x1000054C5	0x0000025D	[  6] _qstr_from_strn
0x100005722	0x00000027	[  6] _qstr_hash
0x100005749	0x0000002E	[  6] _find_qstr
0x100005777	0x00000027	[  6] _qstr_len
0x10000579E	0x00000024	[  6] _qstr_str
0x1000057C2	0x00000039	[  6] _qstr_data
0x1000057FB	0x00000034	[  7] _vstr_init
0x10000582F	0x0000003D	[  7] _vstr_init_len
0x10000586C	0x00000044	[  7] _vstr_init_print
0x1000058B0	0x0000003D	[  7] _vstr_add_strn
0x1000058ED	0x00000027	[  7] _vstr_clear
0x100005914	0x00000049	[  7] _vstr_extend
0x10000595D	0x0000004C	[  7] _vstr_ensure_extra
0x1000059A9	0x00000036	[  7] _vstr_null_terminated_str
0x1000059DF	0x00000030	[  7] _vstr_add_byte
0x100005A0F	0x00000136	[  7] _vstr_add_char
0x100005B45	0x00000048	[  7] _vstr_add_str
0x100005B8D	0x00000017	[  7] _vstr_cut_tail_bytes
0x100005BA6	0x0000003A	[  8] _mp_print_str
0x100005BE0	0x00000117	[  8] _mp_print_strn
0x100005CF7	0x00000468	[  8] _mp_print_mp_int
0x10000615F	0x000000F6	[  8] _mp_print_float
0x100006255	0x0000009A	[  8] _mp_printf
0x1000062EF	0x000005C9	[  8] _mp_vprintf
0x1000068B8	0x0000017F	[  8] _mp_print_int
0x100006A37	0x0000005C	[  9] _utf8_get_char
0x100006A93	0x00000017	[  9] _utf8_next_char
0x100006AAA	0x00000023	[  9] _utf8_ptr_to_index
0x100006ACD	0x0000002C	[  9] _utf8_charlen
0x100006AF9	0x0000001E	[  9] _unichar_isspace
0x100006B17	0x0000001F	[  9] _unichar_isalpha
0x100006B36	0x0000001E	[  9] _unichar_isdigit
0x100006B54	0x0000001F	[  9] _unichar_isxdigit
0x100006B73	0x0000001E	[  9] _unichar_isupper
0x100006B91	0x0000001E	[  9] _unichar_islower
0x100006BAF	0x0000001F	[  9] _unichar_tolower
0x100006BCE	0x0000001F	[  9] _unichar_toupper
0x100006BED	0x00000019	[  9] _unichar_xdigit_value
0x100006C06	0x00000055	[  9] _utf8_check
0x100006C5B	0x00000014	[ 10] _mpz_init_zero
0x100006C6F	0x00000063	[ 10] _mpz_set_from_int
0x100006CD2	0x00000024	[ 10] _mpz_init_fixed_from_int
0x100006CF6	0x0000001A	[ 10] _mpz_deinit
0x100006D10	0x0000004B	[ 10] _mpz_set
0x100006D5B	0x0000005B	[ 10] _mpz_need_dig
0x100006DB6	0x0000006E	[ 10] _mpz_set_from_ll
0x100006E24	0x0000015C	[ 10] _mpz_set_from_float
0x100006F80	0x0000011C	[ 10] _mpz_set_from_str
0x10000709C	0x000000DA	[ 10] _mpz_set_from_bytes
0x100007176	0x00000079	[ 10] _mpz_cmp
0x1000071EF	0x00000020	[ 10] _mpz_abs_inpl
0x10000720F	0x00000027	[ 10] _mpz_neg_inpl
0x100007236	0x000000AC	[ 10] _mpz_not_inpl
0x1000072E2	0x00000091	[ 10] _mpn_sub
0x100007373	0x00000084	[ 10] _mpn_add
0x1000073F7	0x0000010B	[ 10] _mpz_shl_inpl
0x100007502	0x00000138	[ 10] _mpz_shr_inpl
0x10000763A	0x00000053	[ 10] _mpn_shr
0x10000768D	0x000000ED	[ 10] _mpz_add_inpl
0x10000777A	0x00000103	[ 10] _mpz_sub_inpl
0x10000787D	0x0000017A	[ 10] _mpz_and_inpl
0x1000079F7	0x0000016C	[ 10] _mpz_or_inpl
0x100007B63	0x00000145	[ 10] _mpz_xor_inpl
0x100007CA8	0x00000179	[ 10] _mpz_mul_inpl
0x100007E21	0x0000006E	[ 10] _mpz_clone
0x100007E8F	0x00000026	[ 10] _mpz_free
0x100007EB5	0x00000133	[ 10] _mpz_pow_inpl
0x100007FE8	0x00000434	[ 10] _mpz_divmod_inpl
0x10000841C	0x0000003D	[ 10] _mpz_hash
0x100008459	0x0000004E	[ 10] _mpz_as_int_checked
0x1000084A7	0x000000D2	[ 10] _mpz_as_bytes
0x100008579	0x00000052	[ 10] _mpz_as_float
0x1000085CB	0x000001E8	[ 10] _mpz_as_str_inpl
0x1000087B3	0x0000008A	[ 11] _mp_reader_new_file_from_fd
0x10000883D	0x00000060	[ 11] _mp_reader_posix_readbyte
0x10000889D	0x00000024	[ 11] _mp_reader_posix_close
0x1000088C1	0x0000003F	[ 11] _mp_reader_new_file
0x100008900	0x00000B2C	[ 12] _mp_lexer_to_next
0x10000942C	0x0000008D	[ 12] _skip_whitespace
0x1000094B9	0x0000006B	[ 12] _is_string_or_bytes
0x100009524	0x000000EC	[ 12] _next_char
0x100009610	0x000000C5	[ 12] _mp_lexer_new
0x1000096D8	0x00000047	[ 12] _mp_lexer_new_from_file
0x100009722	0x00000045	[ 12] _mp_lexer_free
0x100009768	0x00000019	[ 13] _mp_parse_node_is_const_false
0x100009781	0x0000001B	[ 13] _mp_parse_node_is_const_true
0x10000979C	0x00000052	[ 13] _mp_parse_node_get_int_maybe
0x1000097EE	0x00000040	[ 13] _mp_parse_node_extract_list
0x10000982E	0x00000962	[ 13] _mp_parse
0x10000A190	0x0000007F	[ 13] _push_rule
0x10000A20F	0x00000191	[ 13] _push_result_token
0x10000A3A0	0x0000002E	[ 13] _push_rule_from_arg
0x10000A3CE	0x0000004F	[ 13] _push_result_node
0x10000A41D	0x00000025	[ 13] _pop_result
0x10000A442	0x0000099E	[ 13] _push_result_rule
0x10000ADE0	0x00000027	[ 13] _mp_parse_tree_clear
0x10000AE07	0x00000060	[ 13] _make_node_const_object_optimised
0x10000AE67	0x000000B3	[ 13] _parser_alloc
0x10000AF1A	0x00000060	[ 13] _mp_parse_node_is_const
0x10000AF7A	0x0000010A	[ 13] _mp_parse_node_convert_to_obj
0x10000B084	0x00000027	[ 13] _peek_rule
0x10000B0AB	0x00000111	[ 13] _build_tuple_from_stack
0x10000B1BC	0x00000093	[ 14] _scope_new
0x10000B24F	0x00000020	[ 14] _scope_free
0x10000B26F	0x00000099	[ 14] _scope_find_or_add_id
0x10000B308	0x00000024	[ 14] _scope_find
0x10000B32C	0x00000030	[ 14] _scope_find_global
0x10000B35C	0x000000AC	[ 14] _scope_check_to_close_over
0x10000B408	0x00000778	[ 15] _mp_compile_to_raw_code
0x10000BB80	0x000004B6	[ 15] _compile_scope_inline_asm
0x10000C036	0x00000545	[ 15] _compile_scope
0x10000C57E	0x0000004A	[ 15] _compile_syntax_error
0x10000C5C8	0x000000B6	[ 15] _compile_node
0x10000C67E	0x00000084	[ 15] _apply_to_single_or_list
0x10000C702	0x00000076	[ 15] _compile_viper_type_annotation
0x10000C778	0x00000038	[ 15] _compile_load_id
0x10000C7B0	0x00000157	[ 15] _compile_scope_comp_iter
0x10000C907	0x00000033	[ 15] _compile_store_id
0x10000C93A	0x0000006F	[ 15] _compile_generic_all_nodes
0x10000C9A9	0x000002C3	[ 15] _compile_decorated
0x10000CC6C	0x00000027	[ 15] _compile_funcdef
0x10000CC93	0x00000382	[ 15] _compile_expr_stmt
0x10000D015	0x00000071	[ 15] _compile_generic_tuple
0x10000D086	0x0000001A	[ 15] _compile_del_stmt
0x10000D0A0	0x0000005E	[ 15] _compile_break_cont_stmt
0x10000D0FE	0x000000CE	[ 15] _compile_return_stmt
0x10000D1CC	0x00000026	[ 15] _compile_yield_stmt
0x10000D1F2	0x0000006B	[ 15] _compile_raise_stmt
0x10000D25D	0x0000001A	[ 15] _compile_import_name
0x10000D277	0x0000026C	[ 15] _compile_import_from
0x10000D4E3	0x0000012D	[ 15] _compile_global_nonlocal_stmt
0x10000D610	0x000000B3	[ 15] _compile_assert_stmt
0x10000D6C3	0x0000035A	[ 15] _compile_async_stmt
0x10000DA1D	0x00000189	[ 15] _compile_if_stmt
0x10000DBA6	0x0000010F	[ 15] _compile_while_stmt
0x10000DCB5	0x0000048C	[ 15] _compile_for_stmt
0x10000E141	0x000000DD	[ 15] _compile_try_stmt
0x10000E21E	0x00000049	[ 15] _compile_with_stmt
0x10000E267	0x00000015	[ 15] _compile_namedexpr
0x10000E27C	0x000000C7	[ 15] _compile_test_if_expr
0x10000E343	0x0000007C	[ 15] _compile_lambdef
0x10000E3BF	0x000000AF	[ 15] _compile_or_and_test
0x10000E46E	0x0000002E	[ 15] _compile_not_test_2
0x10000E49C	0x000001D7	[ 15] _compile_comparison
0x10000E673	0x00000011	[ 15] _compile_star_expr
0x10000E684	0x00000070	[ 15] _compile_binary_op
0x10000E6F4	0x0000006A	[ 15] _compile_term
0x10000E75E	0x00000051	[ 15] _compile_factor_2
0x10000E7AF	0x0000002A	[ 15] _compile_power
0x10000E7D9	0x00000044	[ 15] _compile_atom_expr_await
0x10000E81D	0x000001DC	[ 15] _compile_atom_expr_normal
0x10000E9F9	0x0000006E	[ 15] _compile_atom_paren
0x10000EA67	0x000000B8	[ 15] _compile_atom_bracket
0x10000EB1F	0x0000026B	[ 15] _compile_atom_brace
0x10000ED8A	0x00000012	[ 15] _compile_trailer_paren
0x10000ED9C	0x0000002B	[ 15] _compile_trailer_bracket
0x10000EDC7	0x00000023	[ 15] _compile_trailer_period
0x10000EDEA	0x00000117	[ 15] _compile_subscript
0x10000EF01	0x00000026	[ 15] _compile_dictorsetmaker_item
0x10000EF27	0x00000027	[ 15] _compile_classdef
0x10000EF4E	0x0000009C	[ 15] _compile_yield_expr
0x10000EFEA	0x0000001D	[ 15] _compile_const_object
0x10000F007	0x00000087	[ 15] _compile_funcdef_helper
0x10000F08E	0x000000CB	[ 15] _compile_classdef_helper
0x10000F159	0x000000B1	[ 15] _compile_funcdef_lambdef
0x10000F20A	0x0000016A	[ 15] _compile_funcdef_lambdef_param
0x10000F374	0x00000167	[ 15] _close_over_variables_etc
0x10000F4DB	0x0000022D	[ 15] _compile_trailer_paren_helper
0x10000F708	0x0000007E	[ 15] _compile_namedexpr_helper
0x10000F786	0x000000FB	[ 15] _compile_comprehension
0x10000F881	0x00000345	[ 15] _c_assign
0x10000FBC6	0x0000010D	[ 15] _c_assign_tuple
0x10000FCD3	0x0000022D	[ 15] _c_del_stmt
0x10000FF00	0x00000033	[ 15] _compile_delete_id
0x10000FF33	0x000001E9	[ 15] _c_if_cond
0x10001011C	0x00000054	[ 15] _compile_dotted_as_name
0x100010170	0x0000021C	[ 15] _do_import_name
0x10001038C	0x00000040	[ 15] _compile_decrease_except_level
0x1000103CC	0x00000052	[ 15] _compile_yield_from
0x10001041E	0x0000040C	[ 15] _compile_async_with_stmt_helper
0x10001082A	0x000000F0	[ 15] _compile_try_finally
0x10001091A	0x000002F3	[ 15] _compile_try_except
0x100010C0D	0x0000013A	[ 15] _compile_with_stmt_helper
0x100010D47	0x00000190	[ 15] _compile_scope_func_lambda_param
0x100010ED8	0x00000048	[ 16] _mp_emit_common_use_qstr
0x100010F20	0x00000057	[ 16] _mp_emit_common_use_const_obj
0x100010F77	0x0000009E	[ 16] _strictly_equal
0x100011015	0x0000002C	[ 16] _mp_emit_common_get_id_for_modification
0x100011041	0x000000BB	[ 16] _mp_emit_common_id_op
0x1000110FC	0x0000001E	[ 17] _emit_bc_new
0x10001111A	0x00000025	[ 17] _emit_bc_set_max_num_labels
0x10001113F	0x00000020	[ 17] _emit_bc_free
0x10001115F	0x00000267	[ 17] _mp_emit_bc_start_pass
0x1000113C6	0x00000159	[ 17] _mp_emit_bc_end_pass
0x10001151F	0x0000002D	[ 17] _mp_emit_bc_adjust_stack_size
0x10001154C	0x00000129	[ 17] _mp_emit_bc_set_source_line
0x100011675	0x0000004A	[ 17] _mp_emit_bc_label_assign
0x1000116BF	0x0000008C	[ 17] _mp_emit_bc_import
0x10001174B	0x0000007B	[ 17] _mp_emit_bc_load_const_tok
0x1000117C6	0x0000011B	[ 17] _mp_emit_bc_load_const_small_int
0x1000118E1	0x0000004A	[ 17] _mp_emit_bc_load_const_str
0x10001192B	0x00000049	[ 17] _mp_emit_bc_load_const_obj
0x100011974	0x0000002A	[ 17] _mp_emit_bc_load_null
0x10001199E	0x00000083	[ 17] _mp_emit_bc_load_local
0x100011A21	0x0000005A	[ 17] _mp_emit_bc_load_global
0x100011A7B	0x00000060	[ 17] _mp_emit_bc_load_method
0x100011ADB	0x0000002A	[ 17] _mp_emit_bc_load_build_class
0x100011B05	0x0000007D	[ 17] _mp_emit_bc_subscr
0x100011B82	0x00000027	[ 17] _mp_emit_bc_rot_three
0x100011BA9	0x000000C5	[ 17] _mp_emit_bc_attr
0x100011C6E	0x00000027	[ 17] _mp_emit_bc_rot_two
0x100011C95	0x00000087	[ 17] _mp_emit_bc_store_local
0x100011D1C	0x0000005C	[ 17] _mp_emit_bc_store_global
0x100011D78	0x0000004A	[ 17] _mp_emit_bc_delete_local
0x100011DC2	0x00000057	[ 17] _mp_emit_bc_delete_global
0x100011E19	0x0000002A	[ 17] _mp_emit_bc_dup_top
0x100011E43	0x0000002A	[ 17] _mp_emit_bc_dup_top_two
0x100011E6D	0x0000002C	[ 17] _mp_emit_bc_pop_top
0x100011E99	0x00000023	[ 17] _mp_emit_bc_jump
0x100011EBC	0x00000101	[ 17] _emit_write_bytecode_byte_label
0x100011FBD	0x00000019	[ 17] _mp_emit_bc_pop_jump_if
0x100011FD6	0x00000019	[ 17] _mp_emit_bc_jump_if_or_pop
0x100011FEF	0x000000AA	[ 17] _mp_emit_bc_unwind_jump
0x100012099	0x0000001D	[ 17] _mp_emit_bc_setup_block
0x1000120B6	0x00000062	[ 17] _mp_emit_bc_with_cleanup
0x100012118	0x0000002C	[ 17] _mp_emit_bc_end_finally
0x100012144	0x0000002E	[ 17] _mp_emit_bc_get_iter
0x100012172	0x00000017	[ 17] _mp_emit_bc_for_iter
0x100012189	0x00000011	[ 17] _mp_emit_bc_for_iter_end
0x10001219A	0x00000023	[ 17] _mp_emit_bc_pop_except_jump
0x1000121BD	0x0000002A	[ 17] _mp_emit_bc_unary_op
0x1000121E7	0x00000070	[ 17] _mp_emit_bc_binary_op
0x100012257	0x00000069	[ 17] _mp_emit_bc_build
0x1000122C0	0x0000002C	[ 17] _mp_emit_bc_store_map
0x1000122EC	0x00000067	[ 17] _mp_emit_bc_store_comp
0x100012353	0x0000003E	[ 17] _mp_emit_bc_unpack_sequence
0x100012391	0x00000045	[ 17] _mp_emit_bc_unpack_ex
0x1000123D6	0x00000030	[ 17] _mp_emit_bc_make_function
0x100012406	0x00000070	[ 17] _emit_write_bytecode_byte_child
0x100012476	0x00000062	[ 17] _mp_emit_bc_make_closure
0x1000124D8	0x0000001A	[ 17] _mp_emit_bc_call_function
0x1000124F2	0x00000072	[ 17] _emit_bc_call_function_method_helper
0x100012564	0x0000001D	[ 17] _mp_emit_bc_call_method
0x100012581	0x00000030	[ 17] _mp_emit_bc_return_value
0x1000125B1	0x00000042	[ 17] _mp_emit_bc_raise_varargs
0x1000125F3	0x00000038	[ 17] _mp_emit_bc_yield
0x10001262B	0x0000000F	[ 17] _mp_emit_bc_start_except_handler
0x10001263A	0x00000011	[ 17] _mp_emit_bc_end_except_handler
0x10001264B	0x0000002C	[ 17] _emit_get_cur_to_write_code_info
0x100012677	0x0000003C	[ 17] _emit_get_cur_to_write_bytecode
0x1000126B3	0x00000025	[ 18] _mp_asm_base_init
0x1000126D8	0x00000025	[ 18] _mp_asm_base_deinit
0x1000126FD	0x0000005D	[ 18] _mp_asm_base_start_pass
0x10001275A	0x00000033	[ 18] _mp_asm_base_get_cur_to_write_bytes
0x10001278D	0x00000042	[ 18] _mp_asm_base_label_assign
0x1000127CF	0x00000015	[ 18] _mp_asm_base_align
0x1000127E4	0x00000041	[ 18] _mp_asm_base_data
0x100012825	0x0000000F	[ 19] _asm_x64_mov_r64_r64
0x100012834	0x00000054	[ 19] _asm_x64_generic_r64_r64
0x100012888	0x0000007C	[ 19] _asm_x64_mov_r8_to_mem8
0x100012904	0x000000D8	[ 19] _asm_x64_write_r64_disp
0x1000129DC	0x00000087	[ 19] _asm_x64_mov_r16_to_mem16
0x100012A63	0x0000007C	[ 19] _asm_x64_mov_r32_to_mem32
0x100012ADF	0x0000005B	[ 19] _asm_x64_mov_r64_to_mem64
0x100012B3A	0x00000087	[ 19] _asm_x64_mov_mem8_to_r64zx
0x100012BC1	0x00000087	[ 19] _asm_x64_mov_mem16_to_r64zx
0x100012C48	0x0000007C	[ 19] _asm_x64_mov_mem32_to_r64zx
0x100012CC4	0x0000005B	[ 19] _asm_x64_mov_mem64_to_r64
0x100012D1F	0x00000075	[ 19] _asm_x64_mov_i32_to_r64
0x100012D94	0x0000005A	[ 19] _asm_x64_mov_i64_to_r64
0x100012DEE	0x00000019	[ 19] _asm_x64_mov_i64_to_r64_optimised
0x100012E07	0x0000000F	[ 19] _asm_x64_and_r64_r64
0x100012E16	0x0000000F	[ 19] _asm_x64_or_r64_r64
0x100012E25	0x0000000F	[ 19] _asm_x64_xor_r64_r64
0x100012E34	0x00000038	[ 19] _asm_x64_shl_r64_cl
0x100012E6C	0x00000038	[ 19] _asm_x64_shr_r64_cl
0x100012EA4	0x00000035	[ 19] _asm_x64_sar_r64_cl
0x100012ED9	0x0000000F	[ 19] _asm_x64_add_r64_r64
0x100012EE8	0x0000000F	[ 19] _asm_x64_sub_r64_r64
0x100012EF7	0x0000006A	[ 19] _asm_x64_mul_r64_r64
0x100012F61	0x00000015	[ 19] _asm_x64_cmp_r64_with_r64
0x100012F76	0x00000044	[ 19] _asm_x64_test_r8_with_r8
0x100012FBA	0x00000015	[ 19] _asm_x64_test_r64_with_r64
0x100012FCF	0x0000003E	[ 19] _asm_x64_setcc_r8
0x10001300D	0x00000034	[ 19] _asm_x64_jmp_reg
0x100013041	0x0000009B	[ 19] _asm_x64_jmp_label
0x1000130DC	0x000000A9	[ 19] _asm_x64_jcc_label
0x100013185	0x00000088	[ 19] _asm_x64_entry
0x10001320D	0x00000076	[ 19] _asm_x64_sub_r64_i32
0x100013283	0x0000008A	[ 19] _asm_x64_exit
0x10001330D	0x00000018	[ 19] _asm_x64_mov_local_to_r64
0x100013325	0x00000016	[ 19] _asm_x64_mov_r64_to_local
0x10001333B	0x00000094	[ 19] _asm_x64_mov_local_addr_to_r64
0x1000133CF	0x00000077	[ 19] _asm_x64_mov_reg_pcrel
0x100013446	0x0000004B	[ 19] _asm_x64_call_ind
0x100013494	0x0000008A	[ 20] _emit_native_x64_new
0x10001351E	0x0000004C	[ 20] _emit_native_x64_free
0x10001356A	0x0000083B	[ 20] _emit_native_start_pass
0x100013DA5	0x000004A8	[ 20] _emit_native_end_pass
0x10001424D	0x00000060	[ 20] _emit_native_adjust_stack_size
0x1000142AD	0x00000006	[ 20] _emit_native_set_source_line
0x1000142B3	0x0000009A	[ 20] _emit_native_load_local
0x10001434D	0x0000006D	[ 20] _emit_native_load_global
0x1000143BA	0x000000D2	[ 20] _emit_native_store_local
0x10001448C	0x00000117	[ 20] _emit_native_store_global
0x1000145A3	0x0000003C	[ 20] _emit_native_delete_local
0x1000145DF	0x00000018	[ 20] _emit_native_delete_global
0x1000145F7	0x000000AE	[ 20] _emit_native_label_assign
0x1000146A5	0x00000155	[ 20] _emit_native_import
0x1000147FA	0x00000039	[ 20] _emit_native_load_const_tok
0x100014833	0x00000012	[ 20] _emit_native_load_const_small_int
0x100014845	0x00000036	[ 20] _emit_native_load_const_str
0x10001487B	0x00000031	[ 20] _emit_native_load_const_obj
0x1000148AC	0x0000000E	[ 20] _emit_native_load_null
0x1000148BA	0x000000AE	[ 20] _emit_native_load_method
0x100014968	0x00000033	[ 20] _emit_native_load_build_class
0x10001499B	0x00000AED	[ 20] _emit_native_subscr
0x100015488	0x000001C9	[ 20] _emit_native_attr
0x100015651	0x00000063	[ 20] _emit_native_dup_top
0x1000156B4	0x000000A1	[ 20] _emit_native_dup_top_two
0x100015755	0x00000011	[ 20] _emit_native_pop_top
0x100015766	0x00000081	[ 20] _emit_native_rot_two
0x1000157E7	0x000000C4	[ 20] _emit_native_rot_three
0x1000158AB	0x00000031	[ 20] _emit_native_jump
0x1000158DC	0x0000000F	[ 20] _emit_native_pop_jump_if
0x1000158EB	0x0000000C	[ 20] _emit_native_jump_if_or_pop
0x1000158F7	0x0000014F	[ 20] _emit_native_unwind_jump
0x100015A46	0x000001A7	[ 20] _emit_native_setup_block
0x100015BED	0x00000228	[ 20] _emit_native_with_cleanup
0x100015E15	0x00000125	[ 20] _emit_native_end_finally
0x100015F3A	0x000000C4	[ 20] _emit_native_get_iter
0x100015FFE	0x00000078	[ 20] _emit_native_for_iter
0x100016076	0x00000011	[ 20] _emit_native_for_iter_end
0x100016087	0x00000067	[ 20] _emit_native_pop_except_jump
0x1000160EE	0x000000A8	[ 20] _emit_native_unary_op
0x100016196	0x00000506	[ 20] _emit_native_binary_op
0x10001669C	0x000001BD	[ 20] _emit_native_build
0x100016859	0x000000CD	[ 20] _emit_native_store_map
0x100016926	0x00000140	[ 20] _emit_native_store_comp
0x100016A66	0x0000006F	[ 20] _emit_native_unpack_sequence
0x100016AD5	0x00000085	[ 20] _emit_native_unpack_ex
0x100016B5A	0x000000AF	[ 20] _emit_native_make_function
0x100016C09	0x00000138	[ 20] _emit_native_make_closure
0x100016D41	0x000001C7	[ 20] _emit_native_call_function
0x100016F08	0x00000081	[ 20] _emit_native_call_method
0x100016F89	0x000001ED	[ 20] _emit_native_return_value
0x100017176	0x0000008F	[ 20] _emit_native_raise_varargs
0x100017205	0x00000293	[ 20] _emit_native_yield
0x100017498	0x00000038	[ 20] _emit_native_start_except_handler
0x1000174D0	0x00000011	[ 20] _emit_native_end_except_handler
0x1000174E1	0x00000047	[ 20] _emit_call_with_imm_arg
0x100017528	0x00000034	[ 20] _emit_native_mov_state_reg
0x10001755C	0x0000039F	[ 20] _emit_native_global_exc_entry
0x1000178FB	0x0000005F	[ 20] _need_reg_all
0x10001795A	0x00000032	[ 20] _emit_native_mov_reg_state
0x10001798C	0x0000003C	[ 20] _ensure_extra_stack
0x1000179C8	0x0000003B	[ 20] _adjust_stack
0x100017A03	0x000000A4	[ 20] _emit_native_load_fast
0x100017AA7	0x00000051	[ 20] _emit_post_push_reg
0x100017AF8	0x0000007C	[ 20] _need_reg_single
0x100017B74	0x00000077	[ 20] _emit_pre_pop_reg_flexible
0x100017BEB	0x000000A6	[ 20] _emit_access_stack
0x100017C91	0x000000BD	[ 20] _load_reg_stack_imm
0x100017D4E	0x00000051	[ 20] _emit_post_push_imm
0x100017D9F	0x00000065	[ 20] _emit_call_with_qstr_arg
0x100017E04	0x00000107	[ 20] _emit_native_store_fast
0x100017F0B	0x0000007D	[ 20] _need_stack_settled
0x100017F88	0x00000088	[ 20] _emit_native_leave_exc_stack
0x100018010	0x00000075	[ 20] _emit_load_reg_with_object
0x100018085	0x0000015B	[ 20] _emit_get_stack_pointer_to_reg_for_pop
0x1000181E0	0x0000007D	[ 20] _emit_get_stack_pointer_to_reg_for_push
0x10001825D	0x00000055	[ 20] _emit_native_mov_reg_state_addr
0x1000182B2	0x0000019A	[ 20] _emit_native_jump_helper
0x10001844C	0x0000009A	[ 20] _emit_native_push_exc_stack
0x1000184E6	0x0000005D	[ 20] _emit_call_with_2_imm_args
0x100018543	0x00000073	[ 20] _emit_load_reg_with_child
0x1000185B6	0x0000006D	[ 20] _emit_fold_stack_top
0x100018623	0x0000002F	[ 21] _asm_x86_mov_r32_r32
0x100018652	0x00000042	[ 21] _asm_x86_mov_r8_to_mem8
0x100018694	0x000000D5	[ 21] _asm_x86_write_r32_disp
0x100018769	0x00000044	[ 21] _asm_x86_mov_r16_to_mem16
0x1000187AD	0x00000042	[ 21] _asm_x86_mov_r32_to_mem32
0x1000187EF	0x00000044	[ 21] _asm_x86_mov_mem8_to_r32zx
0x100018833	0x00000044	[ 21] _asm_x86_mov_mem16_to_r32zx
0x100018877	0x00000042	[ 21] _asm_x86_mov_mem32_to_r32
0x1000188B9	0x00000050	[ 21] _asm_x86_mov_i32_to_r32
0x100018909	0x0000002F	[ 21] _asm_x86_and_r32_r32
0x100018938	0x0000002F	[ 21] _asm_x86_or_r32_r32
0x100018967	0x0000002F	[ 21] _asm_x86_xor_r32_r32
0x100018996	0x00000027	[ 21] _asm_x86_shl_r32_cl
0x1000189BD	0x00000027	[ 21] _asm_x86_shr_r32_cl
0x1000189E4	0x00000027	[ 21] _asm_x86_sar_r32_cl
0x100018A0B	0x0000002F	[ 21] _asm_x86_add_r32_r32
0x100018A3A	0x0000002F	[ 21] _asm_x86_sub_r32_r32
0x100018A69	0x00000031	[ 21] _asm_x86_mul_r32_r32
0x100018A9A	0x0000002F	[ 21] _asm_x86_cmp_r32_with_r32
0x100018AC9	0x0000002F	[ 21] _asm_x86_test_r8_with_r8
0x100018AF8	0x0000002F	[ 21] _asm_x86_test_r32_with_r32
0x100018B27	0x00000032	[ 21] _asm_x86_setcc_r8
0x100018B59	0x00000027	[ 21] _asm_x86_jmp_reg
0x100018B80	0x0000009B	[ 21] _asm_x86_jmp_label
0x100018C1B	0x000000A9	[ 21] _asm_x86_jcc_label
0x100018CC4	0x00000084	[ 21] _asm_x86_entry
0x100018D48	0x0000006E	[ 21] _asm_x86_sub_r32_i32
0x100018DB6	0x00000086	[ 21] _asm_x86_exit
0x100018E3C	0x0000001B	[ 21] _asm_x86_mov_arg_to_r32
0x100018E57	0x00000018	[ 21] _asm_x86_mov_local_to_r32
0x100018E6F	0x00000016	[ 21] _asm_x86_mov_r32_to_local
0x100018E85	0x00000072	[ 21] _asm_x86_mov_local_addr_to_r32
0x100018EF7	0x000000AB	[ 21] _asm_x86_mov_reg_pcrel
0x100018FA2	0x00000163	[ 21] _asm_x86_call_ind
0x100019108	0x0000008A	[ 22] _emit_native_x86_new
0x100019192	0x0000004C	[ 22] _emit_native_x86_free
0x1000191DE	0x00000886	[ 22] _emit_native_start_pass
0x100019A64	0x000004A6	[ 22] _emit_native_end_pass
0x100019F0A	0x00000060	[ 22] _emit_native_adjust_stack_size
0x100019F6A	0x00000006	[ 22] _emit_native_set_source_line
0x100019F70	0x0000009A	[ 22] _emit_native_load_local
0x10001A00A	0x0000006A	[ 22] _emit_native_load_global
0x10001A074	0x000000D2	[ 22] _emit_native_store_local
0x10001A146	0x00000111	[ 22] _emit_native_store_global
0x10001A257	0x0000003C	[ 22] _emit_native_delete_local
0x10001A293	0x00000015	[ 22] _emit_native_delete_global
0x10001A2A8	0x000000AE	[ 22] _emit_native_label_assign
0x10001A356	0x00000151	[ 22] _emit_native_import
0x10001A4A7	0x00000039	[ 22] _emit_native_load_const_tok
0x10001A4E0	0x00000012	[ 22] _emit_native_load_const_small_int
0x10001A4F2	0x00000036	[ 22] _emit_native_load_const_str
0x10001A528	0x00000031	[ 22] _emit_native_load_const_obj
0x10001A559	0x0000000E	[ 22] _emit_native_load_null
0x10001A567	0x000000A8	[ 22] _emit_native_load_method
0x10001A60F	0x00000035	[ 22] _emit_native_load_build_class
0x10001A644	0x00000A98	[ 22] _emit_native_subscr
0x10001B0DC	0x000001B7	[ 22] _emit_native_attr
0x10001B293	0x00000063	[ 22] _emit_native_dup_top
0x10001B2F6	0x000000A1	[ 22] _emit_native_dup_top_two
0x10001B397	0x00000011	[ 22] _emit_native_pop_top
0x10001B3A8	0x00000081	[ 22] _emit_native_rot_two
0x10001B429	0x000000C4	[ 22] _emit_native_rot_three
0x10001B4ED	0x00000031	[ 22] _emit_native_jump
0x10001B51E	0x0000000F	[ 22] _emit_native_pop_jump_if
0x10001B52D	0x0000000C	[ 22] _emit_native_jump_if_or_pop
0x10001B539	0x0000014F	[ 22] _emit_native_unwind_jump
0x10001B688	0x000001A1	[ 22] _emit_native_setup_block
0x10001B829	0x0000020B	[ 22] _emit_native_with_cleanup
0x10001BA34	0x00000127	[ 22] _emit_native_end_finally
0x10001BB5B	0x000000CB	[ 22] _emit_native_get_iter
0x10001BC26	0x0000007A	[ 22] _emit_native_for_iter
0x10001BCA0	0x00000011	[ 22] _emit_native_for_iter_end
0x10001BCB1	0x00000067	[ 22] _emit_native_pop_except_jump
0x10001BD18	0x000000A5	[ 22] _emit_native_unary_op
0x10001BDBD	0x000004FF	[ 22] _emit_native_binary_op
0x10001C2BC	0x000001B9	[ 22] _emit_native_build
0x10001C475	0x000000CF	[ 22] _emit_native_store_map
0x10001C544	0x00000142	[ 22] _emit_native_store_comp
0x10001C686	0x0000006C	[ 22] _emit_native_unpack_sequence
0x10001C6F2	0x00000082	[ 22] _emit_native_unpack_ex
0x10001C774	0x000000B4	[ 22] _emit_native_make_function
0x10001C828	0x0000012F	[ 22] _emit_native_make_closure
0x10001C957	0x000001C1	[ 22] _emit_native_call_function
0x10001CB18	0x00000081	[ 22] _emit_native_call_method
0x10001CB99	0x000001DD	[ 22] _emit_native_return_value
0x10001CD76	0x00000091	[ 22] _emit_native_raise_varargs
0x10001CE07	0x00000297	[ 22] _emit_native_yield
0x10001D09E	0x00000038	[ 22] _emit_native_start_except_handler
0x10001D0D6	0x00000011	[ 22] _emit_native_end_except_handler
0x10001D0E7	0x00000052	[ 22] _emit_call_with_imm_arg
0x10001D139	0x00000034	[ 22] _emit_native_mov_state_reg
0x10001D16D	0x0000039E	[ 22] _emit_native_global_exc_entry
0x10001D50B	0x0000005F	[ 22] _need_reg_all
0x10001D56A	0x00000032	[ 22] _emit_native_mov_reg_state
0x10001D59C	0x0000003C	[ 22] _ensure_extra_stack
0x10001D5D8	0x0000003B	[ 22] _adjust_stack
0x10001D613	0x000000A4	[ 22] _emit_native_load_fast
0x10001D6B7	0x00000051	[ 22] _emit_post_push_reg
0x10001D708	0x0000007C	[ 22] _need_reg_single
0x10001D784	0x00000077	[ 22] _emit_pre_pop_reg_flexible
0x10001D7FB	0x000000A6	[ 22] _emit_access_stack
0x10001D8A1	0x000000B8	[ 22] _load_reg_stack_imm
0x10001D959	0x00000051	[ 22] _emit_post_push_imm
0x10001D9AA	0x00000070	[ 22] _emit_call_with_qstr_arg
0x10001DA1A	0x00000107	[ 22] _emit_native_store_fast
0x10001DB21	0x0000007D	[ 22] _need_stack_settled
0x10001DB9E	0x00000088	[ 22] _emit_native_leave_exc_stack
0x10001DC26	0x00000075	[ 22] _emit_load_reg_with_object
0x10001DC9B	0x00000158	[ 22] _emit_get_stack_pointer_to_reg_for_pop
0x10001DDF3	0x0000007D	[ 22] _emit_get_stack_pointer_to_reg_for_push
0x10001DE70	0x00000054	[ 22] _emit_native_mov_reg_state_addr
0x10001DEC4	0x0000019C	[ 22] _emit_native_jump_helper
0x10001E060	0x0000009A	[ 22] _emit_native_push_exc_stack
0x10001E0FA	0x00000065	[ 22] _emit_call_with_2_imm_args
0x10001E15F	0x00000070	[ 22] _emit_load_reg_with_child
0x10001E1CF	0x0000006A	[ 22] _emit_fold_stack_top
0x10001E239	0x000001B9	[ 23] _asm_thumb_entry
0x10001E3F2	0x0000002E	[ 23] _asm_thumb_op32
0x10001E420	0x00000021	[ 23] _asm_thumb_op16
0x10001E441	0x000000C3	[ 23] _asm_thumb_exit
0x10001E504	0x0000004D	[ 23] _asm_thumb_format_4
0x10001E551	0x00000052	[ 23] _asm_thumb_mov_reg_reg
0x10001E5A3	0x0000006D	[ 23] _asm_thumb_mov_reg_i16
0x10001E610	0x00000075	[ 23] _asm_thumb_b_n_label
0x10001E685	0x00000107	[ 23] _asm_thumb_bcc_nw_label
0x10001E78C	0x0000008C	[ 23] _asm_thumb_bl_label
0x10001E818	0x00000116	[ 23] _asm_thumb_mov_reg_i32
0x10001E92E	0x0000017C	[ 23] _asm_thumb_mov_reg_i32_optimised
0x10001EAAA	0x00000087	[ 23] _asm_thumb_mov_rlo_i16
0x10001EB31	0x0000004A	[ 23] _asm_thumb_mov_local_reg
0x10001EB7B	0x00000028	[ 23] _asm_thumb_mov_local_check
0x10001EBA3	0x0000004C	[ 23] _asm_thumb_mov_reg_local
0x10001EBEF	0x00000042	[ 23] _asm_thumb_mov_reg_local_addr
0x10001EC31	0x000000C5	[ 23] _asm_thumb_mov_reg_pcrel
0x10001ECF6	0x000000F4	[ 23] _asm_thumb_ldr_reg_reg_i12_optimised
0x10001EDEA	0x000001E3	[ 23] _asm_thumb_add_reg_reg_offset
0x10001EFCD	0x000000F3	[ 23] _asm_thumb_ldrh_reg_reg_i12_optimised
0x10001F0C0	0x00000110	[ 23] _asm_thumb_b_label
0x10001F1D0	0x00000135	[ 23] _asm_thumb_bcc_label
0x10001F305	0x00000044	[ 23] _asm_thumb_bcc_rel9
0x10001F349	0x00000048	[ 23] _asm_thumb_b_rel12
0x10001F391	0x0000003D	[ 23] _asm_thumb_bl_ind
0x10001F3D0	0x0000008A	[ 24] _emit_native_thumb_new
0x10001F45A	0x0000004C	[ 24] _emit_native_thumb_free
0x10001F4A6	0x000007E7	[ 24] _emit_native_start_pass
0x10001FC8D	0x000004A3	[ 24] _emit_native_end_pass
0x100020130	0x00000060	[ 24] _emit_native_adjust_stack_size
0x100020190	0x00000006	[ 24] _emit_native_set_source_line
0x100020196	0x0000009A	[ 24] _emit_native_load_local
0x100020230	0x0000006A	[ 24] _emit_native_load_global
0x10002029A	0x000000DA	[ 24] _emit_native_store_local
0x100020374	0x00000111	[ 24] _emit_native_store_global
0x100020485	0x0000003C	[ 24] _emit_native_delete_local
0x1000204C1	0x00000015	[ 24] _emit_native_delete_global
0x1000204D6	0x000000AE	[ 24] _emit_native_label_assign
0x100020584	0x0000014F	[ 24] _emit_native_import
0x1000206D3	0x00000039	[ 24] _emit_native_load_const_tok
0x10002070C	0x00000012	[ 24] _emit_native_load_const_small_int
0x10002071E	0x00000036	[ 24] _emit_native_load_const_str
0x100020754	0x00000031	[ 24] _emit_native_load_const_obj
0x100020785	0x0000000E	[ 24] _emit_native_load_null
0x100020793	0x000000A8	[ 24] _emit_native_load_method
0x10002083B	0x00000036	[ 24] _emit_native_load_build_class
0x100020871	0x00000B8F	[ 24] _emit_native_subscr
0x100021400	0x000001BC	[ 24] _emit_native_attr
0x1000215BC	0x00000063	[ 24] _emit_native_dup_top
0x10002161F	0x000000A1	[ 24] _emit_native_dup_top_two
0x1000216C0	0x00000011	[ 24] _emit_native_pop_top
0x1000216D1	0x00000081	[ 24] _emit_native_rot_two
0x100021752	0x000000C4	[ 24] _emit_native_rot_three
0x100021816	0x00000031	[ 24] _emit_native_jump
0x100021847	0x0000000F	[ 24] _emit_native_pop_jump_if
0x100021856	0x0000000C	[ 24] _emit_native_jump_if_or_pop
0x100021862	0x00000153	[ 24] _emit_native_unwind_jump
0x1000219B5	0x000001A1	[ 24] _emit_native_setup_block
0x100021B56	0x00000205	[ 24] _emit_native_with_cleanup
0x100021D5B	0x00000127	[ 24] _emit_native_end_finally
0x100021E82	0x000000C7	[ 24] _emit_native_get_iter
0x100021F49	0x00000076	[ 24] _emit_native_for_iter
0x100021FBF	0x00000011	[ 24] _emit_native_for_iter_end
0x100021FD0	0x00000067	[ 24] _emit_native_pop_except_jump
0x100022037	0x000000A5	[ 24] _emit_native_unary_op
0x1000220DC	0x00000518	[ 24] _emit_native_binary_op
0x1000225F4	0x000001B7	[ 24] _emit_native_build
0x1000227AB	0x000000CD	[ 24] _emit_native_store_map
0x100022878	0x00000140	[ 24] _emit_native_store_comp
0x1000229B8	0x0000006C	[ 24] _emit_native_unpack_sequence
0x100022A24	0x00000082	[ 24] _emit_native_unpack_ex
0x100022AA6	0x000000B2	[ 24] _emit_native_make_function
0x100022B58	0x0000012B	[ 24] _emit_native_make_closure
0x100022C83	0x000001C1	[ 24] _emit_native_call_function
0x100022E44	0x00000081	[ 24] _emit_native_call_method
0x100022EC5	0x000001DB	[ 24] _emit_native_return_value
0x1000230A0	0x0000008F	[ 24] _emit_native_raise_varargs
0x10002312F	0x00000294	[ 24] _emit_native_yield
0x1000233C3	0x00000038	[ 24] _emit_native_start_except_handler
0x1000233FB	0x00000011	[ 24] _emit_native_end_except_handler
0x10002340C	0x0000004A	[ 24] _emit_call_with_imm_arg
0x100023456	0x00000032	[ 24] _emit_native_mov_state_reg
0x100023488	0x00000390	[ 24] _emit_native_global_exc_entry
0x100023818	0x0000005F	[ 24] _need_reg_all
0x100023877	0x0000002D	[ 24] _emit_native_mov_reg_state
0x1000238A4	0x0000003C	[ 24] _ensure_extra_stack
0x1000238E0	0x0000003B	[ 24] _adjust_stack
0x10002391B	0x000000A4	[ 24] _emit_native_load_fast
0x1000239BF	0x00000051	[ 24] _emit_post_push_reg
0x100023A10	0x0000007C	[ 24] _need_reg_single
0x100023A8C	0x00000077	[ 24] _emit_pre_pop_reg_flexible
0x100023B03	0x000000A6	[ 24] _emit_access_stack
0x100023BA9	0x000000A9	[ 24] _load_reg_stack_imm
0x100023C52	0x00000051	[ 24] _emit_post_push_imm
0x100023CA3	0x00000066	[ 24] _emit_call_with_qstr_arg
0x100023D09	0x00000107	[ 24] _emit_native_store_fast
0x100023E10	0x0000007D	[ 24] _need_stack_settled
0x100023E8D	0x0000008D	[ 24] _emit_native_leave_exc_stack
0x100023F1A	0x00000070	[ 24] _emit_load_reg_with_object
0x100023F8A	0x00000158	[ 24] _emit_get_stack_pointer_to_reg_for_pop
0x1000240E2	0x0000007D	[ 24] _emit_get_stack_pointer_to_reg_for_push
0x10002415F	0x00000059	[ 24] _emit_native_mov_reg_state_addr
0x1000241B8	0x00000196	[ 24] _emit_native_jump_helper
0x10002434E	0x0000009B	[ 24] _emit_native_push_exc_stack
0x1000243E9	0x0000005D	[ 24] _emit_call_with_2_imm_args
0x100024446	0x0000006C	[ 24] _emit_load_reg_with_child
0x1000244B2	0x0000006A	[ 24] _emit_fold_stack_top
0x10002451C	0x00000054	[ 25] _emit_inline_thumb_new
0x100024570	0x0000002A	[ 25] _emit_inline_thumb_free
0x10002459A	0x00000050	[ 25] _emit_inline_thumb_start_pass
0x1000245EA	0x0000000A	[ 25] _emit_inline_thumb_end_pass
0x1000245F4	0x000000BB	[ 25] _emit_inline_thumb_count_params
0x1000246AF	0x00000044	[ 25] _emit_inline_thumb_label
0x1000246F3	0x000011A9	[ 25] _emit_inline_thumb_op
0x10002589C	0x000000AD	[ 25] _get_arg_vfpreg
0x100025949	0x000000C6	[ 25] _get_arg_reg
0x100025A0F	0x00000078	[ 25] _get_arg_addr
0x100025A87	0x0000007E	[ 25] _get_arg_i
0x100025B05	0x00000077	[ 25] _get_arg_label
0x100025B7C	0x00000162	[ 25] _get_arg_reglist
0x100025CDE	0x0000007A	[ 26] _asm_arm_entry
0x100025D58	0x00000063	[ 26] _asm_arm_exit
0x100025DBB	0x0000002E	[ 26] _asm_arm_mov_reg_reg
0x100025DE9	0x0000006B	[ 26] _asm_arm_mov_reg_i32
0x100025E54	0x00000071	[ 26] _asm_arm_mov_reg_i32_optimised
0x100025EC5	0x00000032	[ 26] _asm_arm_mov_local_reg
0x100025EF7	0x00000032	[ 26] _asm_arm_mov_reg_local
0x100025F29	0x00000031	[ 26] _asm_arm_cmp_reg_i8
0x100025F5A	0x0000002E	[ 26] _asm_arm_cmp_reg_reg
0x100025F88	0x00000060	[ 26] _asm_arm_setcc_reg
0x100025FE8	0x00000041	[ 26] _asm_arm_add_reg_reg_reg
0x100026029	0x00000041	[ 26] _asm_arm_sub_reg_reg_reg
0x10002606A	0x0000004A	[ 26] _asm_arm_mul_reg_reg_reg
0x1000260B4	0x00000041	[ 26] _asm_arm_and_reg_reg_reg
0x1000260F5	0x00000041	[ 26] _asm_arm_eor_reg_reg_reg
0x100026136	0x00000041	[ 26] _asm_arm_orr_reg_reg_reg
0x100026177	0x00000033	[ 26] _asm_arm_mov_reg_local_addr
0x1000261AA	0x000000AC	[ 26] _asm_arm_mov_reg_pcrel
0x100026256	0x00000036	[ 26] _asm_arm_lsl_reg_reg
0x10002628C	0x00000036	[ 26] _asm_arm_lsr_reg_reg
0x1000262C2	0x00000036	[ 26] _asm_arm_asr_reg_reg
0x1000262F8	0x00000041	[ 26] _asm_arm_ldr_reg_reg
0x100026339	0x00000032	[ 26] _asm_arm_ldrh_reg_reg
0x10002636B	0x00000052	[ 26] _asm_arm_ldrh_reg_reg_offset
0x1000263BD	0x00000032	[ 26] _asm_arm_ldrb_reg_reg
0x1000263EF	0x00000041	[ 26] _asm_arm_str_reg_reg
0x100026430	0x00000032	[ 26] _asm_arm_strh_reg_reg
0x100026462	0x00000032	[ 26] _asm_arm_strb_reg_reg
0x100026494	0x00000041	[ 26] _asm_arm_str_reg_reg_reg
0x1000264D5	0x0000005C	[ 26] _asm_arm_strh_reg_reg_reg
0x100026531	0x00000041	[ 26] _asm_arm_strb_reg_reg_reg
0x100026572	0x00000080	[ 26] _asm_arm_bcc_label
0x1000265F2	0x00000011	[ 26] _asm_arm_b_label
0x100026603	0x00000050	[ 26] _asm_arm_bl_ind
0x100026653	0x00000026	[ 26] _asm_arm_bx_reg
0x10002667C	0x0000008A	[ 27] _emit_native_arm_new
0x100026706	0x0000004C	[ 27] _emit_native_arm_free
0x100026752	0x000007FE	[ 27] _emit_native_start_pass
0x100026F50	0x000004A2	[ 27] _emit_native_end_pass
0x1000273F2	0x00000060	[ 27] _emit_native_adjust_stack_size
0x100027452	0x00000006	[ 27] _emit_native_set_source_line
0x100027458	0x0000009A	[ 27] _emit_native_load_local
0x1000274F2	0x0000006A	[ 27] _emit_native_load_global
0x10002755C	0x000000D2	[ 27] _emit_native_store_local
0x10002762E	0x00000111	[ 27] _emit_native_store_global
0x10002773F	0x0000003C	[ 27] _emit_native_delete_local
0x10002777B	0x00000015	[ 27] _emit_native_delete_global
0x100027790	0x000000AE	[ 27] _emit_native_label_assign
0x10002783E	0x0000014F	[ 27] _emit_native_import
0x10002798D	0x00000039	[ 27] _emit_native_load_const_tok
0x1000279C6	0x00000012	[ 27] _emit_native_load_const_small_int
0x1000279D8	0x00000036	[ 27] _emit_native_load_const_str
0x100027A0E	0x00000031	[ 27] _emit_native_load_const_obj
0x100027A3F	0x0000000E	[ 27] _emit_native_load_null
0x100027A4D	0x000000A8	[ 27] _emit_native_load_method
0x100027AF5	0x00000036	[ 27] _emit_native_load_build_class
0x100027B2B	0x000009F1	[ 27] _emit_native_subscr
0x10002851C	0x000001BC	[ 27] _emit_native_attr
0x1000286D8	0x00000063	[ 27] _emit_native_dup_top
0x10002873B	0x000000A1	[ 27] _emit_native_dup_top_two
0x1000287DC	0x00000011	[ 27] _emit_native_pop_top
0x1000287ED	0x00000081	[ 27] _emit_native_rot_two
0x10002886E	0x000000C4	[ 27] _emit_native_rot_three
0x100028932	0x00000031	[ 27] _emit_native_jump
0x100028963	0x0000000F	[ 27] _emit_native_pop_jump_if
0x100028972	0x0000000C	[ 27] _emit_native_jump_if_or_pop
0x10002897E	0x00000150	[ 27] _emit_native_unwind_jump
0x100028ACE	0x000001A1	[ 27] _emit_native_setup_block
0x100028C6F	0x00000203	[ 27] _emit_native_with_cleanup
0x100028E72	0x00000123	[ 27] _emit_native_end_finally
0x100028F95	0x000000C7	[ 27] _emit_native_get_iter
0x10002905C	0x00000075	[ 27] _emit_native_for_iter
0x1000290D1	0x00000011	[ 27] _emit_native_for_iter_end
0x1000290E2	0x00000067	[ 27] _emit_native_pop_except_jump
0x100029149	0x000000A5	[ 27] _emit_native_unary_op
0x1000291EE	0x000004B2	[ 27] _emit_native_binary_op
0x1000296A0	0x000001B7	[ 27] _emit_native_build
0x100029857	0x000000CD	[ 27] _emit_native_store_map
0x100029924	0x00000140	[ 27] _emit_native_store_comp
0x100029A64	0x0000006C	[ 27] _emit_native_unpack_sequence
0x100029AD0	0x00000082	[ 27] _emit_native_unpack_ex
0x100029B52	0x000000B2	[ 27] _emit_native_make_function
0x100029C04	0x0000012B	[ 27] _emit_native_make_closure
0x100029D2F	0x000001C1	[ 27] _emit_native_call_function
0x100029EF0	0x00000081	[ 27] _emit_native_call_method
0x100029F71	0x000001DB	[ 27] _emit_native_return_value
0x10002A14C	0x0000008F	[ 27] _emit_native_raise_varargs
0x10002A1DB	0x00000293	[ 27] _emit_native_yield
0x10002A46E	0x00000038	[ 27] _emit_native_start_except_handler
0x10002A4A6	0x00000011	[ 27] _emit_native_end_except_handler
0x10002A4B7	0x0000004A	[ 27] _emit_call_with_imm_arg
0x10002A501	0x00000032	[ 27] _emit_native_mov_state_reg
0x10002A533	0x0000038D	[ 27] _emit_native_global_exc_entry
0x10002A8C0	0x0000005F	[ 27] _need_reg_all
0x10002A91F	0x00000030	[ 27] _emit_native_mov_reg_state
0x10002A94F	0x0000003C	[ 27] _ensure_extra_stack
0x10002A98B	0x0000003B	[ 27] _adjust_stack
0x10002A9C6	0x000000A4	[ 27] _emit_native_load_fast
0x10002AA6A	0x00000051	[ 27] _emit_post_push_reg
0x10002AABB	0x0000007C	[ 27] _need_reg_single
0x10002AB37	0x00000077	[ 27] _emit_pre_pop_reg_flexible
0x10002ABAE	0x000000A6	[ 27] _emit_access_stack
0x10002AC54	0x000000AE	[ 27] _load_reg_stack_imm
0x10002AD02	0x00000051	[ 27] _emit_post_push_imm
0x10002AD53	0x00000068	[ 27] _emit_call_with_qstr_arg
0x10002ADBB	0x00000107	[ 27] _emit_native_store_fast
0x10002AEC2	0x0000007D	[ 27] _need_stack_settled
0x10002AF3F	0x0000008A	[ 27] _emit_native_leave_exc_stack
0x10002AFC9	0x00000075	[ 27] _emit_load_reg_with_object
0x10002B03E	0x00000158	[ 27] _emit_get_stack_pointer_to_reg_for_pop
0x10002B196	0x0000007D	[ 27] _emit_get_stack_pointer_to_reg_for_push
0x10002B213	0x00000053	[ 27] _emit_native_mov_reg_state_addr
0x10002B266	0x0000019A	[ 27] _emit_native_jump_helper
0x10002B400	0x0000009B	[ 27] _emit_native_push_exc_stack
0x10002B49B	0x0000005D	[ 27] _emit_call_with_2_imm_args
0x10002B4F8	0x00000070	[ 27] _emit_load_reg_with_child
0x10002B568	0x0000006A	[ 27] _emit_fold_stack_top
0x10002B5D2	0x00000013	[ 28] _asm_xtensa_end_pass
0x10002B5E5	0x0000012E	[ 28] _asm_xtensa_entry
0x10002B713	0x000000E7	[ 28] _asm_xtensa_exit
0x10002B7FA	0x000000A5	[ 28] _asm_xtensa_entry_win
0x10002B89F	0x0000003B	[ 28] _asm_xtensa_exit_win
0x10002B8DA	0x00000021	[ 28] _asm_xtensa_op16
0x10002B8FB	0x00000029	[ 28] _asm_xtensa_op24
0x10002B924	0x0000004E	[ 28] _asm_xtensa_j_label
0x10002B972	0x00000092	[ 28] _asm_xtensa_bccz_reg_label
0x10002BA04	0x000000A4	[ 28] _asm_xtensa_bcc_reg_reg_label
0x10002BAA8	0x00000095	[ 28] _asm_xtensa_setcc_reg_reg_reg
0x10002BB3D	0x0000008D	[ 28] _asm_xtensa_mov_reg_i32
0x10002BBCA	0x00000065	[ 28] _asm_xtensa_mov_reg_i32_optimised
0x10002BC2F	0x0000003F	[ 28] _asm_xtensa_mov_local_reg
0x10002BC6E	0x0000003F	[ 28] _asm_xtensa_mov_reg_local
0x10002BCAD	0x000000B9	[ 28] _asm_xtensa_mov_reg_local_addr
0x10002BD66	0x000000D5	[ 28] _asm_xtensa_mov_reg_pcrel
0x10002BE3B	0x0000009E	[ 28] _asm_xtensa_l32i_optimised
0x10002BED9	0x0000009E	[ 28] _asm_xtensa_s32i_optimised
0x10002BF77	0x00000039	[ 28] _asm_xtensa_call_ind
0x10002BFB0	0x0000003C	[ 28] _asm_xtensa_call_ind_win
0x10002BFEC	0x0000008A	[ 29] _emit_native_xtensa_new
0x10002C076	0x0000004C	[ 29] _emit_native_xtensa_free
0x10002C0C2	0x000007F3	[ 29] _emit_native_start_pass
0x10002C8B5	0x00000498	[ 29] _emit_native_end_pass
0x10002CD4D	0x00000060	[ 29] _emit_native_adjust_stack_size
0x10002CDAD	0x00000006	[ 29] _emit_native_set_source_line
0x10002CDB3	0x000000A3	[ 29] _emit_native_load_local
0x10002CE56	0x00000070	[ 29] _emit_native_load_global
0x10002CEC6	0x000000D5	[ 29] _emit_native_store_local
0x10002CF9B	0x00000115	[ 29] _emit_native_store_global
0x10002D0B0	0x0000003C	[ 29] _emit_native_delete_local
0x10002D0EC	0x00000018	[ 29] _emit_native_delete_global
0x10002D104	0x000000B4	[ 29] _emit_native_label_assign
0x10002D1B8	0x00000156	[ 29] _emit_native_import
0x10002D30E	0x00000039	[ 29] _emit_native_load_const_tok
0x10002D347	0x00000012	[ 29] _emit_native_load_const_small_int
0x10002D359	0x0000003C	[ 29] _emit_native_load_const_str
0x10002D395	0x00000037	[ 29] _emit_native_load_const_obj
0x10002D3CC	0x0000000E	[ 29] _emit_native_load_null
0x10002D3DA	0x000000AE	[ 29] _emit_native_load_method
0x10002D488	0x00000034	[ 29] _emit_native_load_build_class
0x10002D4BC	0x00000AFC	[ 29] _emit_native_subscr
0x10002DFB8	0x000001C2	[ 29] _emit_native_attr
0x10002E17A	0x00000063	[ 29] _emit_native_dup_top
0x10002E1DD	0x000000AA	[ 29] _emit_native_dup_top_two
0x10002E287	0x00000011	[ 29] _emit_native_pop_top
0x10002E298	0x00000087	[ 29] _emit_native_rot_two
0x10002E31F	0x000000CA	[ 29] _emit_native_rot_three
0x10002E3E9	0x00000031	[ 29] _emit_native_jump
0x10002E41A	0x0000000F	[ 29] _emit_native_pop_jump_if
0x10002E429	0x0000000C	[ 29] _emit_native_jump_if_or_pop
0x10002E435	0x00000161	[ 29] _emit_native_unwind_jump
0x10002E596	0x000001AA	[ 29] _emit_native_setup_block
0x10002E740	0x000001F7	[ 29] _emit_native_with_cleanup
0x10002E937	0x0000011C	[ 29] _emit_native_end_finally
0x10002EA53	0x000000BF	[ 29] _emit_native_get_iter
0x10002EB12	0x0000006B	[ 29] _emit_native_for_iter
0x10002EB7D	0x00000011	[ 29] _emit_native_for_iter_end
0x10002EB8E	0x0000006D	[ 29] _emit_native_pop_except_jump
0x10002EBFB	0x000000AB	[ 29] _emit_native_unary_op
0x10002ECA6	0x000004FA	[ 29] _emit_native_binary_op
0x10002F1A0	0x000001BE	[ 29] _emit_native_build
0x10002F35E	0x000000CE	[ 29] _emit_native_store_map
0x10002F42C	0x0000013E	[ 29] _emit_native_store_comp
0x10002F56A	0x0000006F	[ 29] _emit_native_unpack_sequence
0x10002F5D9	0x00000085	[ 29] _emit_native_unpack_ex
0x10002F65E	0x000000B0	[ 29] _emit_native_make_function
0x10002F70E	0x00000124	[ 29] _emit_native_make_closure
0x10002F832	0x000001CD	[ 29] _emit_native_call_function
0x10002F9FF	0x00000084	[ 29] _emit_native_call_method
0x10002FA83	0x000001F0	[ 29] _emit_native_return_value
0x10002FC73	0x0000008D	[ 29] _emit_native_raise_varargs
0x10002FD00	0x0000029C	[ 29] _emit_native_yield
0x10002FF9C	0x0000003E	[ 29] _emit_native_start_except_handler
0x10002FFDA	0x00000011	[ 29] _emit_native_end_except_handler
0x10002FFEB	0x00000045	[ 29] _emit_call_with_imm_arg
0x100030030	0x00000032	[ 29] _emit_native_mov_state_reg
0x100030062	0x00000377	[ 29] _emit_native_global_exc_entry
0x1000303D9	0x0000005F	[ 29] _need_reg_all
0x100030438	0x00000030	[ 29] _emit_native_mov_reg_state
0x100030468	0x0000003C	[ 29] _ensure_extra_stack
0x1000304A4	0x0000003B	[ 29] _adjust_stack
0x1000304DF	0x000000AD	[ 29] _emit_native_load_fast
0x10003058C	0x00000051	[ 29] _emit_post_push_reg
0x1000305DD	0x0000007C	[ 29] _need_reg_single
0x100030659	0x00000077	[ 29] _emit_pre_pop_reg_flexible
0x1000306D0	0x000000B5	[ 29] _emit_access_stack
0x100030785	0x000000A9	[ 29] _load_reg_stack_imm
0x10003082E	0x00000051	[ 29] _emit_post_push_imm
0x10003087F	0x00000069	[ 29] _emit_call_with_qstr_arg
0x1000308E8	0x0000010D	[ 29] _emit_native_store_fast
0x1000309F5	0x0000007D	[ 29] _need_stack_settled
0x100030A72	0x0000008F	[ 29] _emit_native_leave_exc_stack
0x100030B01	0x00000085	[ 29] _emit_load_reg_with_object
0x100030B86	0x0000015E	[ 29] _emit_get_stack_pointer_to_reg_for_pop
0x100030CE4	0x0000007D	[ 29] _emit_get_stack_pointer_to_reg_for_push
0x100030D61	0x0000005B	[ 29] _emit_native_mov_reg_state_addr
0x100030DBC	0x00000183	[ 29] _emit_native_jump_helper
0x100030F3F	0x000000A1	[ 29] _emit_native_push_exc_stack
0x100030FE0	0x0000005B	[ 29] _emit_call_with_2_imm_args
0x10003103B	0x0000007B	[ 29] _emit_load_reg_with_child
0x1000310B6	0x0000006D	[ 29] _emit_fold_stack_top
0x100031124	0x00000058	[ 30] _emit_inline_xtensa_new
0x10003117C	0x0000002A	[ 30] _emit_inline_xtensa_free
0x1000311A6	0x00000050	[ 30] _emit_inline_xtensa_start_pass
0x1000311F6	0x0000001C	[ 30] _emit_inline_xtensa_end_pass
0x100031212	0x000000BB	[ 30] _emit_inline_xtensa_count_params
0x1000312CD	0x00000044	[ 30] _emit_inline_xtensa_label
0x100031311	0x000003A3	[ 30] _emit_inline_xtensa_op
0x1000316B4	0x000000A7	[ 30] _get_arg_reg
0x10003175B	0x00000077	[ 30] _get_arg_label
0x1000317D2	0x00000091	[ 30] _get_arg_i
0x100031864	0x0000008A	[ 31] _emit_native_xtensawin_new
0x1000318EE	0x0000004C	[ 31] _emit_native_xtensawin_free
0x10003193A	0x00000820	[ 31] _emit_native_start_pass
0x10003215A	0x00000498	[ 31] _emit_native_end_pass
0x1000325F2	0x00000060	[ 31] _emit_native_adjust_stack_size
0x100032652	0x00000006	[ 31] _emit_native_set_source_line
0x100032658	0x000000A3	[ 31] _emit_native_load_local
0x1000326FB	0x00000070	[ 31] _emit_native_load_global
0x10003276B	0x000000D5	[ 31] _emit_native_store_local
0x100032840	0x00000115	[ 31] _emit_native_store_global
0x100032955	0x0000003C	[ 31] _emit_native_delete_local
0x100032991	0x00000018	[ 31] _emit_native_delete_global
0x1000329A9	0x000000B4	[ 31] _emit_native_label_assign
0x100032A5D	0x00000156	[ 31] _emit_native_import
0x100032BB3	0x00000039	[ 31] _emit_native_load_const_tok
0x100032BEC	0x00000012	[ 31] _emit_native_load_const_small_int
0x100032BFE	0x0000003C	[ 31] _emit_native_load_const_str
0x100032C3A	0x00000037	[ 31] _emit_native_load_const_obj
0x100032C71	0x0000000E	[ 31] _emit_native_load_null
0x100032C7F	0x000000AE	[ 31] _emit_native_load_method
0x100032D2D	0x00000034	[ 31] _emit_native_load_build_class
0x100032D61	0x00000AFF	[ 31] _emit_native_subscr
0x100033860	0x000001C2	[ 31] _emit_native_attr
0x100033A22	0x00000063	[ 31] _emit_native_dup_top
0x100033A85	0x000000AA	[ 31] _emit_native_dup_top_two
0x100033B2F	0x00000011	[ 31] _emit_native_pop_top
0x100033B40	0x00000087	[ 31] _emit_native_rot_two
0x100033BC7	0x000000CA	[ 31] _emit_native_rot_three
0x100033C91	0x00000031	[ 31] _emit_native_jump
0x100033CC2	0x0000000F	[ 31] _emit_native_pop_jump_if
0x100033CD1	0x0000000C	[ 31] _emit_native_jump_if_or_pop
0x100033CDD	0x00000161	[ 31] _emit_native_unwind_jump
0x100033E3E	0x000001AA	[ 31] _emit_native_setup_block
0x100033FE8	0x000001F7	[ 31] _emit_native_with_cleanup
0x1000341DF	0x0000011C	[ 31] _emit_native_end_finally
0x1000342FB	0x000000BF	[ 31] _emit_native_get_iter
0x1000343BA	0x0000006B	[ 31] _emit_native_for_iter
0x100034425	0x00000011	[ 31] _emit_native_for_iter_end
0x100034436	0x0000006D	[ 31] _emit_native_pop_except_jump
0x1000344A3	0x000000AB	[ 31] _emit_native_unary_op
0x10003454E	0x000004FA	[ 31] _emit_native_binary_op
0x100034A48	0x000001BE	[ 31] _emit_native_build
0x100034C06	0x000000CE	[ 31] _emit_native_store_map
0x100034CD4	0x0000013E	[ 31] _emit_native_store_comp
0x100034E12	0x0000006F	[ 31] _emit_native_unpack_sequence
0x100034E81	0x00000085	[ 31] _emit_native_unpack_ex
0x100034F06	0x000000B0	[ 31] _emit_native_make_function
0x100034FB6	0x00000124	[ 31] _emit_native_make_closure
0x1000350DA	0x000001CD	[ 31] _emit_native_call_function
0x1000352A7	0x00000084	[ 31] _emit_native_call_method
0x10003532B	0x0000021C	[ 31] _emit_native_return_value
0x100035547	0x0000008D	[ 31] _emit_native_raise_varargs
0x1000355D4	0x0000029C	[ 31] _emit_native_yield
0x100035870	0x0000003E	[ 31] _emit_native_start_except_handler
0x1000358AE	0x00000011	[ 31] _emit_native_end_except_handler
0x1000358BF	0x00000045	[ 31] _emit_call_with_imm_arg
0x100035904	0x00000031	[ 31] _emit_native_mov_state_reg
0x100035935	0x000003D8	[ 31] _emit_native_global_exc_entry
0x100035D0D	0x0000005F	[ 31] _need_reg_all
0x100035D6C	0x0000002F	[ 31] _emit_native_mov_reg_state
0x100035D9B	0x0000003C	[ 31] _ensure_extra_stack
0x100035DD7	0x0000003B	[ 31] _adjust_stack
0x100035E12	0x000000AD	[ 31] _emit_native_load_fast
0x100035EBF	0x00000051	[ 31] _emit_post_push_reg
0x100035F10	0x0000007C	[ 31] _need_reg_single
0x100035F8C	0x00000077	[ 31] _emit_pre_pop_reg_flexible
0x100036003	0x000000B5	[ 31] _emit_access_stack
0x1000360B8	0x000000A9	[ 31] _load_reg_stack_imm
0x100036161	0x00000051	[ 31] _emit_post_push_imm
0x1000361B2	0x00000069	[ 31] _emit_call_with_qstr_arg
0x10003621B	0x0000010D	[ 31] _emit_native_store_fast
0x100036328	0x0000007D	[ 31] _need_stack_settled
0x1000363A5	0x0000008F	[ 31] _emit_native_leave_exc_stack
0x100036434	0x00000085	[ 31] _emit_load_reg_with_object
0x1000364B9	0x0000015E	[ 31] _emit_get_stack_pointer_to_reg_for_pop
0x100036617	0x0000007D	[ 31] _emit_get_stack_pointer_to_reg_for_push
0x100036694	0x00000057	[ 31] _emit_native_mov_reg_state_addr
0x1000366EB	0x00000183	[ 31] _emit_native_jump_helper
0x10003686E	0x000000A1	[ 31] _emit_native_push_exc_stack
0x10003690F	0x0000005B	[ 31] _emit_call_with_2_imm_args
0x10003696A	0x0000007B	[ 31] _emit_load_reg_with_child
0x1000369E5	0x0000006D	[ 31] _emit_fold_stack_top
0x100036A52	0x000005FA	[ 32] _mp_format_float
0x10003704C	0x000000A0	[ 33] _mp_parse_num_base
0x1000370EC	0x000001DD	[ 34] _mp_parse_num_integer
0x1000372C9	0x00000042	[ 34] _mp_obj_new_exception_arg1
0x10003730B	0x00000034	[ 34] _raise_exc
0x10003733F	0x000004FA	[ 34] _mp_parse_num_decimal
0x100037839	0x0000001A	[ 35] _mp_emit_glue_new_raw_code
0x100037853	0x0000002A	[ 35] _mp_emit_glue_assign_bytecode
0x10003787D	0x0000006A	[ 35] _mp_emit_glue_assign_native
0x1000378E7	0x00000221	[ 36] _mp_raw_code_save
0x100037B08	0x00000305	[ 36] _save_obj
0x100037E0D	0x00000216	[ 36] _save_raw_code
0x100038023	0x0000004F	[ 36] _mp_raw_code_save_file
0x100038072	0x0000000A	[ 36] _fd_print_strn
0x10003807C	0x0000007A	[ 37] _mp_init
0x1000380F6	0x00000006	[ 37] _mp_deinit
0x1000380FE	0x00000076	[ 37] _mp_raise_msg_varg
0x100038177	0x000001F9	[ 37] _mp_unary_op
0x100038370	0x00000590	[ 37] _mp_binary_op
0x100038900	0x00000013	[ 37] _mp_raise_ValueError
0x100038913	0x000000FF	[ 37] _mp_getiter
0x100038A12	0x00000134	[ 37] _mp_iternext
0x100038B46	0x00000023	[ 37] _mp_raise_msg
0x100038B69	0x00000058	[ 37] _mp_call_function_n_kw
0x100038BC1	0x00000021	[ 37] _mp_call_function_1
0x100038BE2	0x00000031	[ 37] _mp_call_method_n_kw
0x100038C16	0x000000AE	[ 37] _mp_convert_member_lookup
0x100038CC4	0x000000CA	[ 37] _mp_load_method_maybe
0x100038D8E	0x000000D2	[ 37] _mp_iternext_allow_raise
0x100038E60	0x00000035	[ 37] _m_malloc_fail
0x100038E95	0x00000013	[ 37] _mp_raise_TypeError
0x100038EA8	0x00000013	[ 37] _mp_raise_NotImplementedError
0x100038EBB	0x00000011	[ 37] _mp_raise_type_arg
0x100038ECC	0x00000034	[ 37] _mp_obj_new_exception_arg1
0x100038F00	0x00000026	[ 37] _mp_raise_StopIteration
0x100038F26	0x0000001A	[ 37] _mp_raise_OSError
0x100038F40	0x00000015	[ 37] _mp_raise_recursion_depth
0x100038F55	0x00000066	[ 37] _checked_fun_call
0x100038FBC	0x0000008C	[ 40] _mp_native_type_from_qstr
0x100039048	0x00000014	[ 43] _mp_stack_ctrl_init
0x10003905C	0x00000011	[ 43] _mp_stack_set_limit
0x10003906D	0x0000002A	[ 43] _mp_stack_check
0x100039097	0x0000007D	[ 44] _mp_arg_check_num_sig
0x100039114	0x0000013C	[ 44] _mp_arg_parse_all
0x100039250	0x00000054	[ 44] _mp_arg_parse_all_kw_array
0x1000392A4	0x00000010	[ 44] _mp_arg_error_unimpl_kw
0x1000392B4	0x0000003C	[ 46] _mp_map_init
0x1000392F0	0x00000019	[ 46] _mp_map_init_fixed_table
0x100039309	0x00000031	[ 46] _mp_map_deinit
0x10003933A	0x00000034	[ 46] _mp_map_clear
0x10003936E	0x0000023F	[ 46] _mp_map_lookup
0x1000395AD	0x000000C0	[ 46] _mp_map_rehash
0x10003966D	0x00000018	[ 47] _mp_obj_malloc_helper
0x100039685	0x00000021	[ 47] _mp_obj_get_type
0x1000396A6	0x00000029	[ 47] _mp_obj_get_type_str
0x1000396CF	0x0000008D	[ 47] _mp_obj_print_helper
0x10003975C	0x0000011A	[ 47] _mp_obj_print_exception
0x100039876	0x0000007E	[ 47] _mp_obj_is_true
0x1000398F4	0x0000006D	[ 47] _mp_obj_len_maybe
0x100039961	0x000001B7	[ 47] _mp_obj_equal_not_equal
0x100039B18	0x0000001D	[ 47] _mp_obj_equal
0x100039B35	0x0000004D	[ 47] _mp_obj_get_int
0x100039B82	0x00000027	[ 47] _mp_obj_get_int_truncated
0x100039BA9	0x00000055	[ 47] _mp_obj_get_int_maybe
0x100039BFE	0x0000009A	[ 47] _mp_obj_get_float_maybe
0x100039C98	0x00000042	[ 47] _mp_obj_get_float
0x100039CDA	0x0000007C	[ 47] _mp_obj_get_complex_maybe
0x100039D56	0x00000039	[ 47] _mp_obj_get_complex
0x100039D8F	0x00000048	[ 47] _mp_obj_get_array
0x100039DD7	0x000000B4	[ 47] _mp_get_index
0x100039E8B	0x00000097	[ 47] _mp_obj_subscr
0x100039F22	0x00000009	[ 47] _mp_identity_getiter
0x100039F2B	0x00000035	[ 47] _mp_get_buffer
0x100039F60	0x0000003C	[ 47] _mp_get_buffer_raise
0x100039F9C	0x00000014	[ 47] _mp_generic_unary_op
0x100039FB0	0x000000CE	[ 48] _array_append
0x10003A07E	0x000000D0	[ 48] _array_extend
0x10003A14E	0x000000DA	[ 48] _array_print
0x10003A228	0x0000017C	[ 48] _bytearray_make_new
0x10003A3A4	0x0000002E	[ 48] _array_unary_op
0x10003A3D2	0x00000263	[ 48] _array_binary_op
0x10003A635	0x000000F9	[ 48] _array_subscr
0x10003A72E	0x0000001E	[ 48] _array_iterator_new
0x10003A74C	0x0000003C	[ 48] _array_get_buffer
0x10003A788	0x0000003D	[ 48] _mp_obj_new_bytearray
0x10003A7C5	0x00000062	[ 48] _array_new
0x10003A827	0x00000033	[ 48] _mp_obj_new_bytearray_by_ref
0x10003A85A	0x00000032	[ 48] _array_it_iternext
0x10003A88C	0x00000020	[ 49] _bool_print
0x10003A8AC	0x00000041	[ 49] _bool_make_new
0x10003A8ED	0x00000023	[ 49] _bool_unary_op
0x10003A910	0x0000001A	[ 49] _bool_binary_op
0x10003A92A	0x000000E9	[ 50] _mp_call_method_self_n_kw
0x10003AA14	0x000000F5	[ 53] _complex_print
0x10003AB09	0x000001A1	[ 53] _complex_make_new
0x10003ACAA	0x000000DA	[ 53] _complex_unary_op
0x10003AD84	0x00000017	[ 53] _complex_binary_op
0x10003AD9B	0x00000041	[ 53] _complex_attr
0x10003ADDC	0x0000003D	[ 53] _mp_obj_new_complex
0x10003AE19	0x0000002F	[ 53] _mp_obj_complex_get
0x10003AE48	0x00000318	[ 53] _mp_obj_complex_binary_op
0x10003B160	0x000000B3	[ 54] _mp_obj_dict_make_new
0x10003B213	0x000001B7	[ 54] _dict_update
0x10003B3CA	0x00000033	[ 54] _mp_obj_dict_get
0x10003B3FD	0x00000096	[ 54] _mp_obj_dict_copy
0x10003B493	0x000000BA	[ 54] _dict_print
0x10003B54D	0x00000030	[ 54] _dict_unary_op
0x10003B57D	0x000000D2	[ 54] _dict_binary_op
0x10003B64F	0x00000092	[ 54] _dict_subscr
0x10003B6E1	0x00000026	[ 54] _dict_getiter
0x10003B707	0x00000018	[ 54] _mp_obj_dict_init
0x10003B71F	0x00000034	[ 54] _mp_obj_dict_store
0x10003B753	0x0000008D	[ 54] _dict_get_helper
0x10003B7E0	0x0000006B	[ 54] _dict_iter_next
0x10003B84B	0x00000055	[ 54] _dict_view_it_iternext
0x10003B8A0	0x00000021	[ 54] _dict_clear
0x10003B8C1	0x000000C9	[ 54] _dict_fromkeys
0x10003B98A	0x0000000C	[ 54] _dict_get
0x10003B996	0x0000002C	[ 54] _dict_items
0x10003B9C2	0x000000C1	[ 54] _dict_view_print
0x10003BA83	0x00000038	[ 54] _dict_view_binary_op
0x10003BABB	0x00000029	[ 54] _dict_view_getiter
0x10003BAE4	0x0000002C	[ 54] _dict_keys
0x10003BB10	0x0000000F	[ 54] _dict_pop
0x10003BB1F	0x0000007D	[ 54] _dict_popitem
0x10003BB9C	0x0000000F	[ 54] _dict_setdefault
0x10003BBAB	0x0000002C	[ 54] _dict_values
0x10003BBD7	0x000000B9	[ 56] _mp_obj_exception_print
0x10003BC90	0x000000AE	[ 56] _mp_obj_exception_make_new
0x10003BD3E	0x00000021	[ 56] _mp_obj_exception_get_value
0x10003BD5F	0x00000042	[ 56] _get_native_exception
0x10003BDA1	0x0000006D	[ 56] _mp_obj_exception_attr
0x10003BE0E	0x00000065	[ 56] _mp_obj_new_exception
0x10003BE73	0x000000C7	[ 56] _mp_obj_new_exception_msg
0x10003BF3A	0x0000009A	[ 56] _mp_obj_new_exception_msg_varg
0x10003BFD4	0x00000159	[ 56] _mp_obj_new_exception_msg_vlist
0x10003C12D	0x00000091	[ 56] _exc_add_strn
0x10003C1BE	0x00000034	[ 56] _mp_obj_is_exception_type
0x10003C1F2	0x00000012	[ 56] _mp_obj_is_exception_instance
0x10003C204	0x00000038	[ 56] _mp_obj_exception_match
0x10003C23C	0x000000C2	[ 56] _mp_obj_exception_add_traceback
0x10003C2FE	0x0000002D	[ 56] _mp_obj_exception_get_traceback
0x10003C32C	0x000000B2	[ 58] _float_print
0x10003C3DE	0x000000B6	[ 58] _float_make_new
0x10003C494	0x000000C8	[ 58] _float_unary_op
0x10003C55C	0x00000047	[ 58] _float_binary_op
0x10003C5A3	0x00000031	[ 58] _mp_obj_new_float
0x10003C5D4	0x00000022	[ 58] _mp_obj_float_get
0x10003C5F6	0x0000039E	[ 58] _mp_obj_float_binary_op
0x10003C994	0x000000C0	[ 58] _mp_obj_float_divmod
0x10003CA55	0x00000041	[ 59] _fun_builtin_1_call
0x10003CA96	0x00000044	[ 59] _fun_builtin_2_call
0x10003CADA	0x00000048	[ 59] _fun_builtin_3_call
0x10003CB22	0x0000008F	[ 59] _fun_builtin_var_call
0x10003CBB1	0x0000002A	[ 61] _mp_obj_new_getitem_iter
0x10003CBDB	0x00000070	[ 61] _it_iternext
0x10003CC4B	0x000000AD	[ 62] _mp_obj_new_int_from_float
0x10003CCF8	0x0000008C	[ 62] _mp_obj_int_print
0x10003CD84	0x000001D7	[ 62] _mp_obj_int_formatted
0x10003CF5B	0x00000070	[ 62] _mp_int_format_size
0x10003CFCB	0x0000006F	[ 62] _mp_obj_int_binary_op_extra_cases
0x10003D03A	0x000000FD	[ 62] _mp_obj_int_make_new
0x10003D137	0x000000A4	[ 62] _int_from_bytes
0x10003D1DB	0x000000BC	[ 62] _int_to_bytes
0x10003D298	0x0000002D	[ 63] _mp_obj_int_new_mpz
0x10003D2C5	0x000000B8	[ 63] _mp_obj_int_formatted_impl
0x10003D37D	0x0000005A	[ 63] _mp_obj_int_from_bytes_impl
0x10003D3D7	0x00000029	[ 63] _mp_obj_int_to_bytes_impl
0x10003D400	0x0000003A	[ 63] _mp_obj_int_sign
0x10003D43A	0x0000012A	[ 63] _mp_obj_int_unary_op
0x10003D564	0x00000454	[ 63] _mp_obj_int_binary_op
0x10003D9B8	0x00000044	[ 63] _mp_obj_int_get_checked
0x10003D9FC	0x0000001C	[ 63] _mp_obj_new_int
0x10003DA18	0x0000004B	[ 63] _mp_obj_new_int_from_ll
0x10003DA63	0x00000048	[ 63] _mp_obj_new_int_from_ull
0x10003DAAB	0x0000001C	[ 63] _mp_obj_new_int_from_uint
0x10003DAC7	0x00000066	[ 63] _mp_obj_new_int_from_str_len
0x10003DB2D	0x0000001C	[ 63] _mp_obj_int_get_truncated
0x10003DB4A	0x00000025	[ 63] _mp_obj_int_as_float_impl
0x10003DB6F	0x0000006F	[ 64] _mp_obj_list_append
0x10003DBDE	0x0000006E	[ 64] _mp_obj_list_sort
0x10003DC4C	0x0000016D	[ 64] _mp_quicksort
0x10003DDB9	0x00000069	[ 64] _mp_obj_list_remove
0x10003DE22	0x0000001B	[ 64] _list_index
0x10003DE3D	0x000000B8	[ 64] _list_pop
0x10003DEF5	0x00000075	[ 64] _list_print
0x10003DF6A	0x00000055	[ 64] _list_make_new
0x10003DFBF	0x0000002E	[ 64] _list_unary_op
0x10003DFED	0x00000180	[ 64] _list_binary_op
0x10003E16D	0x000002C9	[ 64] _list_subscr
0x10003E436	0x0000002A	[ 64] _list_getiter
0x10003E460	0x00000052	[ 64] _mp_obj_list_init
0x10003E4B2	0x00000056	[ 64] _mp_obj_new_list
0x10003E508	0x00000014	[ 64] _mp_obj_list_get
0x10003E51C	0x0000003C	[ 64] _list_extend_from_iter
0x10003E558	0x000000A2	[ 64] _list_extend
0x10003E5FA	0x00000027	[ 64] _list_it_iternext
0x10003E621	0x00000041	[ 64] _list_clear
0x10003E662	0x00000015	[ 64] _list_copy
0x10003E677	0x00000015	[ 64] _list_count
0x10003E68C	0x0000006E	[ 64] _list_insert
0x10003E6FA	0x0000004A	[ 64] _list_reverse
0x10003E744	0x00000029	[ 67] _object_make_new
0x10003E76D	0x0000000B	[ 67] _object___init__
0x10003E778	0x00000042	[ 67] _object___new__
0x10003E7BA	0x00000008	[ 68] _polymorph_it_iternext
0x10003E7C2	0x00000082	[ 69] _property_make_new
0x10003E844	0x0000000A	[ 69] _mp_obj_property_get
0x10003E84E	0x0000002E	[ 69] _property_getter
0x10003E87C	0x0000002E	[ 69] _property_setter
0x10003E8AA	0x0000002E	[ 69] _property_deleter
0x10003E8D8	0x00000011	[ 70] _none_print
0x10003E8E9	0x00000017	[ 74] _singleton_print
0x10003E900	0x00000085	[ 75] _slice_print
0x10003E985	0x00000133	[ 75] _mp_obj_slice_indices
0x10003EAB8	0x00000147	[ 76] _mp_str_print_quoted
0x10003EBFF	0x00000174	[ 76] _mp_obj_str_make_new
0x10003ED73	0x000000CA	[ 76] _mp_obj_new_str_type_from_vstr
0x10003EE3D	0x0000006A	[ 76] _mp_obj_new_str_copy
0x10003EEA7	0x00000057	[ 76] _mp_obj_new_str
0x10003EEFE	0x0000008E	[ 76] _find_subbytes
0x10003EF8C	0x00000A28	[ 76] _mp_obj_str_binary_op
0x10003F9B4	0x00000036	[ 76] _bad_implicit_conversion
0x10003F9EA	0x000001D1	[ 76] _str_join
0x10003FBBB	0x0000029C	[ 76] _mp_obj_str_split
0x10003FE57	0x00000038	[ 76] _mp_obj_new_str_of_type
0x10003FE8F	0x00000043	[ 76] _str_check_arg_type
0x10003FED2	0x0000005F	[ 76] _mp_obj_str_get_data
0x10003FF31	0x000001E9	[ 76] _str_rsplit
0x10004011A	0x00000011	[ 76] _str_find
0x10004012B	0x00000011	[ 76] _str_rfind
0x10004013C	0x00000014	[ 76] _str_index
0x100040150	0x00000014	[ 76] _str_rindex
0x100040164	0x000000C3	[ 76] _str_startswith
0x100040227	0x0000009A	[ 76] _str_endswith
0x1000402C1	0x00000015	[ 76] _str_strip
0x1000402D6	0x00000012	[ 76] _str_lstrip
0x1000402E8	0x00000015	[ 76] _str_rstrip
0x1000402FD	0x0000008D	[ 76] _mp_obj_str_format
0x10004038A	0x00000AEA	[ 76] _mp_obj_str_format_helper
0x100040E74	0x00000297	[ 76] _str_replace
0x10004110B	0x0000015B	[ 76] _str_count
0x100041266	0x00000014	[ 76] _str_lower
0x10004127A	0x00000014	[ 76] _str_upper
0x10004128E	0x00000070	[ 76] _str_isspace
0x1000412FE	0x00000070	[ 76] _str_isalpha
0x10004136E	0x00000070	[ 76] _str_isdigit
0x1000413DE	0x00000095	[ 76] _str_isupper
0x100041473	0x00000095	[ 76] _str_islower
0x100041508	0x00000064	[ 76] _bytes_decode
0x10004156C	0x0000005F	[ 76] _str_encode
0x1000415CB	0x0000005C	[ 76] _mp_obj_str_get_buffer
0x100041627	0x00000083	[ 76] _str_print
0x1000416AA	0x00000241	[ 76] _bytes_make_new
0x1000418EB	0x000000D0	[ 76] _bytes_subscr
0x1000419BB	0x0000002A	[ 76] _mp_obj_new_bytes_iterator
0x1000419E5	0x00000017	[ 76] _mp_obj_new_bytes
0x1000419FC	0x00000013	[ 76] _mp_obj_new_str_via_qstr
0x100041A10	0x00000014	[ 76] _mp_obj_new_str_from_utf8_vstr
0x100041A24	0x00000014	[ 76] _mp_obj_new_bytes_from_vstr
0x100041A38	0x000000F7	[ 76] _mp_obj_str_equal
0x100041B2F	0x0000003C	[ 76] _mp_obj_str_get_qstr
0x100041B6D	0x00000164	[ 76] _str_finder
0x100041CD1	0x000001EF	[ 76] _str_uni_strip
0x100041EC0	0x00000099	[ 76] _str_caseconv
0x100041F59	0x00000064	[ 76] _bytes_it_iternext
0x100041FBD	0x0000010A	[ 77] _str_index_to_ptr
0x1000420C7	0x000001AE	[ 77] _uni_print
0x100042275	0x0000006A	[ 77] _uni_unary_op
0x1000422DF	0x00000167	[ 77] _str_subscr
0x100042446	0x0000002A	[ 77] _mp_obj_new_str_iterator
0x100042470	0x0000007E	[ 77] _str_it_iternext
0x1000424EE	0x00000089	[ 78] _mp_obj_tuple_print
0x100042577	0x00000089	[ 78] _mp_obj_tuple_unary_op
0x100042600	0x000001BF	[ 78] _mp_obj_tuple_binary_op
0x1000427BF	0x00000050	[ 78] _mp_obj_new_tuple
0x10004280F	0x000000CB	[ 78] _mp_obj_tuple_subscr
0x1000428DA	0x000000E6	[ 78] _mp_obj_tuple_make_new
0x1000429C0	0x0000002A	[ 78] _mp_obj_tuple_getiter
0x1000429EA	0x00000043	[ 78] _mp_obj_tuple_get
0x100042A2D	0x00000024	[ 78] _tuple_it_iternext
0x100042A51	0x00000015	[ 78] _tuple_count
0x100042A66	0x0000001B	[ 78] _tuple_index
0x100042A81	0x00000054	[ 79] _mp_obj_new_instance
0x100042AD5	0x000000B0	[ 79] _instance_count_native_bases
0x100042B85	0x00000245	[ 79] _mp_obj_instance_make_new
0x100042DCA	0x000001F2	[ 79] _mp_obj_class_lookup
0x100042FBC	0x000000D2	[ 79] _mp_obj_instance_call
0x10004308E	0x000000BE	[ 79] _mp_obj_instance_getiter
0x10004314C	0x00000017	[ 79] _type_print
0x100043163	0x0000005D	[ 79] _type_make_new
0x1000431C0	0x00000029	[ 79] _type_call
0x1000431E9	0x000001C9	[ 79] _type_attr
0x1000433B2	0x00000293	[ 79] _mp_obj_new_type
0x100043645	0x0000013C	[ 79] _instance_print
0x100043781	0x00000102	[ 79] _instance_unary_op
0x100043883	0x000000FC	[ 79] _instance_binary_op
0x10004397F	0x0000028B	[ 79] _mp_obj_instance_attr
0x100043C0A	0x000000F3	[ 79] _instance_subscr
0x100043CFD	0x00000098	[ 79] _instance_get_buffer
0x100043D95	0x00000053	[ 79] _static_class_method_make_new
0x100043DE8	0x00000089	[ 79] _mp_obj_is_subclass_fast
0x100043E71	0x00000036	[ 79] _mp_obj_cast_to_native_base
0x100043EA7	0x00000056	[ 79] _native_base_init_wrapper
0x100043EFD	0x00000027	[ 81] _op_getitem
0x100043F24	0x00000031	[ 81] _op_setitem
0x100043F55	0x00000024	[ 81] _op_delitem
0x100043F79	0x0000003F	[ 82] _mp_seq_multiply
0x100043FB8	0x00000056	[ 82] _mp_seq_get_fast_slice_indexes
0x10004400E	0x00000069	[ 82] _mp_seq_extract_slice
0x100044077	0x00000091	[ 82] _mp_seq_cmp_bytes
0x100044108	0x000000E4	[ 82] _mp_seq_cmp_objs
0x1000441EC	0x000000B3	[ 82] _mp_seq_index_obj
0x10004429F	0x0000005B	[ 82] _mp_seq_count_obj
0x1000442FC	0x0000020C	[ 84] _mp_binary_get_size
0x100044508	0x00000128	[ 84] _mp_binary_get_val_array
0x100044631	0x0000003D	[ 84] _mp_binary_set_int
0x100044671	0x000000B8	[ 84] _mp_binary_set_val_array
0x100044729	0x000000DB	[ 84] _mp_binary_set_val_array_from_int
0x100044804	0x00000020	[ 87] _mp_builtin_next
0x100044824	0x0000008E	[ 91] _mp_encode_uint
0x1000448B2	0x00000080	[ 92] _mp_small_int_mul_overflow
0x100044932	0x00000028	[ 92] _mp_small_int_modulo
0x10004495A	0x0000002E	[ 92] _mp_small_int_floor_divide
0x100044988	0x000006D8	[ 93] _main_
0x100045060	0x00000037	[ 93] _usage
0x100045097	0x0000001F	[ 93] _main
0x1000450B6	0x00000029	[ 93] _nlr_jump_fail
0x1000450DF	0x0000000F	[ 93] _stderr_print_strn
0x1000450EE	0x00000014	[ 94] _gc_collect
0x100045102	0x00000074	[ 95] _gc_helper_collect_regs_and_stack
0x100045180	0x00000030	[  5] _gc_free.cold.1
0x1000451B0	0x00000030	[  5] _gc_free.cold.2
0x1000451E0	0x00000030	[  5] _gc_realloc.cold.1
0x100045210	0x00000030	[  5] _gc_realloc.cold.2
0x100045240	0x00000023	[  5] _gc_realloc.cold.3
0x100045263	0x00000023	[  6] _find_qstr.cold.1
0x100045286	0x00000023	[  7] _vstr_add_char.cold.1
0x1000452AB	0x00000023	[  8] _mp_print_mp_int.cold.1
0x1000452CE	0x00000023	[  8] _mp_vprintf.cold.1
0x1000452F1	0x00000023	[ 10] _mpz_need_dig.cold.1
0x100045314	0x00000023	[ 10] _mpz_set_from_str.cold.1
0x100045337	0x00000023	[ 10] _mpz_or_inpl.cold.1
0x10004535A	0x00000023	[ 10] _mpz_clone.cold.1
0x10004537D	0x00000023	[ 10] _mpz_divmod_inpl.cold.1
0x1000453A0	0x00000023	[ 10] _mpz_as_str_inpl.cold.1
0x1000453C3	0x00000023	[ 10] _mpz_as_str_inpl.cold.2
0x1000453E8	0x00000023	[ 13] _mp_parse.cold.1
0x10004540B	0x00000023	[ 13] _mp_parse.cold.2
0x10004542E	0x00000023	[ 13] _mp_parse.cold.3
0x100045451	0x00000023	[ 13] _mp_parse.cold.4
0x100045474	0x00000023	[ 13] _mp_parse.cold.5
0x100045497	0x00000023	[ 13] _mp_parse.cold.6
0x1000454BA	0x00000023	[ 13] _mp_parse.cold.7
0x1000454DD	0x00000023	[ 13] _mp_parse.cold.8
0x100045500	0x00000023	[ 13] _mp_parse.cold.9
0x100045523	0x00000023	[ 13] _mp_parse.cold.10
0x100045546	0x00000023	[ 13] _mp_parse.cold.11
0x100045569	0x00000023	[ 13] _push_rule_from_arg.cold.1
0x10004558C	0x00000023	[ 13] _pop_result.cold.1
0x1000455AF	0x00000023	[ 13] _push_result_rule.cold.1
0x1000455D2	0x00000023	[ 13] _push_result_rule.cold.2
0x1000455F5	0x00000023	[ 13] _push_result_rule.cold.3
0x100045618	0x00000023	[ 13] _push_result_rule.cold.4
0x10004563B	0x00000023	[ 13] _push_result_rule.cold.5
0x10004565E	0x00000023	[ 13] _push_result_rule.cold.6
0x100045681	0x00000023	[ 13] _push_result_rule.cold.7
0x1000456A4	0x00000023	[ 13] _push_result_rule.cold.8
0x1000456C7	0x00000023	[ 13] _push_result_rule.cold.9
0x1000456EA	0x00000023	[ 13] _push_result_rule.cold.10
0x10004570D	0x00000023	[ 13] _push_result_rule.cold.11
0x100045730	0x00000023	[ 13] _push_result_rule.cold.12
0x100045753	0x00000023	[ 13] _push_result_rule.cold.13
0x100045776	0x00000023	[ 13] _push_result_rule.cold.14
0x100045799	0x00000023	[ 13] _push_result_rule.cold.15
0x1000457BC	0x00000023	[ 13] _push_result_rule.cold.16
0x1000457DF	0x00000023	[ 13] _push_result_rule.cold.17
0x100045802	0x00000023	[ 13] _push_result_rule.cold.18
0x100045825	0x00000023	[ 13] _push_result_rule.cold.19
0x100045848	0x00000023	[ 13] _push_result_rule.cold.20
0x10004586B	0x00000023	[ 13] _push_result_rule.cold.21
0x10004588E	0x00000023	[ 13] _push_result_rule.cold.22
0x1000458B1	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.1
0x1000458D4	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.2
0x1000458F7	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.3
0x10004591A	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.4
0x10004593D	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.5
0x100045960	0x00000023	[ 13] _peek_rule.cold.1
0x100045983	0x00000023	[ 13] _build_tuple_from_stack.cold.1
0x1000459A6	0x00000021	[ 14] _scope_new.cold.1
0x1000459C7	0x00000023	[ 14] _scope_check_to_close_over.cold.1
0x1000459EA	0x00000021	[ 14] _scope_check_to_close_over.cold.2
0x100045A0B	0x00000023	[ 15] _mp_compile_to_raw_code.cold.1
0x100045A2E	0x00000023	[ 15] _compile_scope_inline_asm.cold.1
0x100045A51	0x00000023	[ 15] _compile_scope_inline_asm.cold.2
0x100045A74	0x00000023	[ 15] _compile_scope_inline_asm.cold.3
0x100045A97	0x00000023	[ 15] _compile_scope_inline_asm.cold.4
0x100045ABA	0x00000023	[ 15] _compile_scope.cold.1
0x100045ADD	0x00000023	[ 15] _compile_scope.cold.2
0x100045B00	0x00000023	[ 15] _compile_scope.cold.3
0x100045B23	0x00000023	[ 15] _compile_scope.cold.4
0x100045B46	0x00000023	[ 15] _compile_scope.cold.5
0x100045B69	0x00000023	[ 15] _compile_scope.cold.6
0x100045B8C	0x00000023	[ 15] _compile_scope.cold.7
0x100045BAF	0x00000023	[ 15] _compile_scope.cold.8
0x100045BD2	0x00000023	[ 15] _compile_scope.cold.9
0x100045BF5	0x00000023	[ 15] _compile_scope.cold.10
0x100045C18	0x00000023	[ 15] _compile_scope.cold.11
0x100045C3B	0x00000023	[ 15] _compile_scope.cold.12
0x100045C5E	0x00000023	[ 15] _compile_scope.cold.13
0x100045C81	0x00000023	[ 15] _compile_node.cold.1
0x100045CA4	0x00000023	[ 15] _compile_scope_comp_iter.cold.1
0x100045CC7	0x00000023	[ 15] _compile_decorated.cold.1
0x100045CEA	0x00000023	[ 15] _compile_decorated.cold.2
0x100045D0D	0x00000023	[ 15] _compile_decorated.cold.3
0x100045D30	0x00000023	[ 15] _compile_decorated.cold.4
0x100045D53	0x00000023	[ 15] _compile_expr_stmt.cold.1
0x100045D76	0x00000023	[ 15] _compile_break_cont_stmt.cold.1
0x100045D99	0x00000023	[ 15] _compile_import_from.cold.1
0x100045DBC	0x00000023	[ 15] _compile_import_from.cold.2
0x100045DDF	0x00000023	[ 15] _compile_import_from.cold.3
0x100045E02	0x00000023	[ 15] _compile_async_stmt.cold.1
0x100045E25	0x00000023	[ 15] _compile_async_stmt.cold.2
0x100045E48	0x00000023	[ 15] _compile_async_stmt.cold.3
0x100045E6B	0x00000023	[ 15] _compile_if_stmt.cold.1
0x100045E8E	0x00000023	[ 15] _compile_for_stmt.cold.1
0x100045EB1	0x00000023	[ 15] _compile_try_stmt.cold.1
0x100045ED4	0x00000023	[ 15] _compile_with_stmt.cold.1
0x100045EF7	0x00000023	[ 15] _compile_test_if_expr.cold.1
0x100045F1A	0x00000023	[ 15] _compile_comparison.cold.1
0x100045F3D	0x00000023	[ 15] _compile_comparison.cold.2
0x100045F60	0x00000023	[ 15] _compile_factor_2.cold.1
0x100045F83	0x00000023	[ 15] _compile_atom_paren.cold.1
0x100045FA6	0x00000023	[ 15] _compile_atom_brace.cold.1
0x100045FC9	0x00000023	[ 15] _compile_atom_brace.cold.2
0x100045FEC	0x00000023	[ 15] _compile_subscript.cold.1
0x10004600F	0x00000023	[ 15] _compile_subscript.cold.2
0x100046032	0x00000023	[ 15] _compile_subscript.cold.3
0x100046055	0x00000023	[ 15] _compile_subscript.cold.4
0x100046078	0x00000023	[ 15] _compile_funcdef_lambdef_param.cold.1
0x10004609B	0x00000023	[ 15] _compile_funcdef_lambdef_param.cold.2
0x1000460BE	0x00000023	[ 15] _close_over_variables_etc.cold.1
0x1000460E1	0x00000023	[ 15] _close_over_variables_etc.cold.2
0x100046104	0x00000023	[ 15] _compile_comprehension.cold.1
0x100046127	0x00000023	[ 15] _compile_comprehension.cold.2
0x10004614A	0x00000023	[ 15] _c_assign.cold.1
0x10004616D	0x00000023	[ 15] _c_assign.cold.2
0x100046190	0x00000023	[ 15] _c_assign.cold.3
0x1000461B3	0x00000023	[ 15] _c_assign.cold.4
0x1000461D6	0x00000023	[ 15] _c_del_stmt.cold.1
0x1000461F9	0x00000023	[ 15] _c_del_stmt.cold.2
0x10004621C	0x00000023	[ 15] _c_del_stmt.cold.3
0x10004623F	0x00000023	[ 15] _c_if_cond.cold.1
0x100046262	0x00000023	[ 15] _do_import_name.cold.1
0x100046285	0x00000023	[ 15] _compile_decrease_except_level.cold.1
0x1000462A8	0x00000023	[ 15] _compile_try_finally.cold.1
0x1000462CB	0x00000023	[ 15] _compile_try_except.cold.1
0x1000462EE	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.1
0x100046311	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.2
0x100046334	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.3
0x100046358	0x00000021	[ 16] _mp_emit_common_id_op.cold.1
0x100046379	0x00000021	[ 16] _mp_emit_common_id_op.cold.2
0x10004639A	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.1
0x1000463BD	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.2
0x1000463E0	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.3
0x100046403	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.4
0x100046426	0x00000023	[ 17] _mp_emit_bc_adjust_stack_size.cold.1
0x100046449	0x00000021	[ 17] _mp_emit_bc_set_source_line.cold.1
0x10004646A	0x00000023	[ 17] _mp_emit_bc_label_assign.cold.1
0x10004648D	0x00000023	[ 17] _mp_emit_bc_label_assign.cold.2
0x1000464B0	0x00000023	[ 17] _mp_emit_bc_load_const_small_int.cold.1
0x1000464D3	0x00000023	[ 17] _emit_write_bytecode_byte_label.cold.1
0x1000464F6	0x00000023	[ 17] _emit_write_bytecode_byte_label.cold.2
0x100046519	0x00000023	[ 17] _mp_emit_bc_make_closure.cold.1
0x10004653C	0x00000023	[ 17] _mp_emit_bc_raise_varargs.cold.1
0x10004655F	0x00000021	[ 17] _emit_get_cur_to_write_code_info.cold.1
0x100046580	0x00000023	[ 17] _emit_get_cur_to_write_bytecode.cold.1
0x1000465A3	0x00000021	[ 18] _mp_asm_base_start_pass.cold.1
0x1000465C4	0x00000021	[ 18] _mp_asm_base_get_cur_to_write_bytes.cold.1
0x1000465E5	0x00000021	[ 18] _mp_asm_base_label_assign.cold.1
0x100046606	0x00000021	[ 18] _mp_asm_base_label_assign.cold.2
0x100046627	0x00000021	[ 18] _mp_asm_base_label_assign.cold.3
0x100046648	0x00000023	[ 19] _asm_x64_test_r8_with_r8.cold.1
0x10004666B	0x00000023	[ 19] _asm_x64_test_r8_with_r8.cold.2
0x10004668E	0x00000023	[ 19] _asm_x64_setcc_r8.cold.1
0x1000466B1	0x00000023	[ 19] _asm_x64_jmp_reg.cold.1
0x1000466D4	0x00000023	[ 19] _asm_x64_jmp_label.cold.1
0x1000466F7	0x00000023	[ 19] _asm_x64_jcc_label.cold.1
0x10004671A	0x00000023	[ 19] _asm_x64_entry.cold.1
0x10004673D	0x00000023	[ 19] _asm_x64_mov_reg_pcrel.cold.1
0x100046760	0x00000023	[ 19] _asm_x64_call_ind.cold.1
0x100046783	0x00000023	[ 20] _emit_native_start_pass.cold.1
0x1000467A6	0x00000023	[ 20] _emit_native_end_pass.cold.1
0x1000467C9	0x00000023	[ 20] _emit_native_end_pass.cold.2
0x1000467EC	0x00000023	[ 20] _emit_native_end_pass.cold.3
0x10004680F	0x00000023	[ 20] _emit_native_end_pass.cold.4
0x100046832	0x00000023	[ 20] _emit_native_store_global.cold.1
0x100046855	0x00000023	[ 20] _emit_native_import.cold.1
0x100046878	0x00000023	[ 20] _emit_native_import.cold.2
0x10004689B	0x00000023	[ 20] _emit_native_import.cold.3
0x1000468BE	0x00000023	[ 20] _emit_native_import.cold.4
0x1000468E1	0x00000023	[ 20] _emit_native_load_method.cold.1
0x100046904	0x00000023	[ 20] _emit_native_subscr.cold.1
0x100046927	0x00000023	[ 20] _emit_native_subscr.cold.2
0x10004694A	0x00000023	[ 20] _emit_native_attr.cold.1
0x10004696D	0x00000023	[ 20] _emit_native_attr.cold.2
0x100046990	0x00000023	[ 20] _emit_native_attr.cold.3
0x1000469B3	0x00000023	[ 20] _emit_native_setup_block.cold.1
0x1000469D6	0x00000023	[ 20] _emit_native_end_finally.cold.1
0x1000469F9	0x00000023	[ 20] _emit_native_end_finally.cold.2
0x100046A1C	0x00000023	[ 20] _emit_native_get_iter.cold.1
0x100046A3F	0x00000023	[ 20] _emit_native_build.cold.1
0x100046A62	0x00000023	[ 20] _emit_native_build.cold.2
0x100046A85	0x00000023	[ 20] _emit_native_build.cold.3
0x100046AA8	0x00000023	[ 20] _emit_native_build.cold.4
0x100046ACB	0x00000023	[ 20] _emit_native_build.cold.5
0x100046AEE	0x00000023	[ 20] _emit_native_build.cold.6
0x100046B11	0x00000023	[ 20] _emit_native_store_map.cold.1
0x100046B34	0x00000023	[ 20] _emit_native_store_map.cold.2
0x100046B57	0x00000023	[ 20] _emit_native_store_map.cold.3
0x100046B7A	0x00000023	[ 20] _emit_native_store_comp.cold.1
0x100046B9D	0x00000023	[ 20] _emit_native_store_comp.cold.2
0x100046BC0	0x00000023	[ 20] _emit_native_store_comp.cold.3
0x100046BE3	0x00000023	[ 20] _emit_native_store_comp.cold.4
0x100046C06	0x00000023	[ 20] _emit_native_store_comp.cold.5
0x100046C29	0x00000023	[ 20] _emit_native_unpack_sequence.cold.1
0x100046C4C	0x00000023	[ 20] _emit_native_unpack_ex.cold.1
0x100046C6F	0x00000023	[ 20] _emit_native_call_function.cold.1
0x100046C92	0x00000023	[ 20] _emit_native_call_function.cold.2
0x100046CB5	0x00000023	[ 20] _emit_native_call_function.cold.3
0x100046CD8	0x00000023	[ 20] _emit_native_return_value.cold.1
0x100046CFB	0x00000023	[ 20] _emit_native_raise_varargs.cold.1
0x100046D1E	0x00000023	[ 20] _adjust_stack.cold.1
0x100046D41	0x00000023	[ 20] _adjust_stack.cold.2
0x100046D64	0x00000023	[ 20] _emit_native_leave_exc_stack.cold.1
0x100046D87	0x00000023	[ 20] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100046DAA	0x00000023	[ 21] _asm_x86_jmp_label.cold.1
0x100046DCD	0x00000023	[ 21] _asm_x86_jcc_label.cold.1
0x100046DF0	0x00000023	[ 21] _asm_x86_entry.cold.1
0x100046E13	0x00000023	[ 21] _asm_x86_mov_reg_pcrel.cold.1
0x100046E36	0x00000023	[ 21] _asm_x86_call_ind.cold.1
0x100046E59	0x00000023	[ 22] _emit_native_start_pass.cold.1
0x100046E7C	0x00000023	[ 22] _emit_native_end_pass.cold.1
0x100046E9F	0x00000023	[ 22] _emit_native_end_pass.cold.2
0x100046EC2	0x00000023	[ 22] _emit_native_end_pass.cold.3
0x100046EE5	0x00000023	[ 22] _emit_native_end_pass.cold.4
0x100046F08	0x00000023	[ 22] _emit_native_store_global.cold.1
0x100046F2B	0x00000023	[ 22] _emit_native_import.cold.1
0x100046F4E	0x00000023	[ 22] _emit_native_import.cold.2
0x100046F71	0x00000023	[ 22] _emit_native_import.cold.3
0x100046F94	0x00000023	[ 22] _emit_native_import.cold.4
0x100046FB7	0x00000023	[ 22] _emit_native_load_method.cold.1
0x100046FDA	0x00000023	[ 22] _emit_native_subscr.cold.1
0x100046FFD	0x00000023	[ 22] _emit_native_subscr.cold.2
0x100047020	0x00000023	[ 22] _emit_native_attr.cold.1
0x100047043	0x00000023	[ 22] _emit_native_attr.cold.2
0x100047066	0x00000023	[ 22] _emit_native_attr.cold.3
0x100047089	0x00000023	[ 22] _emit_native_setup_block.cold.1
0x1000470AC	0x00000023	[ 22] _emit_native_end_finally.cold.1
0x1000470CF	0x00000023	[ 22] _emit_native_end_finally.cold.2
0x1000470F2	0x00000023	[ 22] _emit_native_get_iter.cold.1
0x100047115	0x00000023	[ 22] _emit_native_build.cold.1
0x100047138	0x00000023	[ 22] _emit_native_build.cold.2
0x10004715B	0x00000023	[ 22] _emit_native_build.cold.3
0x10004717E	0x00000023	[ 22] _emit_native_build.cold.4
0x1000471A1	0x00000023	[ 22] _emit_native_build.cold.5
0x1000471C4	0x00000023	[ 22] _emit_native_build.cold.6
0x1000471E7	0x00000023	[ 22] _emit_native_store_map.cold.1
0x10004720A	0x00000023	[ 22] _emit_native_store_map.cold.2
0x10004722D	0x00000023	[ 22] _emit_native_store_map.cold.3
0x100047250	0x00000023	[ 22] _emit_native_store_comp.cold.1
0x100047273	0x00000023	[ 22] _emit_native_store_comp.cold.2
0x100047296	0x00000023	[ 22] _emit_native_store_comp.cold.3
0x1000472B9	0x00000023	[ 22] _emit_native_store_comp.cold.4
0x1000472DC	0x00000023	[ 22] _emit_native_store_comp.cold.5
0x1000472FF	0x00000023	[ 22] _emit_native_unpack_sequence.cold.1
0x100047322	0x00000023	[ 22] _emit_native_unpack_ex.cold.1
0x100047345	0x00000023	[ 22] _emit_native_call_function.cold.1
0x100047368	0x00000023	[ 22] _emit_native_call_function.cold.2
0x10004738B	0x00000023	[ 22] _emit_native_call_function.cold.3
0x1000473AE	0x00000023	[ 22] _emit_native_return_value.cold.1
0x1000473D1	0x00000023	[ 22] _emit_native_raise_varargs.cold.1
0x1000473F4	0x00000023	[ 22] _adjust_stack.cold.1
0x100047417	0x00000023	[ 22] _adjust_stack.cold.2
0x10004743A	0x00000023	[ 22] _emit_native_leave_exc_stack.cold.1
0x10004745D	0x00000023	[ 22] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100047480	0x00000021	[ 23] _asm_thumb_entry.cold.1
0x1000474A1	0x00000023	[ 23] _asm_thumb_format_4.cold.1
0x1000474C4	0x00000023	[ 23] _asm_thumb_format_4.cold.2
0x1000474E7	0x00000023	[ 23] _asm_thumb_mov_reg_i16.cold.1
0x10004750A	0x00000023	[ 23] _asm_thumb_b_n_label.cold.1
0x10004752D	0x00000023	[ 23] _asm_thumb_bcc_nw_label.cold.1
0x100047550	0x00000023	[ 23] _asm_thumb_bl_label.cold.1
0x100047573	0x00000023	[ 23] _asm_thumb_mov_reg_i32.cold.1
0x100047596	0x00000023	[ 23] _asm_thumb_mov_reg_i32.cold.2
0x1000475B9	0x00000023	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.1
0x1000475DC	0x00000023	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.2
0x1000475FF	0x00000023	[ 23] _asm_thumb_mov_rlo_i16.cold.1
0x100047622	0x00000023	[ 23] _asm_thumb_mov_local_reg.cold.1
0x100047645	0x00000023	[ 23] _asm_thumb_mov_local_check.cold.1
0x100047668	0x00000023	[ 23] _asm_thumb_mov_reg_local.cold.1
0x10004768B	0x00000023	[ 23] _asm_thumb_mov_reg_local_addr.cold.1
0x1000476AE	0x00000023	[ 23] _asm_thumb_mov_reg_local_addr.cold.2
0x1000476D1	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.1
0x1000476F4	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.2
0x100047717	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.3
0x10004773A	0x00000023	[ 23] _asm_thumb_add_reg_reg_offset.cold.1
0x10004775D	0x00000023	[ 23] _asm_thumb_b_label.cold.1
0x100047780	0x00000023	[ 23] _asm_thumb_bcc_label.cold.1
0x1000477A3	0x00000023	[ 23] _asm_thumb_bcc_rel9.cold.1
0x1000477C6	0x00000023	[ 23] _asm_thumb_b_rel12.cold.1
0x1000477EC	0x00000023	[ 24] _emit_native_start_pass.cold.1
0x10004780F	0x00000023	[ 24] _emit_native_end_pass.cold.1
0x100047832	0x00000023	[ 24] _emit_native_end_pass.cold.2
0x100047855	0x00000023	[ 24] _emit_native_end_pass.cold.3
0x100047878	0x00000023	[ 24] _emit_native_end_pass.cold.4
0x10004789B	0x00000023	[ 24] _emit_native_store_global.cold.1
0x1000478BE	0x00000023	[ 24] _emit_native_import.cold.1
0x1000478E1	0x00000023	[ 24] _emit_native_import.cold.2
0x100047904	0x00000023	[ 24] _emit_native_import.cold.3
0x100047927	0x00000023	[ 24] _emit_native_import.cold.4
0x10004794A	0x00000023	[ 24] _emit_native_load_method.cold.1
0x10004796D	0x00000023	[ 24] _emit_native_subscr.cold.1
0x100047990	0x00000023	[ 24] _emit_native_subscr.cold.2
0x1000479B3	0x00000023	[ 24] _emit_native_attr.cold.1
0x1000479D6	0x00000023	[ 24] _emit_native_attr.cold.2
0x1000479F9	0x00000023	[ 24] _emit_native_attr.cold.3
0x100047A1C	0x00000023	[ 24] _emit_native_setup_block.cold.1
0x100047A3F	0x00000023	[ 24] _emit_native_end_finally.cold.1
0x100047A62	0x00000023	[ 24] _emit_native_end_finally.cold.2
0x100047A85	0x00000023	[ 24] _emit_native_get_iter.cold.1
0x100047AA8	0x00000023	[ 24] _emit_native_build.cold.1
0x100047ACB	0x00000023	[ 24] _emit_native_build.cold.2
0x100047AEE	0x00000023	[ 24] _emit_native_build.cold.3
0x100047B11	0x00000023	[ 24] _emit_native_build.cold.4
0x100047B34	0x00000023	[ 24] _emit_native_build.cold.5
0x100047B57	0x00000023	[ 24] _emit_native_build.cold.6
0x100047B7A	0x00000023	[ 24] _emit_native_store_map.cold.1
0x100047B9D	0x00000023	[ 24] _emit_native_store_map.cold.2
0x100047BC0	0x00000023	[ 24] _emit_native_store_map.cold.3
0x100047BE3	0x00000023	[ 24] _emit_native_store_comp.cold.1
0x100047C06	0x00000023	[ 24] _emit_native_store_comp.cold.2
0x100047C29	0x00000023	[ 24] _emit_native_store_comp.cold.3
0x100047C4C	0x00000023	[ 24] _emit_native_store_comp.cold.4
0x100047C6F	0x00000023	[ 24] _emit_native_store_comp.cold.5
0x100047C92	0x00000023	[ 24] _emit_native_unpack_sequence.cold.1
0x100047CB5	0x00000023	[ 24] _emit_native_unpack_ex.cold.1
0x100047CD8	0x00000023	[ 24] _emit_native_call_function.cold.1
0x100047CFB	0x00000023	[ 24] _emit_native_call_function.cold.2
0x100047D1E	0x00000023	[ 24] _emit_native_call_function.cold.3
0x100047D41	0x00000023	[ 24] _emit_native_return_value.cold.1
0x100047D64	0x00000023	[ 24] _emit_native_raise_varargs.cold.1
0x100047D87	0x00000023	[ 24] _adjust_stack.cold.1
0x100047DAA	0x00000023	[ 24] _adjust_stack.cold.2
0x100047DCD	0x00000023	[ 24] _emit_native_leave_exc_stack.cold.1
0x100047DF0	0x00000023	[ 24] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100047E16	0x00000023	[ 25] _emit_inline_thumb_label.cold.1
0x100047E39	0x00000023	[ 25] _emit_inline_thumb_op.cold.1
0x100047E5C	0x00000023	[ 25] _emit_inline_thumb_op.cold.2
0x100047E7F	0x00000023	[ 25] _emit_inline_thumb_op.cold.3
0x100047EA2	0x00000023	[ 25] _emit_inline_thumb_op.cold.4
0x100047EC5	0x00000023	[ 25] _emit_inline_thumb_op.cold.5
0x100047EE8	0x00000023	[ 25] _get_arg_reglist.cold.1
0x100047F0B	0x00000023	[ 25] _get_arg_reglist.cold.2
0x100047F2E	0x00000023	[ 26] _asm_arm_entry.cold.1
0x100047F51	0x00000021	[ 26] _asm_arm_mul_reg_reg_reg.cold.1
0x100047F72	0x00000023	[ 26] _asm_arm_mov_reg_pcrel.cold.1
0x100047F95	0x00000023	[ 26] _asm_arm_bcc_label.cold.1
0x100047FB8	0x00000023	[ 26] _asm_arm_bl_ind.cold.1
0x100047FDE	0x00000023	[ 27] _emit_native_start_pass.cold.1
0x100048001	0x00000023	[ 27] _emit_native_end_pass.cold.1
0x100048024	0x00000023	[ 27] _emit_native_end_pass.cold.2
0x100048047	0x00000023	[ 27] _emit_native_end_pass.cold.3
0x10004806A	0x00000023	[ 27] _emit_native_end_pass.cold.4
0x10004808D	0x00000023	[ 27] _emit_native_store_global.cold.1
0x1000480B0	0x00000023	[ 27] _emit_native_import.cold.1
0x1000480D3	0x00000023	[ 27] _emit_native_import.cold.2
0x1000480F6	0x00000023	[ 27] _emit_native_import.cold.3
0x100048119	0x00000023	[ 27] _emit_native_import.cold.4
0x10004813C	0x00000023	[ 27] _emit_native_load_method.cold.1
0x10004815F	0x00000023	[ 27] _emit_native_subscr.cold.1
0x100048182	0x00000023	[ 27] _emit_native_subscr.cold.2
0x1000481A5	0x00000023	[ 27] _emit_native_attr.cold.1
0x1000481C8	0x00000023	[ 27] _emit_native_attr.cold.2
0x1000481EB	0x00000023	[ 27] _emit_native_attr.cold.3
0x10004820E	0x00000023	[ 27] _emit_native_setup_block.cold.1
0x100048231	0x00000023	[ 27] _emit_native_end_finally.cold.1
0x100048254	0x00000023	[ 27] _emit_native_end_finally.cold.2
0x100048277	0x00000023	[ 27] _emit_native_get_iter.cold.1
0x10004829A	0x00000023	[ 27] _emit_native_build.cold.1
0x1000482BD	0x00000023	[ 27] _emit_native_build.cold.2
0x1000482E0	0x00000023	[ 27] _emit_native_build.cold.3
0x100048303	0x00000023	[ 27] _emit_native_build.cold.4
0x100048326	0x00000023	[ 27] _emit_native_build.cold.5
0x100048349	0x00000023	[ 27] _emit_native_build.cold.6
0x10004836C	0x00000023	[ 27] _emit_native_store_map.cold.1
0x10004838F	0x00000023	[ 27] _emit_native_store_map.cold.2
0x1000483B2	0x00000023	[ 27] _emit_native_store_map.cold.3
0x1000483D5	0x00000023	[ 27] _emit_native_store_comp.cold.1
0x1000483F8	0x00000023	[ 27] _emit_native_store_comp.cold.2
0x10004841B	0x00000023	[ 27] _emit_native_store_comp.cold.3
0x10004843E	0x00000023	[ 27] _emit_native_store_comp.cold.4
0x100048461	0x00000023	[ 27] _emit_native_store_comp.cold.5
0x100048484	0x00000023	[ 27] _emit_native_unpack_sequence.cold.1
0x1000484A7	0x00000023	[ 27] _emit_native_unpack_ex.cold.1
0x1000484CA	0x00000023	[ 27] _emit_native_call_function.cold.1
0x1000484ED	0x00000023	[ 27] _emit_native_call_function.cold.2
0x100048510	0x00000023	[ 27] _emit_native_call_function.cold.3
0x100048533	0x00000023	[ 27] _emit_native_return_value.cold.1
0x100048556	0x00000023	[ 27] _emit_native_raise_varargs.cold.1
0x100048579	0x00000023	[ 27] _adjust_stack.cold.1
0x10004859C	0x00000023	[ 27] _adjust_stack.cold.2
0x1000485BF	0x00000023	[ 27] _emit_native_leave_exc_stack.cold.1
0x1000485E2	0x00000023	[ 27] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100048605	0x00000021	[ 28] _asm_xtensa_j_label.cold.1
0x100048626	0x00000021	[ 28] _asm_xtensa_bccz_reg_label.cold.1
0x100048647	0x00000021	[ 28] _asm_xtensa_bcc_reg_reg_label.cold.1
0x100048668	0x00000021	[ 28] _asm_xtensa_mov_reg_pcrel.cold.1
0x10004868B	0x00000023	[ 29] _emit_native_start_pass.cold.1
0x1000486AE	0x00000023	[ 29] _emit_native_end_pass.cold.1
0x1000486D1	0x00000023	[ 29] _emit_native_end_pass.cold.2
0x1000486F4	0x00000023	[ 29] _emit_native_end_pass.cold.3
0x100048717	0x00000023	[ 29] _emit_native_end_pass.cold.4
0x10004873A	0x00000023	[ 29] _emit_native_store_global.cold.1
0x10004875D	0x00000023	[ 29] _emit_native_import.cold.1
0x100048780	0x00000023	[ 29] _emit_native_import.cold.2
0x1000487A3	0x00000023	[ 29] _emit_native_import.cold.3
0x1000487C6	0x00000023	[ 29] _emit_native_import.cold.4
0x1000487E9	0x00000023	[ 29] _emit_native_load_method.cold.1
0x10004880C	0x00000023	[ 29] _emit_native_subscr.cold.1
0x10004882F	0x00000023	[ 29] _emit_native_subscr.cold.2
0x100048852	0x00000023	[ 29] _emit_native_attr.cold.1
0x100048875	0x00000023	[ 29] _emit_native_attr.cold.2
0x100048898	0x00000023	[ 29] _emit_native_attr.cold.3
0x1000488BB	0x00000023	[ 29] _emit_native_setup_block.cold.1
0x1000488DE	0x00000023	[ 29] _emit_native_end_finally.cold.1
0x100048901	0x00000023	[ 29] _emit_native_end_finally.cold.2
0x100048924	0x00000023	[ 29] _emit_native_get_iter.cold.1
0x100048947	0x00000023	[ 29] _emit_native_build.cold.1
0x10004896A	0x00000023	[ 29] _emit_native_build.cold.2
0x10004898D	0x00000023	[ 29] _emit_native_build.cold.3
0x1000489B0	0x00000023	[ 29] _emit_native_build.cold.4
0x1000489D3	0x00000023	[ 29] _emit_native_build.cold.5
0x1000489F6	0x00000023	[ 29] _emit_native_build.cold.6
0x100048A19	0x00000023	[ 29] _emit_native_store_map.cold.1
0x100048A3C	0x00000023	[ 29] _emit_native_store_map.cold.2
0x100048A5F	0x00000023	[ 29] _emit_native_store_map.cold.3
0x100048A82	0x00000023	[ 29] _emit_native_store_comp.cold.1
0x100048AA5	0x00000023	[ 29] _emit_native_store_comp.cold.2
0x100048AC8	0x00000023	[ 29] _emit_native_store_comp.cold.3
0x100048AEB	0x00000023	[ 29] _emit_native_store_comp.cold.4
0x100048B0E	0x00000023	[ 29] _emit_native_store_comp.cold.5
0x100048B31	0x00000023	[ 29] _emit_native_unpack_sequence.cold.1
0x100048B54	0x00000023	[ 29] _emit_native_unpack_ex.cold.1
0x100048B77	0x00000023	[ 29] _emit_native_call_function.cold.1
0x100048B9A	0x00000023	[ 29] _emit_native_call_function.cold.2
0x100048BBD	0x00000023	[ 29] _emit_native_call_function.cold.3
0x100048BE0	0x00000023	[ 29] _emit_native_return_value.cold.1
0x100048C03	0x00000023	[ 29] _emit_native_raise_varargs.cold.1
0x100048C26	0x00000023	[ 29] _adjust_stack.cold.1
0x100048C49	0x00000023	[ 29] _adjust_stack.cold.2
0x100048C6C	0x00000023	[ 29] _emit_native_leave_exc_stack.cold.1
0x100048C8F	0x00000023	[ 29] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100048CB3	0x00000021	[ 30] _emit_inline_xtensa_label.cold.1
0x100048CD6	0x00000023	[ 31] _emit_native_start_pass.cold.1
0x100048CF9	0x00000023	[ 31] _emit_native_end_pass.cold.1
0x100048D1C	0x00000023	[ 31] _emit_native_end_pass.cold.2
0x100048D3F	0x00000023	[ 31] _emit_native_end_pass.cold.3
0x100048D62	0x00000023	[ 31] _emit_native_end_pass.cold.4
0x100048D85	0x00000023	[ 31] _emit_native_store_global.cold.1
0x100048DA8	0x00000023	[ 31] _emit_native_import.cold.1
0x100048DCB	0x00000023	[ 31] _emit_native_import.cold.2
0x100048DEE	0x00000023	[ 31] _emit_native_import.cold.3
0x100048E11	0x00000023	[ 31] _emit_native_import.cold.4
0x100048E34	0x00000023	[ 31] _emit_native_load_method.cold.1
0x100048E57	0x00000023	[ 31] _emit_native_subscr.cold.1
0x100048E7A	0x00000023	[ 31] _emit_native_subscr.cold.2
0x100048E9D	0x00000023	[ 31] _emit_native_attr.cold.1
0x100048EC0	0x00000023	[ 31] _emit_native_attr.cold.2
0x100048EE3	0x00000023	[ 31] _emit_native_attr.cold.3
0x100048F06	0x00000023	[ 31] _emit_native_setup_block.cold.1
0x100048F29	0x00000023	[ 31] _emit_native_end_finally.cold.1
0x100048F4C	0x00000023	[ 31] _emit_native_end_finally.cold.2
0x100048F6F	0x00000023	[ 31] _emit_native_get_iter.cold.1
0x100048F92	0x00000023	[ 31] _emit_native_build.cold.1
0x100048FB5	0x00000023	[ 31] _emit_native_build.cold.2
0x100048FD8	0x00000023	[ 31] _emit_native_build.cold.3
0x100048FFB	0x00000023	[ 31] _emit_native_build.cold.4
0x10004901E	0x00000023	[ 31] _emit_native_build.cold.5
0x100049041	0x00000023	[ 31] _emit_native_build.cold.6
0x100049064	0x00000023	[ 31] _emit_native_store_map.cold.1
0x100049087	0x00000023	[ 31] _emit_native_store_map.cold.2
0x1000490AA	0x00000023	[ 31] _emit_native_store_map.cold.3
0x1000490CD	0x00000023	[ 31] _emit_native_store_comp.cold.1
0x1000490F0	0x00000023	[ 31] _emit_native_store_comp.cold.2
0x100049113	0x00000023	[ 31] _emit_native_store_comp.cold.3
0x100049136	0x00000023	[ 31] _emit_native_store_comp.cold.4
0x100049159	0x00000023	[ 31] _emit_native_store_comp.cold.5
0x10004917C	0x00000023	[ 31] _emit_native_unpack_sequence.cold.1
0x10004919F	0x00000023	[ 31] _emit_native_unpack_ex.cold.1
0x1000491C2	0x00000023	[ 31] _emit_native_call_function.cold.1
0x1000491E5	0x00000023	[ 31] _emit_native_call_function.cold.2
0x100049208	0x00000023	[ 31] _emit_native_call_function.cold.3
0x10004922B	0x00000023	[ 31] _emit_native_return_value.cold.1
0x10004924E	0x00000023	[ 31] _emit_native_raise_varargs.cold.1
0x100049271	0x00000023	[ 31] _adjust_stack.cold.1
0x100049294	0x00000023	[ 31] _adjust_stack.cold.2
0x1000492B7	0x00000023	[ 31] _emit_native_leave_exc_stack.cold.1
0x1000492DA	0x00000023	[ 31] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x1000492FD	0x00000023	[ 32] _mp_format_float.cold.1
0x100049320	0x00000023	[ 32] _mp_format_float.cold.2
0x100049343	0x00000023	[ 34] _mp_obj_new_exception_arg1.cold.1
0x100049366	0x00000021	[ 35] _mp_emit_glue_assign_native.cold.1
0x100049387	0x00000023	[ 36] _save_obj.cold.1
0x1000493AB	0x00000023	[ 37] _mp_unary_op.cold.1
0x1000493CE	0x00000023	[ 37] _mp_getiter.cold.1
0x1000493F1	0x00000023	[ 37] _mp_load_method_maybe.cold.1
0x100049415	0x00000023	[ 37] _mp_obj_new_exception_arg1.cold.1
0x100049438	0x00000021	[ 44] _mp_arg_parse_all.cold.1
0x100049459	0x00000023	[ 46] _mp_map_lookup.cold.1
0x10004947C	0x00000023	[ 47] _mp_obj_print_exception.cold.1
0x10004949F	0x00000023	[ 48] _array_append.cold.1
0x1000494C2	0x00000023	[ 48] _array_extend.cold.1
0x1000494E5	0x00000023	[ 48] _array_subscr.cold.1
0x100049508	0x00000023	[ 53] _mp_obj_complex_get.cold.1
0x10004952B	0x00000023	[ 54] _dict_iter_next.cold.1
0x10004954E	0x00000021	[ 54] _dict_iter_next.cold.2
0x10004956F	0x00000023	[ 54] _dict_popitem.cold.1
0x100049592	0x00000021	[ 56] _get_native_exception.cold.1
0x1000495B3	0x00000023	[ 56] _mp_obj_new_exception.cold.1
0x1000495D6	0x00000023	[ 56] _mp_obj_new_exception_msg.cold.1
0x1000495F9	0x00000023	[ 56] _mp_obj_new_exception_msg_vlist.cold.1
0x10004961C	0x00000023	[ 56] _mp_obj_new_exception_msg_vlist.cold.2
0x100049640	0x00000023	[ 58] _mp_obj_float_get.cold.1
0x100049664	0x00000021	[ 59] _fun_builtin_1_call.cold.1
0x100049685	0x00000021	[ 59] _fun_builtin_2_call.cold.1
0x1000496A6	0x00000021	[ 59] _fun_builtin_3_call.cold.1
0x1000496C7	0x00000021	[ 59] _fun_builtin_var_call.cold.1
0x1000496E8	0x00000023	[ 62] _mp_obj_int_formatted.cold.1
0x10004970B	0x00000023	[ 62] _mp_int_format_size.cold.1
0x10004972F	0x00000021	[ 63] _mp_obj_int_formatted_impl.cold.1
0x100049750	0x00000021	[ 63] _mp_obj_int_to_bytes_impl.cold.1
0x100049771	0x00000023	[ 63] _mp_obj_int_binary_op.cold.1
0x100049794	0x00000023	[ 63] _mp_obj_int_binary_op.cold.2
0x1000497B7	0x00000023	[ 63] _mp_obj_int_as_float_impl.cold.1
0x1000497DA	0x00000023	[ 64] _list_subscr.cold.1
0x1000497FD	0x00000023	[ 76] _mp_obj_str_format_helper.cold.1
0x100049820	0x00000023	[ 76] _str_replace.cold.1
0x100049843	0x00000023	[ 76] _str_uni_strip.cold.1
0x100049866	0x00000023	[ 76] _str_uni_strip.cold.2
0x100049889	0x00000023	[ 77] _str_subscr.cold.1
0x1000498AC	0x00000023	[ 78] _mp_obj_tuple_get.cold.1
0x1000498CF	0x00000021	[ 79] _mp_obj_new_instance.cold.1
0x1000498F0	0x00000021	[ 79] _instance_count_native_bases.cold.1
0x100049911	0x00000023	[ 79] _mp_obj_instance_make_new.cold.1
0x100049934	0x00000023	[ 79] _mp_obj_class_lookup.cold.1
0x100049957	0x00000023	[ 79] _mp_obj_class_lookup.cold.2
0x10004997A	0x00000023	[ 79] _mp_obj_class_lookup.cold.3
0x10004999D	0x00000023	[ 79] _mp_obj_class_lookup.cold.4
0x1000499C0	0x00000023	[ 79] _mp_obj_class_lookup.cold.5
0x1000499E3	0x00000023	[ 79] _type_attr.cold.1
0x100049A06	0x00000023	[ 79] _type_attr.cold.2
0x100049A29	0x00000023	[ 79] _mp_obj_new_type.cold.1
0x100049A4C	0x00000023	[ 79] _mp_obj_instance_attr.cold.1
0x100049A6F	0x00000023	[ 79] _static_class_method_make_new.cold.1
0x100049A92	0x00000006	[ 96] ____chkstk_darwin
0x100049A98	0x00000006	[ 96] ___assert_rtn
0x100049A9E	0x00000006	[ 96] ___bzero
0x100049AA4	0x00000006	[ 96] ___error
0x100049AAA	0x00000006	[ 96] ___exp10
0x100049AB0	0x00000006	[ 96] ___sincos_stret
0x100049AB6	0x00000006	[ 96] ___stack_chk_fail
0x100049ABC	0x00000006	[ 96] _atan2
0x100049AC2	0x00000006	[ 96] _close
0x100049AC8	0x00000006	[ 96] _exit
0x100049ACE	0x00000006	[ 96] _exp
0x100049AD4	0x00000006	[ 96] _fmod
0x100049ADA	0x00000006	[ 96] _fprintf
0x100049AE0	0x00000006	[ 96] _log
0x100049AE6	0x00000006	[ 96] _malloc
0x100049AEC	0x00000006	[ 96] _memchr
0x100049AF2	0x00000006	[ 96] _memcmp
0x100049AF8	0x00000006	[ 96] _memcpy
0x100049AFE	0x00000006	[ 96] _memmove
0x100049B04	0x00000006	[ 96] _memset
0x100049B0A	0x00000006	[ 96] _nan
0x100049B10	0x00000006	[ 96] _open
0x100049B16	0x00000006	[ 96] _pow
0x100049B1C	0x00000006	[ 96] _printf
0x100049B22	0x00000006	[ 96] _puts
0x100049B28	0x00000006	[ 96] _read
0x100049B2E	0x00000006	[ 96] _strchr
0x100049B34	0x00000006	[ 96] _strcmp
0x100049B3A	0x00000006	[ 96] _strlen
0x100049B40	0x00000006	[ 96] _strncmp
0x100049B46	0x00000006	[ 96] _strtol
0x100049B4C	0x00000006	[ 96] _write
0x100049B54	0x00000010	[  0] helper helper
0x100049B64	0x0000000A	[ 96] ____chkstk_darwin
0x100049B6E	0x0000000A	[ 96] ___assert_rtn
0x100049B78	0x0000000A	[ 96] ___bzero
0x100049B82	0x0000000A	[ 96] ___error
0x100049B8C	0x0000000A	[ 96] ___exp10
0x100049B96	0x0000000A	[ 96] ___sincos_stret
0x100049BA0	0x0000000A	[ 96] ___stack_chk_fail
0x100049BAA	0x0000000A	[ 96] _atan2
0x100049BB4	0x0000000A	[ 96] _close
0x100049BBE	0x0000000A	[ 96] _exit
0x100049BC8	0x0000000A	[ 96] _exp
0x100049BD2	0x0000000A	[ 96] _fmod
0x100049BDC	0x0000000A	[ 96] _fprintf
0x100049BE6	0x0000000A	[ 96] _log
0x100049BF0	0x0000000A	[ 96] _malloc
0x100049BFA	0x0000000A	[ 96] _memchr
0x100049C04	0x0000000A	[ 96] _memcmp
0x100049C0E	0x0000000A	[ 96] _memcpy
0x100049C18	0x0000000A	[ 96] _memmove
0x100049C22	0x0000000A	[ 96] _memset
0x100049C2C	0x0000000A	[ 96] _nan
0x100049C36	0x0000000A	[ 96] _open
0x100049C40	0x0000000A	[ 96] _pow
0x100049C4A	0x0000000A	[ 96] _printf
0x100049C54	0x0000000A	[ 96] _puts
0x100049C5E	0x0000000A	[ 96] _read
0x100049C68	0x0000000A	[ 96] _strchr
0x100049C72	0x0000000A	[ 96] _strcmp
0x100049C7C	0x0000000A	[ 96] _strlen
0x100049C86	0x0000000A	[ 96] _strncmp
0x100049C90	0x0000000A	[ 96] _strtol
0x100049C9A	0x0000000A	[ 96] _write
0x100049CB0	0x00000010	[  5] 16-byte-literal
0x100049CC0	0x000002B0	[  6] _mp_qstr_const_hashes
0x100049F70	0x00000156	[  6] _mp_qstr_const_lengths
0x10004A0D0	0x00000020	[  8] _pad_spaces
0x10004A0F0	0x00000011	[  8] _pad_zeroes
0x10004A110	0x00000080	[  9] _attr
0x10004A190	0x00000008	[ 10] 8-byte-literal
0x10004A1A0	0x00000010	[ 10] 16-byte-literal
0x10004A1B0	0x00000010	[ 12] 16-byte-literal
0x10004A1C0	0x00000010	[ 12] 16-byte-literal
0x10004A1D0	0x0000002C	[ 12] _tok_enc_kind
0x10004A200	0x00000010	[ 13] 16-byte-literal
0x10004A210	0x00000010	[ 13] 16-byte-literal
0x10004A220	0x000000B0	[ 13] _rule_act_table
0x10004A2D0	0x000000B0	[ 13] _rule_arg_offset_table
0x10004A380	0x00000388	[ 13] _rule_arg_combined_table
0x10004A708	0x00000001	[ 13] _mp_constants_table
0x10004A709	0x00000007	[ 14] _scope_simple_name_table
0x10004A710	0x00000010	[ 17] 16-byte-literal
0x10004A720	0x00000002	[ 20] _reg_local_table
0x10004A722	0x0000000E	[ 20] _emit_native_binary_op.ops
0x10004A730	0x00000040	[ 20] l_switch.table.emit_native_store_fast.53
0x10004A770	0x00000040	[ 20] l_switch.table.emit_native_jump_helper
0x10004A7B0	0x00000010	[ 22] _reg_local_table
0x10004A7C0	0x00000032	[ 22] _mp_f_n_args
0x10004A7F2	0x0000000E	[ 22] _emit_native_binary_op.ops
0x10004A800	0x00000040	[ 22] l_switch.table.emit_native_store_fast.53
0x10004A840	0x00000040	[ 22] l_switch.table.emit_native_jump_helper
0x10004A880	0x00000010	[ 23] 16-byte-literal
0x10004A890	0x00000010	[ 24] _reg_local_table
0x10004A8A0	0x00000020	[ 24] _emit_native_binary_op.ops
0x10004A8C0	0x00000018	[ 24] _emit_native_binary_op.ops.33
0x10004A8D8	0x00000040	[ 24] l_switch.table.emit_native_store_fast.58
0x10004A918	0x00000040	[ 24] l_switch.table.emit_native_jump_helper
0x10004A960	0x00000010	[ 25] _format_vfp_op_table
0x10004A970	0x00000030	[ 25] _cc_name_table
0x10004A9A0	0x00000040	[ 25] _format_4_op_table
0x10004A9E0	0x00000020	[ 25] _format_9_10_op_table
0x10004AA00	0x00000060	[ 25] _reg_name_table
0x10004AA60	0x00000012	[ 25] _special_reg_name_table
0x10004AA80	0x00000010	[ 27] _reg_local_table
0x10004AA90	0x00000030	[ 27] _emit_native_binary_op.ccs
0x10004AAC0	0x00000040	[ 27] l_switch.table.emit_native_store_fast.53
0x10004AB00	0x00000040	[ 27] l_switch.table.emit_native_jump_helper
0x10004AB40	0x00000002	[ 29] _reg_local_table
0x10004AB42	0x0000000E	[ 29] _emit_native_binary_op.ccs
0x10004AB50	0x00000040	[ 29] l_switch.table.emit_native_store_fast.53
0x10004AB90	0x00000040	[ 29] l_switch.table.emit_native_jump_helper
0x10004ABD0	0x00000070	[ 30] _opcode_table_3arg
0x10004AC40	0x00000040	[ 30] _reg_name_table
0x10004AC80	0x00000002	[ 31] _reg_local_table
0x10004AC82	0x0000000E	[ 31] _emit_native_binary_op.ccs
0x10004AC90	0x00000040	[ 31] l_switch.table.emit_native_store_fast.53
0x10004ACD0	0x00000040	[ 31] l_switch.table.emit_native_jump_helper
0x10004AD10	0x00000010	[ 32] 16-byte-literal
0x10004AD20	0x00000008	[ 32] 8-byte-literal
0x10004AD28	0x00000008	[ 32] 8-byte-literal
0x10004AD30	0x00000008	[ 32] 8-byte-literal
0x10004AD38	0x00000008	[ 32] 8-byte-literal
0x10004AD40	0x00000008	[ 34] 8-byte-literal
0x10004AD48	0x00000008	[ 34] 8-byte-literal
0x10004AD50	0x00000044	[ 46] _hash_allocation_sizes
0x10004ADA0	0x00000010	[ 48] 16-byte-literal
0x10004ADB0	0x00000008	[ 53] 8-byte-literal
0x10004ADB8	0x00000008	[ 58] 8-byte-literal
0x10004ADC0	0x00000008	[ 58] 8-byte-literal
0x10004ADD0	0x00000010	[ 62] _log_base2_floor
0x10004ADE0	0x00000020	[ 64] _mp_obj_list_sort.allowed_args
0x10004AE00	0x00000040	[ 69] _property_make_new.allowed_args
0x10004AE40	0x00000008	[ 76] 8-byte-literal
0x10004AE48	0x00000007	[ 76] _str_uni_strip.whitespace
0x10004AE50	0x00000010	[ 79] 16-byte-literal
0x10004AE60	0x00000010	[ 79] 16-byte-literal
0x10004AE70	0x00000010	[ 79] 16-byte-literal
0x10004AE80	0x00000010	[ 79] 16-byte-literal
0x10004AE90	0x00000010	[ 79] 16-byte-literal
0x10004AEA0	0x00000010	[ 79] 16-byte-literal
0x10004AEB0	0x00000010	[ 79] _mp_unary_op_method_name
0x10004AEC0	0x00000025	[ 79] _mp_binary_op_method_name
0x10004AEE5	0x00000008	[  5] literal string: gc_free
0x10004AEED	0x00000005	[  5] literal string: gc.c
0x10004AEF2	0x00000010	[  5] literal string: VERIFY_PTR(ptr)
0x10004AF02	0x00000025	[  5] literal string: ATB_GET_KIND(area, block) == AT_HEAD
0x10004AF27	0x0000000B	[  5] literal string: gc_realloc
0x10004AF32	0x00000022	[  5] literal string: ATB_GET_KIND(area, bl) == AT_FREE
0x10004AF54	0x00000003	[  5] literal string: %c
0x10004AF57	0x00000002	[  5] literal string: \n
0x10004AF59	0x00000001	[  6] literal string: 
0x10004AF5A	0x00000008	[  6] literal string: __dir__
0x10004AF62	0x00000002	[  6] literal string:  
0x10004AF64	0x00000002	[  6] literal string: *
0x10004AF66	0x00000002	[  6] literal string: /
0x10004AF68	0x00000009	[  6] literal string: <module>
0x10004AF71	0x00000002	[  6] literal string: _
0x10004AF73	0x00000009	[  6] literal string: __call__
0x10004AF7C	0x0000000A	[  6] literal string: __class__
0x10004AF86	0x0000000C	[  6] literal string: __delitem__
0x10004AF92	0x0000000A	[  6] literal string: __enter__
0x10004AF9C	0x00000009	[  6] literal string: __exit__
0x10004AFA5	0x0000000C	[  6] literal string: __getattr__
0x10004AFB1	0x0000000C	[  6] literal string: __getitem__
0x10004AFBD	0x00000009	[  6] literal string: __hash__
0x10004AFC6	0x00000009	[  6] literal string: __init__
0x10004AFCF	0x00000008	[  6] literal string: __int__
0x10004AFD7	0x00000009	[  6] literal string: __iter__
0x10004AFE0	0x00000008	[  6] literal string: __len__
0x10004AFE8	0x00000009	[  6] literal string: __main__
0x10004AFF1	0x0000000B	[  6] literal string: __module__
0x10004AFFC	0x00000009	[  6] literal string: __name__
0x10004B005	0x00000008	[  6] literal string: __new__
0x10004B00D	0x00000009	[  6] literal string: __next__
0x10004B016	0x0000000D	[  6] literal string: __qualname__
0x10004B023	0x00000009	[  6] literal string: __repr__
0x10004B02C	0x0000000C	[  6] literal string: __setitem__
0x10004B038	0x00000008	[  6] literal string: __str__
0x10004B040	0x00000010	[  6] literal string: ArithmeticError
0x10004B050	0x0000000F	[  6] literal string: AssertionError
0x10004B05F	0x0000000F	[  6] literal string: AttributeError
0x10004B06E	0x0000000E	[  6] literal string: BaseException
0x10004B07C	0x00000009	[  6] literal string: EOFError
0x10004B085	0x00000009	[  6] literal string: Ellipsis
0x10004B08E	0x0000000A	[  6] literal string: Exception
0x10004B098	0x0000000E	[  6] literal string: GeneratorExit
0x10004B0A6	0x0000000C	[  6] literal string: ImportError
0x10004B0B2	0x00000011	[  6] literal string: IndentationError
0x10004B0C3	0x0000000B	[  6] literal string: IndexError
0x10004B0CE	0x00000009	[  6] literal string: KeyError
0x10004B0D7	0x00000012	[  6] literal string: KeyboardInterrupt
0x10004B0E9	0x0000000C	[  6] literal string: LookupError
0x10004B0F5	0x0000000C	[  6] literal string: MemoryError
0x10004B101	0x0000000A	[  6] literal string: NameError
0x10004B10B	0x00000009	[  6] literal string: NoneType
0x10004B114	0x00000014	[  6] literal string: NotImplementedError
0x10004B128	0x00000008	[  6] literal string: OSError
0x10004B130	0x0000000E	[  6] literal string: OverflowError
0x10004B13E	0x0000000D	[  6] literal string: RuntimeError
0x10004B14B	0x0000000E	[  6] literal string: StopIteration
0x10004B159	0x0000000C	[  6] literal string: SyntaxError
0x10004B165	0x0000000B	[  6] literal string: SystemExit
0x10004B170	0x0000000A	[  6] literal string: TypeError
0x10004B17A	0x0000000B	[  6] literal string: ValueError
0x10004B185	0x00000012	[  6] literal string: ZeroDivisionError
0x10004B197	0x00000004	[  6] literal string: abs
0x10004B19B	0x00000004	[  6] literal string: all
0x10004B19F	0x00000004	[  6] literal string: any
0x10004B1A3	0x00000007	[  6] literal string: append
0x10004B1AA	0x00000005	[  6] literal string: args
0x10004B1AF	0x00000005	[  6] literal string: bool
0x10004B1B4	0x00000009	[  6] literal string: builtins
0x10004B1BD	0x0000000A	[  6] literal string: bytearray
0x10004B1C7	0x00000009	[  6] literal string: bytecode
0x10004B1D0	0x00000006	[  6] literal string: bytes
0x10004B1D6	0x00000009	[  6] literal string: callable
0x10004B1DF	0x00000004	[  6] literal string: chr
0x10004B1E3	0x0000000C	[  6] literal string: classmethod
0x10004B1EF	0x00000006	[  6] literal string: clear
0x10004B1F5	0x00000006	[  6] literal string: close
0x10004B1FB	0x00000006	[  6] literal string: const
0x10004B201	0x00000005	[  6] literal string: copy
0x10004B206	0x00000006	[  6] literal string: count
0x10004B20C	0x00000005	[  6] literal string: dict
0x10004B211	0x00000004	[  6] literal string: dir
0x10004B215	0x00000007	[  6] literal string: divmod
0x10004B21C	0x00000004	[  6] literal string: end
0x10004B220	0x00000009	[  6] literal string: endswith
0x10004B229	0x00000005	[  6] literal string: eval
0x10004B22E	0x00000005	[  6] literal string: exec
0x10004B233	0x00000007	[  6] literal string: extend
0x10004B23A	0x00000005	[  6] literal string: find
0x10004B23F	0x00000007	[  6] literal string: format
0x10004B246	0x0000000B	[  6] literal string: from_bytes
0x10004B251	0x00000004	[  6] literal string: get
0x10004B255	0x00000008	[  6] literal string: getattr
0x10004B25D	0x00000008	[  6] literal string: globals
0x10004B265	0x00000008	[  6] literal string: hasattr
0x10004B26D	0x00000005	[  6] literal string: hash
0x10004B272	0x00000003	[  6] literal string: id
0x10004B275	0x00000006	[  6] literal string: index
0x10004B27B	0x00000007	[  6] literal string: insert
0x10004B282	0x00000004	[  6] literal string: int
0x10004B286	0x00000008	[  6] literal string: isalpha
0x10004B28E	0x00000008	[  6] literal string: isdigit
0x10004B296	0x0000000B	[  6] literal string: isinstance
0x10004B2A1	0x00000008	[  6] literal string: islower
0x10004B2A9	0x00000008	[  6] literal string: isspace
0x10004B2B1	0x0000000B	[  6] literal string: issubclass
0x10004B2BC	0x00000008	[  6] literal string: isupper
0x10004B2C4	0x00000006	[  6] literal string: items
0x10004B2CA	0x00000005	[  6] literal string: iter
0x10004B2CF	0x00000005	[  6] literal string: join
0x10004B2D4	0x00000004	[  6] literal string: key
0x10004B2D8	0x00000005	[  6] literal string: keys
0x10004B2DD	0x00000004	[  6] literal string: len
0x10004B2E1	0x00000005	[  6] literal string: list
0x10004B2E6	0x00000007	[  6] literal string: little
0x10004B2ED	0x00000007	[  6] literal string: locals
0x10004B2F4	0x00000006	[  6] literal string: lower
0x10004B2FA	0x00000007	[  6] literal string: lstrip
0x10004B301	0x00000005	[  6] literal string: main
0x10004B306	0x00000004	[  6] literal string: map
0x10004B30A	0x0000000C	[  6] literal string: micropython
0x10004B316	0x00000005	[  6] literal string: next
0x10004B31B	0x00000007	[  6] literal string: object
0x10004B322	0x00000005	[  6] literal string: open
0x10004B327	0x00000004	[  6] literal string: ord
0x10004B32B	0x00000004	[  6] literal string: pop
0x10004B32F	0x00000008	[  6] literal string: popitem
0x10004B337	0x00000004	[  6] literal string: pow
0x10004B33B	0x00000006	[  6] literal string: print
0x10004B341	0x00000006	[  6] literal string: range
0x10004B347	0x00000005	[  6] literal string: read
0x10004B34C	0x00000009	[  6] literal string: readinto
0x10004B355	0x00000009	[  6] literal string: readline
0x10004B35E	0x00000007	[  6] literal string: remove
0x10004B365	0x00000008	[  6] literal string: replace
0x10004B36D	0x00000005	[  6] literal string: repr
0x10004B372	0x00000008	[  6] literal string: reverse
0x10004B37A	0x00000006	[  6] literal string: rfind
0x10004B380	0x00000007	[  6] literal string: rindex
0x10004B387	0x00000006	[  6] literal string: round
0x10004B38D	0x00000007	[  6] literal string: rsplit
0x10004B394	0x00000007	[  6] literal string: rstrip
0x10004B39B	0x00000005	[  6] literal string: self
0x10004B3A0	0x00000005	[  6] literal string: send
0x10004B3A5	0x00000004	[  6] literal string: sep
0x10004B3A9	0x00000004	[  6] literal string: set
0x10004B3AD	0x00000008	[  6] literal string: setattr
0x10004B3B5	0x0000000B	[  6] literal string: setdefault
0x10004B3C0	0x00000005	[  6] literal string: sort
0x10004B3C5	0x00000007	[  6] literal string: sorted
0x10004B3CC	0x00000006	[  6] literal string: split
0x10004B3D2	0x00000006	[  6] literal string: start
0x10004B3D8	0x0000000B	[  6] literal string: startswith
0x10004B3E3	0x0000000D	[  6] literal string: staticmethod
0x10004B3F0	0x00000005	[  6] literal string: step
0x10004B3F5	0x00000005	[  6] literal string: stop
0x10004B3FA	0x00000004	[  6] literal string: str
0x10004B3FE	0x00000006	[  6] literal string: strip
0x10004B404	0x00000004	[  6] literal string: sum
0x10004B408	0x00000006	[  6] literal string: super
0x10004B40E	0x00000006	[  6] literal string: throw
0x10004B414	0x00000009	[  6] literal string: to_bytes
0x10004B41D	0x00000006	[  6] literal string: tuple
0x10004B423	0x00000005	[  6] literal string: type
0x10004B428	0x00000007	[  6] literal string: update
0x10004B42F	0x00000006	[  6] literal string: upper
0x10004B435	0x00000006	[  6] literal string: utf-8
0x10004B43B	0x00000006	[  6] literal string: value
0x10004B441	0x00000007	[  6] literal string: values
0x10004B448	0x00000006	[  6] literal string: write
0x10004B44E	0x00000004	[  6] literal string: zip
0x10004B452	0x00000008	[  6] literal string: __add__
0x10004B45A	0x0000000B	[  6] literal string: __aenter__
0x10004B465	0x0000000A	[  6] literal string: __aexit__
0x10004B46F	0x0000000A	[  6] literal string: __aiter__
0x10004B479	0x0000000A	[  6] literal string: __anext__
0x10004B483	0x0000000A	[  6] literal string: __bases__
0x10004B48D	0x00000009	[  6] literal string: __bool__
0x10004B496	0x00000010	[  6] literal string: __build_class__
0x10004B4A6	0x0000000C	[  6] literal string: __complex__
0x10004B4B2	0x0000000D	[  6] literal string: __contains__
0x10004B4BF	0x00000009	[  6] literal string: __dict__
0x10004B4C8	0x00000007	[  6] literal string: __eq__
0x10004B4CF	0x0000000A	[  6] literal string: __float__
0x10004B4D9	0x00000007	[  6] literal string: __ge__
0x10004B4E0	0x00000007	[  6] literal string: __gt__
0x10004B4E7	0x00000009	[  6] literal string: __iadd__
0x10004B4F0	0x0000000B	[  6] literal string: __import__
0x10004B4FB	0x00000009	[  6] literal string: __isub__
0x10004B504	0x00000007	[  6] literal string: __le__
0x10004B50B	0x00000007	[  6] literal string: __lt__
0x10004B512	0x00000007	[  6] literal string: __ne__
0x10004B519	0x00000009	[  6] literal string: __path__
0x10004B522	0x0000000F	[  6] literal string: __repl_print__
0x10004B531	0x0000000D	[  6] literal string: __reversed__
0x10004B53E	0x00000008	[  6] literal string: __sub__
0x10004B546	0x0000000E	[  6] literal string: __traceback__
0x10004B554	0x00000004	[  6] literal string: %#o
0x10004B558	0x00000004	[  6] literal string: %#x
0x10004B55C	0x00000006	[  6] literal string: {:#b}
0x10004B562	0x00000021	[  6] literal string: maximum recursion depth exceeded
0x10004B583	0x00000009	[  6] literal string: <lambda>
0x10004B58C	0x0000000B	[  6] literal string: <listcomp>
0x10004B597	0x0000000B	[  6] literal string: <dictcomp>
0x10004B5A2	0x0000000A	[  6] literal string: <setcomp>
0x10004B5AC	0x0000000A	[  6] literal string: <genexpr>
0x10004B5B6	0x00000009	[  6] literal string: <string>
0x10004B5BF	0x00000008	[  6] literal string: <stdin>
0x10004B5C7	0x00000005	[  6] literal string: None
0x10004B5CC	0x00000013	[  6] literal string: StopAsyncIteration
0x10004B5DF	0x0000000D	[  6] literal string: UnicodeError
0x10004B5EC	0x0000000F	[  6] literal string: ViperTypeError
0x10004B5FB	0x00000004	[  6] literal string: add
0x10004B5FF	0x00000005	[  6] literal string: addi
0x10004B604	0x00000006	[  6] literal string: align
0x10004B60A	0x00000005	[  6] literal string: and_
0x10004B60F	0x0000000A	[  6] literal string: asm_thumb
0x10004B619	0x0000000B	[  6] literal string: asm_xtensa
0x10004B624	0x00000004	[  6] literal string: asr
0x10004B628	0x00000002	[  6] literal string: b
0x10004B62A	0x00000005	[  6] literal string: ball
0x10004B62F	0x00000005	[  6] literal string: bany
0x10004B634	0x00000004	[  6] literal string: bbc
0x10004B638	0x00000004	[  6] literal string: bbs
0x10004B63C	0x00000004	[  6] literal string: beq
0x10004B640	0x00000005	[  6] literal string: beqz
0x10004B645	0x00000004	[  6] literal string: bge
0x10004B649	0x00000005	[  6] literal string: bgeu
0x10004B64E	0x00000004	[  6] literal string: bin
0x10004B652	0x00000003	[  6] literal string: bl
0x10004B655	0x00000004	[  6] literal string: blt
0x10004B659	0x00000006	[  6] literal string: bnall
0x10004B65F	0x00000004	[  6] literal string: bne
0x10004B663	0x00000005	[  6] literal string: bnez
0x10004B668	0x00000006	[  6] literal string: bnone
0x10004B66E	0x0000000D	[  6] literal string: bound_method
0x10004B67B	0x00000003	[  6] literal string: bx
0x10004B67E	0x00000009	[  6] literal string: calcsize
0x10004B687	0x00000007	[  6] literal string: callx0
0x10004B68E	0x00000008	[  6] literal string: closure
0x10004B696	0x00000004	[  6] literal string: clz
0x10004B69A	0x00000004	[  6] literal string: cmp
0x10004B69E	0x00000008	[  6] literal string: complex
0x10004B6A6	0x00000006	[  6] literal string: cpsid
0x10004B6AC	0x00000006	[  6] literal string: cpsie
0x10004B6B2	0x00000005	[  6] literal string: data
0x10004B6B7	0x00000007	[  6] literal string: decode
0x10004B6BE	0x00000008	[  6] literal string: default
0x10004B6C6	0x00000008	[  6] literal string: delattr
0x10004B6CE	0x00000008	[  6] literal string: deleter
0x10004B6D6	0x0000000A	[  6] literal string: dict_view
0x10004B6E0	0x0000000B	[  6] literal string: difference
0x10004B6EB	0x00000012	[  6] literal string: difference_update
0x10004B6FD	0x00000008	[  6] literal string: discard
0x10004B705	0x00000004	[  6] literal string: doc
0x10004B709	0x00000007	[  6] literal string: encode
0x10004B710	0x0000000A	[  6] literal string: enumerate
0x10004B71A	0x00000006	[  6] literal string: errno
0x10004B720	0x00000007	[  6] literal string: filter
0x10004B727	0x00000006	[  6] literal string: float
0x10004B72D	0x00000009	[  6] literal string: fromkeys
0x10004B736	0x00000009	[  6] literal string: function
0x10004B73F	0x0000000A	[  6] literal string: generator
0x10004B749	0x00000007	[  6] literal string: getter
0x10004B750	0x0000000A	[  6] literal string: heap_lock
0x10004B75A	0x0000000C	[  6] literal string: heap_unlock
0x10004B766	0x00000004	[  6] literal string: hex
0x10004B76A	0x00000005	[  6] literal string: imag
0x10004B76F	0x0000000D	[  6] literal string: intersection
0x10004B77C	0x00000014	[  6] literal string: intersection_update
0x10004B790	0x0000000B	[  6] literal string: isdisjoint
0x10004B79B	0x00000009	[  6] literal string: issubset
0x10004B7A4	0x0000000B	[  6] literal string: issuperset
0x10004B7AF	0x00000009	[  6] literal string: iterable
0x10004B7B8	0x00000009	[  6] literal string: iterator
0x10004B7C1	0x00000002	[  6] literal string: j
0x10004B7C3	0x00000003	[  6] literal string: jx
0x10004B7C6	0x00000006	[  6] literal string: l16si
0x10004B7CC	0x00000006	[  6] literal string: l16ui
0x10004B7D2	0x00000005	[  6] literal string: l32i
0x10004B7D7	0x00000005	[  6] literal string: l8ui
0x10004B7DC	0x00000006	[  6] literal string: label
0x10004B7E2	0x00000004	[  6] literal string: ldr
0x10004B7E6	0x00000005	[  6] literal string: ldrb
0x10004B7EB	0x00000006	[  6] literal string: ldrex
0x10004B7F1	0x00000005	[  6] literal string: ldrh
0x10004B7F6	0x00000004	[  6] literal string: lsl
0x10004B7FA	0x00000004	[  6] literal string: lsr
0x10004B7FE	0x00000004	[  6] literal string: max
0x10004B802	0x00000004	[  6] literal string: min
0x10004B806	0x00000007	[  6] literal string: module
0x10004B80D	0x00000004	[  6] literal string: mov
0x10004B811	0x00000006	[  6] literal string: mov_n
0x10004B817	0x00000005	[  6] literal string: movi
0x10004B81C	0x00000005	[  6] literal string: movt
0x10004B821	0x00000005	[  6] literal string: movw
0x10004B826	0x00000006	[  6] literal string: movwt
0x10004B82C	0x00000004	[  6] literal string: mrs
0x10004B830	0x00000005	[  6] literal string: mull
0x10004B835	0x00000007	[  6] literal string: native
0x10004B83C	0x00000004	[  6] literal string: nop
0x10004B840	0x00000004	[  6] literal string: oct
0x10004B844	0x0000000A	[  6] literal string: opt_level
0x10004B84E	0x00000004	[  6] literal string: or_
0x10004B852	0x00000005	[  6] literal string: pack
0x10004B857	0x0000000A	[  6] literal string: pack_into
0x10004B861	0x0000000B	[  6] literal string: pend_throw
0x10004B86C	0x00000009	[  6] literal string: property
0x10004B875	0x00000004	[  6] literal string: ptr
0x10004B879	0x00000006	[  6] literal string: ptr16
0x10004B87F	0x00000006	[  6] literal string: ptr32
0x10004B885	0x00000005	[  6] literal string: ptr8
0x10004B88A	0x00000005	[  6] literal string: push
0x10004B88F	0x00000005	[  6] literal string: rbit
0x10004B894	0x00000005	[  6] literal string: real
0x10004B899	0x00000006	[  6] literal string: ret_n
0x10004B89F	0x00000009	[  6] literal string: reversed
0x10004B8A8	0x00000005	[  6] literal string: s16i
0x10004B8AD	0x00000005	[  6] literal string: s32i
0x10004B8B2	0x00000004	[  6] literal string: s8i
0x10004B8B6	0x00000005	[  6] literal string: sdiv
0x10004B8BB	0x00000007	[  6] literal string: setter
0x10004B8C2	0x00000006	[  6] literal string: slice
0x10004B8C8	0x00000005	[  6] literal string: strb
0x10004B8CD	0x00000006	[  6] literal string: strex
0x10004B8D3	0x00000005	[  6] literal string: strh
0x10004B8D8	0x00000004	[  6] literal string: sub
0x10004B8DC	0x00000015	[  6] literal string: symmetric_difference
0x10004B8F1	0x0000001C	[  6] literal string: symmetric_difference_update
0x10004B90D	0x00000005	[  6] literal string: udiv
0x10004B912	0x00000005	[  6] literal string: uint
0x10004B917	0x00000006	[  6] literal string: union
0x10004B91D	0x00000007	[  6] literal string: unpack
0x10004B924	0x0000000C	[  6] literal string: unpack_from
0x10004B930	0x00000008	[  6] literal string: ustruct
0x10004B938	0x00000005	[  6] literal string: vcmp
0x10004B93D	0x0000000D	[  6] literal string: vcvt_f32_s32
0x10004B94A	0x0000000D	[  6] literal string: vcvt_s32_f32
0x10004B957	0x00000006	[  6] literal string: viper
0x10004B95D	0x00000005	[  6] literal string: vldr
0x10004B962	0x00000005	[  6] literal string: vmov
0x10004B967	0x00000005	[  6] literal string: vmrs
0x10004B96C	0x00000005	[  6] literal string: vneg
0x10004B971	0x00000006	[  6] literal string: vsqrt
0x10004B977	0x00000005	[  6] literal string: vstr
0x10004B97C	0x00000004	[  6] literal string: wfi
0x10004B980	0x00000004	[  6] literal string: xor
0x10004B984	0x0000000E	[  6] literal string: name too long
0x10004B992	0x0000000A	[  6] literal string: find_qstr
0x10004B99C	0x00000007	[  6] literal string: qstr.c
0x10004B9A3	0x0000000F	[  6] literal string: *q < pool->len
0x10004B9B2	0x0000000E	[  7] literal string: vstr_add_char
0x10004B9C0	0x00000007	[  7] literal string: vstr.c
0x10004B9C7	0x0000000D	[  7] literal string: c < 0x110000
0x10004B9D4	0x00000010	[  8] literal string: mp_print_mp_int
0x10004B9E4	0x0000000A	[  8] literal string: mpprint.c
0x10004B9EE	0x00000033	[  8] literal string: base == 2 || base == 8 || base == 10 || base == 16
0x10004BA21	0x00000005	[  8] literal string: true
0x10004BA26	0x00000006	[  8] literal string: false
0x10004BA2C	0x00000007	[  8] literal string: (null)
0x10004BA33	0x0000000B	[  8] literal string: mp_vprintf
0x10004BA3E	0x00000027	[  8] literal string: *fmt == '%' || !"unsupported fmt char"
0x10004BA65	0x00000011	[ 10] literal string: mpz_set_from_str
0x10004BA76	0x00000006	[ 10] literal string: mpz.c
0x10004BA7C	0x0000000B	[ 10] literal string: base <= 36
0x10004BA87	0x00000010	[ 10] literal string: mpz_divmod_inpl
0x10004BA97	0x00000012	[ 10] literal string: !mpz_is_zero(rhs)
0x10004BAA9	0x00000010	[ 10] literal string: mpz_as_str_inpl
0x10004BAB9	0x0000000C	[ 10] literal string: str != NULL
0x10004BAC5	0x00000018	[ 10] literal string: 2 <= base && base <= 32
0x10004BADD	0x0000000D	[ 10] literal string: mpz_need_dig
0x10004BAEA	0x0000000E	[ 10] literal string: !z->fixed_dig
0x10004BAF8	0x0000000B	[ 10] literal string: mpn_or_neg
0x10004BB03	0x0000000C	[ 10] literal string: carryi == 0
0x10004BB0F	0x0000000A	[ 10] literal string: mpz_clone
0x10004BB19	0x00000010	[ 10] literal string: src->alloc != 0
0x10004BB29	0x00000045	[ 12] literal string: ()[]{},;~:e=<e=c<e=>e=c>e=*e=c*e=+e=-e=e>&e=|e=/e=c/e=%e=^e=@e==e=!.
0x10004BB6E	0x00000009	[ 12] literal string: .format(
0x10004BB77	0x00000015	[ 12] literal string: unicode name escapes
0x10004BB8C	0x00000006	[ 12] literal string: False
0x10004BB92	0x00000005	[ 12] literal string: True
0x10004BB97	0x0000000A	[ 12] literal string: __debug__
0x10004BBA1	0x00000004	[ 12] literal string: and
0x10004BBA5	0x00000003	[ 12] literal string: as
0x10004BBA8	0x00000007	[ 12] literal string: assert
0x10004BBAF	0x00000006	[ 12] literal string: async
0x10004BBB5	0x00000006	[ 12] literal string: await
0x10004BBBB	0x00000006	[ 12] literal string: break
0x10004BBC1	0x00000006	[ 12] literal string: class
0x10004BBC7	0x00000009	[ 12] literal string: continue
0x10004BBD0	0x00000004	[ 12] literal string: def
0x10004BBD4	0x00000004	[ 12] literal string: del
0x10004BBD8	0x00000005	[ 12] literal string: elif
0x10004BBDD	0x00000005	[ 12] literal string: else
0x10004BBE2	0x00000007	[ 12] literal string: except
0x10004BBE9	0x00000008	[ 12] literal string: finally
0x10004BBF1	0x00000004	[ 12] literal string: for
0x10004BBF5	0x00000005	[ 12] literal string: from
0x10004BBFA	0x00000007	[ 12] literal string: global
0x10004BC01	0x00000003	[ 12] literal string: if
0x10004BC04	0x00000007	[ 12] literal string: import
0x10004BC0B	0x00000003	[ 12] literal string: in
0x10004BC0E	0x00000003	[ 12] literal string: is
0x10004BC11	0x00000007	[ 12] literal string: lambda
0x10004BC18	0x00000009	[ 12] literal string: nonlocal
0x10004BC21	0x00000004	[ 12] literal string: not
0x10004BC25	0x00000003	[ 12] literal string: or
0x10004BC28	0x00000005	[ 12] literal string: pass
0x10004BC2D	0x00000006	[ 12] literal string: raise
0x10004BC33	0x00000007	[ 12] literal string: return
0x10004BC3A	0x00000004	[ 12] literal string: try
0x10004BC3E	0x00000006	[ 12] literal string: while
0x10004BC44	0x00000005	[ 12] literal string: with
0x10004BC49	0x00000006	[ 12] literal string: yield
0x10004BC4F	0x00000009	[ 13] literal string: mp_parse
0x10004BC58	0x00000008	[ 13] literal string: parse.c
0x10004BC60	0x00000016	[ 13] literal string: kind == RULE_ARG_RULE
0x10004BC76	0x00000006	[ 13] literal string: i > 0
0x10004BC7C	0x00000007	[ 13] literal string: i == n
0x10004BC83	0x00000031	[ 13] literal string: (rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST
0x10004BCB4	0x0000002C	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE
0x10004BCE0	0x00000007	[ 13] literal string: i >= 1
0x10004BCE7	0x00000012	[ 13] literal string: unexpected indent
0x10004BCF9	0x0000002E	[ 13] literal string: unindent doesn't match any outer indent level
0x10004BD27	0x00000013	[ 13] literal string: malformed f-string
0x10004BD3A	0x00000020	[ 13] literal string: raw f-strings are not supported
0x10004BD5A	0x0000000F	[ 13] literal string: invalid syntax
0x10004BD69	0x0000001D	[ 13] literal string: parser.result_stack_top == 1
0x10004BD86	0x00000013	[ 13] literal string: push_rule_from_arg
0x10004BD99	0x0000005F	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE
0x10004BDF8	0x0000000C	[ 13] literal string: peek_result
0x10004BE04	0x0000001F	[ 13] literal string: parser->result_stack_top > pos
0x10004BE23	0x0000000B	[ 13] literal string: pop_result
0x10004BE2E	0x0000001D	[ 13] literal string: parser->result_stack_top > 0
0x10004BE4B	0x00000011	[ 13] literal string: push_result_rule
0x10004BE5C	0x0000000E	[ 13] literal string: num_args == 2
0x10004BE6A	0x0000001D	[ 13] literal string: pn == peek_result(parser, 0)
0x10004BE87	0x0000000F	[ 13] literal string: fold_constants
0x10004BE96	0x00000034	[ 13] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
0x10004BECA	0x0000000F	[ 13] literal string: not a constant
0x10004BED9	0x0000001B	[ 13] literal string: elem->value == MP_OBJ_NULL
0x10004BEF4	0x00000024	[ 13] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
0x10004BF18	0x0000001D	[ 13] literal string: mp_parse_node_convert_to_obj
0x10004BF35	0x0000001B	[ 13] literal string: mp_parse_node_is_const(pn)
0x10004BF50	0x00000033	[ 13] literal string: MP_PARSE_NODE_LEAF_KIND(pn) == MP_PARSE_NODE_TOKEN
0x10004BF83	0x00000019	[ 13] literal string: arg == MP_TOKEN_ELLIPSIS
0x10004BF9C	0x00000032	[ 13] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_atom_paren)
0x10004BFCE	0x00000040	[ 13] literal string: MP_PARSE_NODE_IS_NULL(((mp_parse_node_struct_t *)pn)->nodes[0])
0x10004C00E	0x0000000C	[ 13] literal string: build_tuple
0x10004C01A	0x0000002E	[ 13] literal string: peek_rule(parser, 0) == RULE_testlist_comp_3b
0x10004C048	0x0000002B	[ 13] literal string: peek_rule(parser, 1) == RULE_testlist_comp
0x10004C073	0x0000000A	[ 13] literal string: peek_rule
0x10004C07D	0x0000001B	[ 13] literal string: parser->rule_stack_top > n
0x10004C098	0x0000000A	[ 14] literal string: scope_new
0x10004C0A2	0x00000008	[ 14] literal string: scope.c
0x10004C0AA	0x0000001C	[ 14] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
0x10004C0C6	0x0000001C	[ 14] literal string: scope_close_over_in_parents
0x10004C0E2	0x00000012	[ 14] literal string: s->parent != NULL
0x10004C0F4	0x0000003F	[ 14] literal string: id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL
0x10004C133	0x00000024	[ 15] literal string: inline assembler must be a function
0x10004C157	0x00000019	[ 15] literal string: compile_scope_inline_asm
0x10004C170	0x0000000A	[ 15] literal string: compile.c
0x10004C17A	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(scope->pn)
0x10004C19D	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef
0x10004C1CA	0x0000000D	[ 15] literal string: unknown type
0x10004C1D7	0x00000028	[ 15] literal string: return annotation must be an identifier
0x10004C1FF	0x00000022	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(nodes[i])
0x10004C221	0x00000023	[ 15] literal string: expecting an assembler instruction
0x10004C244	0x00000028	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns2->nodes[0])
0x10004C26C	0x0000001C	[ 15] literal string: 'label' requires 1 argument
0x10004C288	0x00000010	[ 15] literal string: label redefined
0x10004C298	0x0000001C	[ 15] literal string: 'align' requires 1 argument
0x10004C2B4	0x00000025	[ 15] literal string: 'data' requires at least 2 arguments
0x10004C2D9	0x00000022	[ 15] literal string: 'data' requires integer arguments
0x10004C2FB	0x0000000E	[ 15] literal string: compile_scope
0x10004C309	0x0000001C	[ 15] literal string: scope->kind == SCOPE_MODULE
0x10004C325	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3
0x10004C34E	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2
0x10004C377	0x00000039	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for)
0x10004C3B0	0x0000001B	[ 15] literal string: scope->kind == SCOPE_CLASS
0x10004C3CB	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef
0x10004C3F9	0x0000000B	[ 15] literal string: id != NULL
0x10004C404	0x0000001C	[ 15] literal string: comp->cur_except_level == 0
0x10004C420	0x0000000D	[ 15] literal string: compile_node
0x10004C42D	0x00000032	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object
0x10004C45F	0x00000012	[ 15] literal string: compile_decorated
0x10004C471	0x00000035	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)
0x10004C4A6	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_ID(name_nodes[j])
0x10004C4C9	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns_body->nodes[0])
0x10004C4F5	0x00000033	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef
0x10004C528	0x0000001E	[ 15] literal string: invalid micropython decorator
0x10004C546	0x0000000D	[ 15] literal string: invalid arch
0x10004C553	0x0000001E	[ 15] literal string: compile_funcdef_lambdef_param
0x10004C571	0x0000001F	[ 15] literal string: pn_kind == PN_varargslist_name
0x10004C590	0x0000002E	[ 15] literal string: non-default argument follows default argument
0x10004C5BE	0x00000019	[ 15] literal string: close_over_variables_etc
0x10004C5D7	0x00000014	[ 15] literal string: n_pos_defaults >= 0
0x10004C5EB	0x00000013	[ 15] literal string: n_kw_defaults >= 0
0x10004C5FE	0x0000000F	[ 15] literal string: * arg after **
0x10004C60D	0x0000000E	[ 15] literal string: too many args
0x10004C61B	0x00000021	[ 15] literal string: LHS of keyword arg must be an id
0x10004C63C	0x00000018	[ 15] literal string: positional arg after **
0x10004C654	0x00000021	[ 15] literal string: positional arg after keyword arg
0x10004C675	0x0000001B	[ 15] literal string: can't assign to expression
0x10004C690	0x00000016	[ 15] literal string: compile_comprehension
0x10004C6A6	0x00000012	[ 15] literal string: compile_expr_stmt
0x10004C6B8	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0])
0x10004C6DF	0x00000009	[ 15] literal string: c_assign
0x10004C6E8	0x0000001B	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn)
0x10004C703	0x0000003E	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)
0x10004C741	0x00000013	[ 15] literal string: c_assign_atom_expr
0x10004C754	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1])
0x10004C780	0x0000001A	[ 15] literal string: multiple *x in assignment
0x10004C79A	0x0000000B	[ 15] literal string: c_del_stmt
0x10004C7A5	0x00000033	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp)
0x10004C7D8	0x00000018	[ 15] literal string: can't delete expression
0x10004C7F0	0x00000020	[ 15] literal string: 'break'/'continue' outside loop
0x10004C810	0x00000018	[ 15] literal string: compile_break_cont_stmt
0x10004C828	0x0000003C	[ 15] literal string: comp->cur_except_level >= comp->break_continue_except_level
0x10004C864	0x0000001A	[ 15] literal string: 'return' outside function
0x10004C87E	0x0000000A	[ 15] literal string: c_if_cond
0x10004C888	0x0000000F	[ 15] literal string: do_import_name
0x10004C897	0x00000031	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)
0x10004C8C8	0x00000014	[ 15] literal string: compile_import_from
0x10004C8DC	0x00000029	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn_import_source)
0x10004C905	0x0000001D	[ 15] literal string: import * not at module level
0x10004C922	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name)
0x10004C95F	0x00000025	[ 15] literal string: can't declare nonlocal in outer code
0x10004C984	0x0000001F	[ 15] literal string: identifier redefined as global
0x10004C9A3	0x0000001E	[ 15] literal string: no binding for nonlocal found
0x10004C9C1	0x00000021	[ 15] literal string: identifier redefined as nonlocal
0x10004C9E2	0x00000013	[ 15] literal string: compile_async_stmt
0x10004C9F5	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[0])
0x10004CA1C	0x00000026	[ 15] literal string: async for/with outside async function
0x10004CA42	0x00000030	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns0) == PN_with_stmt
0x10004CA72	0x0000001E	[ 15] literal string: compile_decrease_except_level
0x10004CA90	0x0000001B	[ 15] literal string: comp->cur_except_level > 0
0x10004CAAB	0x00000018	[ 15] literal string: compile_async_with_stmt
0x10004CAC3	0x00000006	[ 15] literal string: n > 0
0x10004CAC9	0x00000010	[ 15] literal string: compile_if_stmt
0x10004CAD9	0x0000003A	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)
0x10004CB13	0x00000021	[ 15] literal string: compile_for_stmt_optimised_range
0x10004CB34	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_SMALL_INT(pn_step)
0x10004CB58	0x00000011	[ 15] literal string: compile_try_stmt
0x10004CB69	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
0x10004CB90	0x00000014	[ 15] literal string: compile_try_finally
0x10004CBA4	0x0000001F	[ 15] literal string: MP_PARSE_NODE_IS_NULL(pn_else)
0x10004CBC3	0x00000013	[ 15] literal string: compile_try_except
0x10004CBD6	0x00000040	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)
0x10004CC16	0x0000001E	[ 15] literal string: default 'except' must be last
0x10004CC34	0x00000012	[ 15] literal string: compile_with_stmt
0x10004CC46	0x00000015	[ 15] literal string: compile_test_if_expr
0x10004CC5B	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else)
0x10004CC98	0x00000013	[ 15] literal string: compile_comparison
0x10004CCAB	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])
0x10004CCD2	0x00000016	[ 15] literal string: kind == PN_comp_op_is
0x10004CCE8	0x0000001D	[ 15] literal string: *x must be assignment target
0x10004CD05	0x00000011	[ 15] literal string: compile_factor_2
0x10004CD16	0x00000019	[ 15] literal string: 'await' outside function
0x10004CD2F	0x00000018	[ 15] literal string: super() can't find self
0x10004CD47	0x00000013	[ 15] literal string: compile_atom_paren
0x10004CD5A	0x0000001A	[ 15] literal string: compile_atom_brace_helper
0x10004CD74	0x0000001D	[ 15] literal string: expecting key:value for dict
0x10004CD91	0x0000001F	[ 15] literal string: expecting just a value for set
0x10004CDB0	0x0000002F	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for
0x10004CDDF	0x00000012	[ 15] literal string: compile_subscript
0x10004CDF1	0x00000031	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_subscript_3
0x10004CE22	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_sliceop
0x10004CE4F	0x00000019	[ 15] literal string: 'yield' outside function
0x10004CE68	0x00000020	[ 15] literal string: compile_scope_func_lambda_param
0x10004CE88	0x00000037	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)
0x10004CEBF	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star
0x10004CEED	0x00000015	[ 15] literal string: argument name reused
0x10004CF02	0x00000012	[ 15] literal string: unknown type '%q'
0x10004CF14	0x00000021	[ 15] literal string: annotation must be an identifier
0x10004CF35	0x00000018	[ 15] literal string: compile_scope_comp_iter
0x10004CF4D	0x0000004C	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t *)pn_iter) == PN_comp_for
0x10004CF99	0x00000015	[ 15] literal string: scope_compute_things
0x10004CFAE	0x00000021	[ 15] literal string: !(id2->flags & ID_FLAG_IS_PARAM)
0x10004CFCF	0x00000015	[ 16] literal string: mp_emit_common_id_op
0x10004CFE4	0x0000000D	[ 16] literal string: emitcommon.c
0x10004CFF1	0x0000003F	[ 16] literal string: id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE
0x10004D030	0x00000014	[ 17] literal string: mp_emit_bc_end_pass
0x10004D044	0x00000009	[ 17] literal string: emitbc.c
0x10004D04D	0x00000016	[ 17] literal string: emit->stack_size == 0
0x10004D063	0x00000015	[ 17] literal string: id->local_num <= 255
0x10004D078	0x0000002F	[ 17] literal string: emit->code_info_offset <= emit->code_info_size
0x10004D0A7	0x0000002D	[ 17] literal string: emit->bytecode_offset <= emit->bytecode_size
0x10004D0D4	0x00000012	[ 17] literal string: bytecode overflow
0x10004D0E6	0x0000001D	[ 17] literal string: mp_emit_bc_adjust_stack_size
0x10004D103	0x00000028	[ 17] literal string: (mp_int_t)emit->stack_size + delta >= 0
0x10004D12B	0x00000018	[ 17] literal string: mp_emit_bc_label_assign
0x10004D143	0x00000019	[ 17] literal string: l < emit->max_num_labels
0x10004D15C	0x00000054	[ 17] literal string: emit->pass == MP_PASS_STACK_SIZE || emit->bytecode_offset <= emit->label_offsets[l]
0x10004D1B0	0x00000020	[ 17] literal string: mp_emit_bc_load_const_small_int
0x10004D1D0	0x00000017	[ 17] literal string: MP_SMALL_INT_FITS(arg)
0x10004D1E7	0x00000018	[ 17] literal string: mp_emit_bc_make_closure
0x10004D1FF	0x00000015	[ 17] literal string: n_closed_over <= 255
0x10004D214	0x00000019	[ 17] literal string: mp_emit_bc_raise_varargs
0x10004D22D	0x0000000C	[ 17] literal string: n_args <= 2
0x10004D239	0x00000020	[ 17] literal string: emit_get_cur_to_write_code_info
0x10004D259	0x00000044	[ 17] literal string: emit->code_info_offset + num_bytes_to_write <= emit->code_info_size
0x10004D29D	0x00000021	[ 17] literal string: emit_write_code_info_bytes_lines
0x10004D2BE	0x00000027	[ 17] literal string: bytes_to_skip > 0 || lines_to_skip > 0
0x10004D2E5	0x0000001F	[ 17] literal string: emit_get_cur_to_write_bytecode
0x10004D304	0x00000042	[ 17] literal string: emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size
0x10004D346	0x0000001F	[ 17] literal string: emit_write_bytecode_byte_label
0x10004D365	0x00000022	[ 17] literal string: is_signed || bytecode_offset >= 0
0x10004D387	0x00000030	[ 17] literal string: 0 <= bytecode_offset && bytecode_offset <= 0x7f
0x10004D3B7	0x00000017	[ 18] literal string: mp_asm_base_start_pass
0x10004D3CE	0x0000000A	[ 18] literal string: asmbase.c
0x10004D3D8	0x00000016	[ 18] literal string: as->code_base != NULL
0x10004D3EE	0x00000023	[ 18] literal string: mp_asm_base_get_cur_to_write_bytes
0x10004D411	0x00000036	[ 18] literal string: as->code_offset + num_bytes_to_write <= as->code_size
0x10004D447	0x00000019	[ 18] literal string: mp_asm_base_label_assign
0x10004D460	0x0000001B	[ 18] literal string: label < as->max_num_labels
0x10004D47B	0x00000027	[ 18] literal string: as->label_offsets[label] == (size_t)-1
0x10004D4A2	0x0000002C	[ 18] literal string: as->label_offsets[label] == as->code_offset
0x10004D4CE	0x00000018	[ 19] literal string: asm_x64_test_r8_with_r8
0x10004D4E6	0x00000009	[ 19] literal string: asmx64.c
0x10004D4EF	0x0000000E	[ 19] literal string: src_r64_a < 8
0x10004D4FD	0x0000000E	[ 19] literal string: src_r64_b < 8
0x10004D50B	0x00000011	[ 19] literal string: asm_x64_setcc_r8
0x10004D51C	0x0000000C	[ 19] literal string: dest_r8 < 8
0x10004D528	0x00000010	[ 19] literal string: asm_x64_jmp_reg
0x10004D538	0x0000000C	[ 19] literal string: src_r64 < 8
0x10004D544	0x0000000E	[ 19] literal string: asm_x64_entry
0x10004D552	0x00000010	[ 19] literal string: num_locals >= 0
0x10004D562	0x00000011	[ 19] literal string: asm_x64_call_ind
0x10004D573	0x0000000D	[ 19] literal string: temp_r64 < 8
0x10004D580	0x0000000F	[ 19] literal string: get_label_dest
0x10004D58F	0x00000020	[ 19] literal string: label < as->base.max_num_labels
0x10004D5AF	0x00000017	[ 20] literal string: emit_native_start_pass
0x10004D5C6	0x0000000D	[ 20] literal string: emitnative.c
0x10004D5D3	0x00000028	[ 20] literal string: id->local_num < emit->local_vtype_alloc
0x10004D5FB	0x00000015	[ 20] literal string: emit_native_end_pass
0x10004D610	0x0000001A	[ 20] literal string: emit->exc_stack_size == 0
0x10004D62A	0x0000003B	[ 20] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
0x10004D665	0x0000000D	[ 20] literal string: adjust_stack
0x10004D672	0x00000033	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
0x10004D6A5	0x00000052	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
0x10004D6F7	0x00000022	[ 20] literal string: local '%q' used before type known
0x10004D719	0x00000015	[ 20] literal string: conversion to object
0x10004D72E	0x0000002C	[ 20] literal string: local '%q' has type '%q' but source is '%q'
0x10004D75A	0x00000019	[ 20] literal string: emit_native_store_global
0x10004D773	0x00000015	[ 20] literal string: vtype == VTYPE_PYOBJ
0x10004D788	0x0000001C	[ 20] literal string: emit_native_leave_exc_stack
0x10004D7A4	0x00000019	[ 20] literal string: emit->exc_stack_size > 0
0x10004D7BD	0x00000018	[ 20] literal string: emit_native_import_name
0x10004D7D5	0x0000001E	[ 20] literal string: vtype_fromlist == VTYPE_PYOBJ
0x10004D7F3	0x0000001B	[ 20] literal string: vtype_level == VTYPE_PYOBJ
0x10004D80E	0x00000018	[ 20] literal string: emit_native_import_from
0x10004D826	0x0000001C	[ 20] literal string: vtype_module == VTYPE_PYOBJ
0x10004D842	0x00000018	[ 20] literal string: emit_native_import_star
0x10004D85A	0x00000018	[ 20] literal string: emit_native_load_method
0x10004D872	0x0000001A	[ 20] literal string: vtype_base == VTYPE_PYOBJ
0x10004D88C	0x00000026	[ 20] literal string: emit_get_stack_pointer_to_reg_for_pop
0x10004D8B2	0x00000018	[ 20] literal string: si->kind == STACK_VALUE
0x10004D8CA	0x00000015	[ 20] literal string: can't load from '%q'
0x10004D8DF	0x0000001B	[ 20] literal string: can't load with '%q' index
0x10004D8FA	0x00000011	[ 20] literal string: can't store '%q'
0x10004D90B	0x00000014	[ 20] literal string: can't store to '%q'
0x10004D91F	0x0000001C	[ 20] literal string: can't store with '%q' index
0x10004D93B	0x0000001A	[ 20] literal string: emit_native_delete_subscr
0x10004D955	0x0000001B	[ 20] literal string: vtype_index == VTYPE_PYOBJ
0x10004D970	0x00000016	[ 20] literal string: emit_native_load_attr
0x10004D986	0x00000017	[ 20] literal string: emit_native_store_attr
0x10004D99D	0x00000018	[ 20] literal string: emit_native_delete_attr
0x10004D9B5	0x00000028	[ 20] literal string: can't implicitly convert '%q' to 'bool'
0x10004D9DD	0x00000017	[ 20] literal string: emit_native_setup_with
0x10004D9F4	0x0000001A	[ 20] literal string: emit_native_pop_exc_stack
0x10004DA0E	0x00000016	[ 20] literal string: e->is_active == false
0x10004DA24	0x00000015	[ 20] literal string: emit_native_get_iter
0x10004DA39	0x0000001C	[ 20] literal string: unary op %q not implemented
0x10004DA55	0x00000021	[ 20] literal string: div/mod not implemented for uint
0x10004DA76	0x0000001B	[ 20] literal string: comparison of int and uint
0x10004DA91	0x0000001D	[ 20] literal string: binary op %q not implemented
0x10004DAAE	0x00000029	[ 20] literal string: can't do binary op between '%q' and '%q'
0x10004DAD7	0x00000018	[ 20] literal string: emit_native_build_slice
0x10004DAEF	0x0000001B	[ 20] literal string: vtype_start == VTYPE_PYOBJ
0x10004DB0A	0x0000001A	[ 20] literal string: vtype_stop == VTYPE_PYOBJ
0x10004DB24	0x0000000C	[ 20] literal string: n_args == 3
0x10004DB30	0x0000001A	[ 20] literal string: vtype_step == VTYPE_PYOBJ
0x10004DB4A	0x00000016	[ 20] literal string: emit_native_store_map
0x10004DB60	0x00000019	[ 20] literal string: vtype_key == VTYPE_PYOBJ
0x10004DB79	0x0000001B	[ 20] literal string: vtype_value == VTYPE_PYOBJ
0x10004DB94	0x00000019	[ 20] literal string: vtype_map == VTYPE_PYOBJ
0x10004DBAD	0x00000017	[ 20] literal string: emit_native_store_comp
0x10004DBC4	0x0000001A	[ 20] literal string: vtype_item == VTYPE_PYOBJ
0x10004DBDE	0x00000020	[ 20] literal string: vtype_collection == VTYPE_PYOBJ
0x10004DBFE	0x0000001C	[ 20] literal string: emit_native_unpack_sequence
0x10004DC1A	0x00000016	[ 20] literal string: emit_native_unpack_ex
0x10004DC30	0x0000001A	[ 20] literal string: emit_native_call_function
0x10004DC4A	0x00000024	[ 20] literal string: n_positional == 1 && n_keyword == 0
0x10004DC6E	0x0000000C	[ 20] literal string: !star_flags
0x10004DC7A	0x00000008	[ 20] literal string: casting
0x10004DC82	0x00000019	[ 20] literal string: vtype_fun == VTYPE_PYOBJ
0x10004DC9B	0x00000022	[ 20] literal string: return expected '%q' but got '%q'
0x10004DCBD	0x00000019	[ 20] literal string: emit_native_return_value
0x10004DCD6	0x0000001A	[ 20] literal string: emit_native_raise_varargs
0x10004DCF0	0x0000000C	[ 20] literal string: n_args == 1
0x10004DCFC	0x00000015	[ 20] literal string: must raise an object
0x10004DD11	0x0000000D	[ 20] literal string: native yield
0x10004DD1E	0x0000000E	[ 21] literal string: asm_x86_entry
0x10004DD2C	0x00000009	[ 21] literal string: asmx86.c
0x10004DD35	0x00000011	[ 21] literal string: asm_x86_call_ind
0x10004DD46	0x0000000C	[ 21] literal string: n_args <= 4
0x10004DD52	0x00000010	[ 23] literal string: asm_thumb_entry
0x10004DD62	0x0000000B	[ 23] literal string: asmthumb.c
0x10004DD6D	0x00000013	[ 23] literal string: asm_thumb_format_4
0x10004DD80	0x0000001C	[ 23] literal string: rlo_dest < ASM_THUMB_REG_R8
0x10004DD9C	0x0000001B	[ 23] literal string: rlo_src < ASM_THUMB_REG_R8
0x10004DDB7	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i16
0x10004DDCD	0x0000001D	[ 23] literal string: reg_dest < ASM_THUMB_REG_R15
0x10004DDEA	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i32
0x10004DE00	0x0000001C	[ 23] literal string: reg_dest < ASM_THUMB_REG_R8
0x10004DE1C	0x0000003D	[ 23] literal string: !as->base.code_base || !(3u & (uintptr_t)as->base.code_base)
0x10004DE59	0x00000020	[ 23] literal string: asm_thumb_mov_reg_i32_optimised
0x10004DE79	0x00000010	[ 23] literal string: clz + ctz <= 32
0x10004DE89	0x00000018	[ 23] literal string: asm_thumb_mov_local_reg
0x10004DEA1	0x00000018	[ 23] literal string: asm_thumb_mov_reg_local
0x10004DEB9	0x0000001D	[ 23] literal string: asm_thumb_mov_reg_local_addr
0x10004DED6	0x00000035	[ 23] literal string: as->base.pass < MP_ASM_PASS_EMIT || word_offset >= 0
0x10004DF0B	0x00000016	[ 23] literal string: native method too big
0x10004DF21	0x00000013	[ 23] literal string: asm_thumb_bcc_rel9
0x10004DF34	0x00000011	[ 23] literal string: SIGNED_FIT9(rel)
0x10004DF45	0x00000012	[ 23] literal string: asm_thumb_b_rel12
0x10004DF57	0x00000012	[ 23] literal string: SIGNED_FIT12(rel)
0x10004DF69	0x00000013	[ 23] literal string: asm_thumb_format_3
0x10004DF7C	0x0000000B	[ 23] literal string: asmthumb.h
0x10004DF87	0x00000017	[ 23] literal string: rlo < ASM_THUMB_REG_R8
0x10004DF9E	0x0000001A	[ 23] literal string: asm_thumb_mov_local_check
0x10004DFB8	0x00000011	[ 23] literal string: word_offset >= 0
0x10004DFC9	0x00000022	[ 23] literal string: too many locals for native method
0x10004DFEB	0x00000014	[ 23] literal string: asm_thumb_format_11
0x10004DFFF	0x0000001D	[ 23] literal string: asm_thumb_add_reg_reg_offset
0x10004E01C	0x00000002	[ 23] literal string: 0
0x10004E01E	0x00000033	[ 25] literal string: can only have up to 4 parameters to Thumb assembly
0x10004E051	0x00000032	[ 25] literal string: parameters must be registers in sequence r0 to r3
0x10004E083	0x00000018	[ 25] literal string: emit_inline_thumb_label
0x10004E09B	0x00000012	[ 25] literal string: emitinlinethumb.c
0x10004E0AD	0x00000021	[ 25] literal string: label_num < emit->max_num_labels
0x10004E0CE	0x0000000A	[ 25] literal string: APSR_nzcv
0x10004E0D8	0x00000006	[ 25] literal string: FPSCR
0x10004E0DE	0x00000035	[ 25] literal string: unsupported Thumb instruction '%s' with %d arguments
0x10004E113	0x00000014	[ 25] literal string: branch not in range
0x10004E127	0x00000019	[ 25] literal string: '%s' expects at most r%d
0x10004E140	0x0000001D	[ 25] literal string: '%s' expects an FPU register
0x10004E15D	0x00000018	[ 25] literal string: '%s' expects a register
0x10004E175	0x0000002B	[ 25] literal string: '%s' expects an address of the form [a, b]
0x10004E1A0	0x00000018	[ 25] literal string: '%s' expects an integer
0x10004E1B8	0x0000002B	[ 25] literal string: '%s' integer 0x%x doesn't fit in mask 0x%x
0x10004E1E3	0x00000015	[ 25] literal string: '%s' expects a label
0x10004E1F8	0x00000017	[ 25] literal string: label '%q' not defined
0x10004E20F	0x00000010	[ 25] literal string: get_arg_reglist
0x10004E21F	0x00000029	[ 25] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 1
0x10004E248	0x0000001B	[ 25] literal string: '%s' expects {r0, r1, ...}
0x10004E263	0x00000020	[ 25] literal string: '%s' expects a special register
0x10004E283	0x00000013	[ 25] literal string: asm_thumb_format_1
0x10004E296	0x00000013	[ 25] literal string: asm_thumb_format_2
0x10004E2A9	0x0000000E	[ 26] literal string: asm_arm_entry
0x10004E2B7	0x00000009	[ 26] literal string: asmarm.c
0x10004E2C0	0x00000016	[ 26] literal string: asm_arm_mov_reg_pcrel
0x10004E2D6	0x00000012	[ 26] literal string: asm_arm_bcc_label
0x10004E2E8	0x0000000F	[ 26] literal string: asm_arm_bl_ind
0x10004E2F7	0x00000016	[ 26] literal string: fun_id < (0x1000 / 4)
0x10004E30D	0x00000013	[ 26] literal string: asm_arm_op_mul_reg
0x10004E320	0x00000009	[ 26] literal string: rd != rm
0x10004E329	0x0000002C	[ 26] literal string: asm_arm_bcc: branch does not fit in 24 bits
0x10004E355	0x0000000D	[ 28] literal string: asm overflow
0x10004E362	0x0000000C	[ 28] literal string: asmxtensa.c
0x10004E36E	0x00000020	[ 28] literal string: ERROR: xtensa bccz out of range
0x10004E38E	0x0000001F	[ 28] literal string: ERROR: xtensa bcc out of range
0x10004E3AD	0x00000034	[ 30] literal string: can only have up to 4 parameters to Xtensa assembly
0x10004E3E1	0x00000032	[ 30] literal string: parameters must be registers in sequence a2 to a5
0x10004E413	0x00000019	[ 30] literal string: emit_inline_xtensa_label
0x10004E42C	0x00000013	[ 30] literal string: emitinlinextensa.c
0x10004E43F	0x00000036	[ 30] literal string: unsupported Xtensa instruction '%s' with %d arguments
0x10004E475	0x0000002A	[ 30] literal string: '%s' integer %d isn't within range %d..%d
0x10004E49F	0x00000010	[ 32] literal string: mp_format_float
0x10004E4AF	0x0000000E	[ 32] literal string: formatfloat.c
0x10004E4BD	0x00000022	[ 32] literal string: (size_t)(s + 1 - buf) <= buf_size
0x10004E4DF	0x00000023	[ 34] literal string: int() arg 2 must be >= 2 and <= 36
0x10004E502	0x0000002A	[ 34] literal string: invalid syntax for integer with base %d: 
0x10004E52C	0x0000001A	[ 34] literal string: invalid syntax for number
0x10004E546	0x0000001A	[ 34] literal string: mp_obj_new_exception_arg1
0x10004E560	0x00000006	[ 34] literal string: obj.h
0x10004E566	0x00000030	[ 34] literal string: exc_type->make_new == mp_obj_exception_make_new
0x10004E596	0x0000001B	[ 35] literal string: mp_emit_glue_assign_native
0x10004E5B1	0x0000000B	[ 35] literal string: emitglue.c
0x10004E5BC	0x00000058	[ 35] literal string: kind == MP_CODE_NATIVE_PY || kind == MP_CODE_NATIVE_VIPER || kind == MP_CODE_NATIVE_ASM
0x10004E614	0x00000009	[ 36] literal string: save_obj
0x10004E61D	0x00000011	[ 36] literal string: persistentcode.c
0x10004E62E	0x00000013	[ 36] literal string: mp_obj_is_float(o)
0x10004E641	0x0000000C	[ 37] literal string: mp_unary_op
0x10004E64D	0x0000000A	[ 37] literal string: runtime.c
0x10004E657	0x00000019	[ 37] literal string: op == MP_UNARY_OP_INVERT
0x10004E670	0x00000018	[ 37] literal string: can't convert %s to int
0x10004E688	0x0000001E	[ 37] literal string: unsupported type for %q: '%s'
0x10004E6A6	0x00000015	[ 37] literal string: negative shift count
0x10004E6BB	0x00000025	[ 37] literal string: unsupported types for %q: '%s', '%s'
0x10004E6E0	0x0000000F	[ 37] literal string: divide by zero
0x10004E6EF	0x0000001B	[ 37] literal string: '%s' object isn't callable
0x10004E70A	0x00000015	[ 37] literal string: mp_load_method_maybe
0x10004E71F	0x0000002E	[ 37] literal string: type->locals_dict->base.type == &mp_type_dict
0x10004E74D	0x0000000B	[ 37] literal string: mp_getiter
0x10004E758	0x00000005	[ 37] literal string: o_in
0x10004E75D	0x0000001B	[ 37] literal string: '%s' object isn't iterable
0x10004E778	0x0000001E	[ 37] literal string: '%s' object isn't an iterator
0x10004E796	0x00000029	[ 37] literal string: memory allocation failed, heap is locked
0x10004E7BF	0x0000002E	[ 37] literal string: memory allocation failed, allocating %u bytes
0x10004E7ED	0x00000025	[ 37] literal string: argument should be a '%q' not a '%q'
0x10004E812	0x00000016	[ 37] literal string: mp_map_slot_is_filled
0x10004E828	0x00000011	[ 37] literal string: pos < map->alloc
0x10004E839	0x00000028	[ 44] literal string: function doesn't take keyword arguments
0x10004E861	0x00000039	[ 44] literal string: function takes %d positional arguments but %d were given
0x10004E89A	0x00000032	[ 44] literal string: function missing %d required positional arguments
0x10004E8CC	0x0000002F	[ 44] literal string: function expected at most %d arguments, got %d
0x10004E8FB	0x00000017	[ 44] literal string: '%q' argument required
0x10004E912	0x00000011	[ 44] literal string: mp_arg_parse_all
0x10004E923	0x0000000B	[ 44] literal string: argcheck.c
0x10004E92E	0x00000034	[ 44] literal string: (allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ
0x10004E962	0x00000021	[ 44] literal string: extra positional arguments given
0x10004E983	0x0000001E	[ 44] literal string: extra keyword arguments given
0x10004E9A1	0x00000042	[ 44] literal string: keyword argument(s) not yet implemented - use normal args instead
0x10004E9E3	0x00000003	[ 45] literal string: : 
0x10004E9E6	0x0000000E	[ 46] literal string: mp_map_lookup
0x10004E9F4	0x00000006	[ 46] literal string: map.c
0x10004E9FA	0x0000002F	[ 46] literal string: !map->is_fixed || lookup_kind == MP_MAP_LOOKUP
0x10004EA29	0x00000006	[ 47] literal string: (nil)
0x10004EA2F	0x00000005	[ 47] literal string: <%q>
0x10004EA34	0x00000017	[ 47] literal string: mp_obj_print_exception
0x10004EA4B	0x00000006	[ 47] literal string: obj.c
0x10004EA51	0x0000000B	[ 47] literal string: n % 3 == 0
0x10004EA5C	0x00000024	[ 47] literal string: Traceback (most recent call last):\n
0x10004EA80	0x00000015	[ 47] literal string:   File "%q", line %d
0x10004EA95	0x00000009	[ 47] literal string: , in %q\n
0x10004EA9E	0x0000001A	[ 47] literal string: can't convert %s to float
0x10004EAB8	0x0000001C	[ 47] literal string: can't convert %s to complex
0x10004EAD4	0x00000022	[ 47] literal string: object '%s' isn't a tuple or list
0x10004EAF6	0x00000024	[ 47] literal string: %q indices must be integers, not %s
0x10004EB1A	0x00000016	[ 47] literal string: %q index out of range
0x10004EB30	0x0000002A	[ 47] literal string: '%s' object doesn't support item deletion
0x10004EB5A	0x00000020	[ 47] literal string: '%s' object isn't subscriptable
0x10004EB7A	0x0000002C	[ 47] literal string: '%s' object doesn't support item assignment
0x10004EBA6	0x00000025	[ 47] literal string: object with buffer protocol required
0x10004EBCB	0x0000000D	[ 48] literal string: array_append
0x10004EBD8	0x0000000B	[ 48] literal string: objarray.c
0x10004EBE3	0x00000090	[ 48] literal string: (MICROPY_PY_BUILTINS_BYTEARRAY && mp_obj_is_type(self_in, &mp_type_bytearray)) || (MICROPY_PY_ARRAY && mp_obj_is_type(self_in, &mp_type_array))
0x10004EC73	0x0000000D	[ 48] literal string: array_extend
0x10004EC80	0x0000000C	[ 48] literal string: bytearray(b
0x10004EC8C	0x0000000B	[ 48] literal string: array('%c'
0x10004EC97	0x00000004	[ 48] literal string: , [
0x10004EC9B	0x00000003	[ 48] literal string: , 
0x10004EC9E	0x00000002	[ 48] literal string: ]
0x10004ECA0	0x00000002	[ 48] literal string: )
0x10004ECA2	0x00000031	[ 48] literal string: only slices with step=1 (aka None) are supported
0x10004ECD3	0x0000000D	[ 48] literal string: array_subscr
0x10004ECE0	0x00000007	[ 48] literal string: sz > 0
0x10004ECE7	0x00000013	[ 53] literal string: mp_obj_complex_get
0x10004ECFA	0x0000000D	[ 53] literal string: objcomplex.c
0x10004ED07	0x0000002A	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_complex)
0x10004ED31	0x00000027	[ 53] literal string: can't truncate-divide a complex number
0x10004ED58	0x00000017	[ 53] literal string: complex divide by zero
0x10004ED6F	0x00000017	[ 53] literal string: 0.0 to a complex power
0x10004ED86	0x00000004	[ 53] literal string: %sj
0x10004ED8A	0x00000004	[ 53] literal string: (%s
0x10004ED8E	0x00000002	[ 53] literal string: +
0x10004ED90	0x00000005	[ 53] literal string: %sj)
0x10004ED95	0x00000026	[ 54] literal string: dict update sequence has wrong length
0x10004EDBB	0x0000000F	[ 54] literal string: dict_iter_next
0x10004EDCA	0x0000000A	[ 54] literal string: objdict.c
0x10004EDD4	0x0000001B	[ 54] literal string: map->used == 0 || i == max
0x10004EDEF	0x00000002	[ 54] literal string: {
0x10004EDF1	0x00000002	[ 54] literal string: }
0x10004EDF3	0x00000003	[ 54] literal string: ([
0x10004EDF6	0x00000003	[ 54] literal string: ])
0x10004EDF9	0x0000000B	[ 54] literal string: dict_items
0x10004EE04	0x0000000A	[ 54] literal string: dict_keys
0x10004EE0E	0x0000000C	[ 54] literal string: dict_values
0x10004EE1A	0x0000001F	[ 54] literal string: popitem(): dictionary is empty
0x10004EE39	0x0000000D	[ 54] literal string: dict_popitem
0x10004EE46	0x00000015	[ 56] literal string: mp_obj_new_exception
0x10004EE5B	0x0000000C	[ 56] literal string: objexcept.c
0x10004EE67	0x00000019	[ 56] literal string: mp_obj_new_exception_msg
0x10004EE80	0x0000001F	[ 56] literal string: mp_obj_new_exception_msg_vlist
0x10004EE9F	0x0000000C	[ 56] literal string: fmt != NULL
0x10004EEAB	0x00000015	[ 56] literal string: get_native_exception
0x10004EEC0	0x00000026	[ 56] literal string: mp_obj_is_exception_instance(self_in)
0x10004EEE6	0x00000011	[ 58] literal string: mp_obj_float_get
0x10004EEF7	0x0000000B	[ 58] literal string: objfloat.c
0x10004EF02	0x00000019	[ 58] literal string: mp_obj_is_float(self_in)
0x10004EF1B	0x00000003	[ 58] literal string: .0
0x10004EF1E	0x00000009	[ 59] literal string: objfun.c
0x10004EF27	0x00000013	[ 59] literal string: fun_builtin_1_call
0x10004EF3A	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
0x10004EF6A	0x00000013	[ 59] literal string: fun_builtin_2_call
0x10004EF7D	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
0x10004EFAD	0x00000013	[ 59] literal string: fun_builtin_3_call
0x10004EFC0	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
0x10004EFF0	0x00000015	[ 59] literal string: fun_builtin_var_call
0x10004F005	0x00000032	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
0x10004F037	0x00000019	[ 62] literal string: can't convert inf to int
0x10004F050	0x00000019	[ 62] literal string: can't convert NaN to int
0x10004F069	0x00000013	[ 62] literal string: mp_int_format_size
0x10004F07C	0x00000009	[ 62] literal string: objint.c
0x10004F085	0x00000018	[ 62] literal string: 2 <= base && base <= 16
0x10004F09D	0x00000015	[ 62] literal string: mp_obj_int_formatted
0x10004F0B2	0x0000002C	[ 62] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
0x10004F0DE	0x0000001A	[ 63] literal string: mp_obj_int_formatted_impl
0x10004F0F8	0x0000000D	[ 63] literal string: objint_mpz.c
0x10004F105	0x00000019	[ 63] literal string: mp_obj_int_to_bytes_impl
0x10004F11E	0x00000015	[ 63] literal string: mp_obj_int_binary_op
0x10004F133	0x0000002B	[ 63] literal string: mp_obj_is_exact_type(lhs_in, &mp_type_int)
0x10004F15E	0x0000001A	[ 63] literal string: op == MP_BINARY_OP_DIVMOD
0x10004F178	0x0000002D	[ 63] literal string: overflow converting long int to machine word
0x10004F1A5	0x00000019	[ 63] literal string: mp_obj_int_as_float_impl
0x10004F1BE	0x00000014	[ 64] literal string: pop from empty list
0x10004F1D2	0x00000002	[ 64] literal string: [
0x10004F1D4	0x0000000C	[ 64] literal string: list_subscr
0x10004F1E0	0x0000000A	[ 64] literal string: objlist.c
0x10004F1EA	0x0000000D	[ 64] literal string: len_adj <= 0
0x10004F1F7	0x00000016	[ 67] literal string: arg must be user-type
0x10004F20D	0x00000003	[ 74] literal string: %q
0x10004F210	0x00000019	[ 75] literal string: slice step can't be zero
0x10004F229	0x00000007	[ 75] literal string: slice(
0x10004F230	0x00000004	[ 76] literal string: \%c
0x10004F234	0x00000003	[ 76] literal string: \\
0x10004F237	0x00000003	[ 76] literal string: \n
0x10004F23A	0x00000003	[ 76] literal string: \r
0x10004F23D	0x00000003	[ 76] literal string: \t
0x10004F240	0x00000007	[ 76] literal string: \x%02x
0x10004F247	0x00000010	[ 76] literal string: empty separator
0x10004F257	0x00000045	[ 76] literal string: join expects a list of str/bytes objects consistent with self object
0x10004F29C	0x0000000F	[ 76] literal string: rsplit(None,n)
0x10004F2AB	0x00000014	[ 76] literal string: substring not found
0x10004F2BF	0x00000012	[ 76] literal string: start/end indices
0x10004F2D1	0x0000000E	[ 76] literal string: str_uni_strip
0x10004F2DF	0x00000009	[ 76] literal string: objstr.c
0x10004F2E8	0x0000002A	[ 76] literal string: last_good_char_pos >= first_good_char_pos
0x10004F312	0x00000019	[ 76] literal string: first_good_char_pos == 0
0x10004F32B	0x00000028	[ 76] literal string: single '}' encountered in format string
0x10004F353	0x00000035	[ 76] literal string: end of format while looking for conversion specifier
0x10004F388	0x00000020	[ 76] literal string: unknown conversion specifier %c
0x10004F3A8	0x00000018	[ 76] literal string: unmatched '{' in format
0x10004F3C0	0x00000024	[ 76] literal string: expected ':' after format specifier
0x10004F3E4	0x0000004A	[ 76] literal string: can't switch from automatic field numbering to manual field specification
0x10004F42E	0x00000019	[ 76] literal string: tuple index out of range
0x10004F447	0x0000001D	[ 76] literal string: attributes not supported yet
0x10004F464	0x0000004A	[ 76] literal string: can't switch from manual field specification to automatic field numbering
0x10004F4AE	0x00000019	[ 76] literal string: mp_obj_str_format_helper
0x10004F4C7	0x00000012	[ 76] literal string: conversion == 'r'
0x10004F4D9	0x00000019	[ 76] literal string: invalid format specifier
0x10004F4F2	0x0000002C	[ 76] literal string: sign not allowed in string format specifier
0x10004F51E	0x00000033	[ 76] literal string: sign not allowed with integer format specifier 'c'
0x10004F551	0x00000031	[ 76] literal string: unknown format code '%c' for object of type '%s'
0x10004F582	0x00000035	[ 76] literal string: '=' alignment not allowed in string format specifier
0x10004F5B7	0x00000005	[ 76] literal string: <>=^
0x10004F5BC	0x00000010	[ 76] literal string: bcdeEfFgGnosxX%
0x10004F5CC	0x00000014	[ 76] literal string: format needs a dict
0x10004F5E0	0x00000016	[ 76] literal string: incomplete format key
0x10004F5F6	0x00000012	[ 76] literal string: incomplete format
0x10004F608	0x00000023	[ 76] literal string: format string needs more arguments
0x10004F62B	0x00000015	[ 76] literal string: %c needs int or char
0x10004F640	0x0000000F	[ 76] literal string: integer needed
0x10004F64F	0x00000035	[ 76] literal string: unsupported format character '%c' (0x%x) at index %d
0x10004F684	0x0000002B	[ 76] literal string: format string didn't convert all arguments
0x10004F6AF	0x0000000C	[ 76] literal string: str_replace
0x10004F6BB	0x0000000D	[ 76] literal string: data != NULL
0x10004F6C8	0x00000019	[ 76] literal string: bytes value out of range
0x10004F6E1	0x0000001A	[ 76] literal string: wrong number of arguments
0x10004F6FB	0x0000002B	[ 76] literal string: can't convert '%q' object to %q implicitly
0x10004F726	0x00000028	[ 77] literal string: string indices must be integers, not %s
0x10004F74E	0x0000001A	[ 77] literal string: string index out of range
0x10004F768	0x00000007	[ 77] literal string: \u%04x
0x10004F76F	0x00000007	[ 77] literal string: \U%08x
0x10004F776	0x0000000B	[ 77] literal string: str_subscr
0x10004F781	0x00000010	[ 77] literal string: objstrunicode.c
0x10004F791	0x00000015	[ 77] literal string: type == &mp_type_str
0x10004F7A6	0x00000002	[ 78] literal string: (
0x10004F7A8	0x00000002	[ 78] literal string: ,
0x10004F7AA	0x00000011	[ 78] literal string: mp_obj_tuple_get
0x10004F7BB	0x0000000B	[ 78] literal string: objtuple.c
0x10004F7C6	0x00000024	[ 78] literal string: mp_obj_is_tuple_compatible(self_in)
0x10004F7EA	0x00000014	[ 79] literal string: mp_obj_new_instance
0x10004F7FE	0x0000000A	[ 79] literal string: objtype.c
0x10004F808	0x00000015	[ 79] literal string: num_native_bases < 2
0x10004F81D	0x00000019	[ 79] literal string: mp_obj_instance_make_new
0x10004F836	0x0000001E	[ 79] literal string: mp_obj_is_instance_type(self)
0x10004F854	0x00000028	[ 79] literal string: __init__() should return None, not '%s'
0x10004F87C	0x00000028	[ 79] literal string: type '%q' isn't an acceptable base type
0x10004F8A4	0x0000002E	[ 79] literal string: multiple bases have instance lay-out conflict
0x10004F8D2	0x0000001C	[ 79] literal string: instance_count_native_bases
0x10004F8EE	0x00000025	[ 79] literal string: mp_obj_is_type(*item, &mp_type_type)
0x10004F913	0x00000014	[ 79] literal string: mp_obj_class_lookup
0x10004F927	0x0000001F	[ 79] literal string: lookup->dest[0] == MP_OBJ_NULL
0x10004F946	0x0000001F	[ 79] literal string: lookup->dest[1] == MP_OBJ_NULL
0x10004F965	0x00000042	[ 79] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(type->locals_dict))
0x10004F9A7	0x0000000D	[ 79] literal string: <class '%q'>
0x10004F9B4	0x0000001C	[ 79] literal string: type takes 1 or 3 arguments
0x10004F9D0	0x0000001C	[ 79] literal string: can't create '%q' instances
0x10004F9EC	0x0000000A	[ 79] literal string: type_attr
0x10004F9F6	0x00000027	[ 79] literal string: mp_obj_is_type(self_in, &mp_type_type)
0x10004FA1D	0x00000042	[ 79] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(self->locals_dict))
0x10004FA5F	0x00000035	[ 79] literal string: can't add special method to already-subclassed class
0x10004FA94	0x00000012	[ 79] literal string: <%s object at %p>
0x10004FAA6	0x0000001A	[ 79] literal string: mp_obj_instance_load_attr
0x10004FAC0	0x00000032	[ 79] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
0x10004FAF2	0x00000015	[ 79] literal string: unreadable attribute
0x10004FB07	0x0000001D	[ 79] literal string: static_class_method_make_new
0x10004FB24	0x0000003E	[ 79] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
0x10004FB62	0x00000017	[ 82] literal string: object not in sequence
0x10004FB79	0x0000000D	[ 84] literal string: bad typecode
0x10004FB86	0x00000003	[ 93] literal string: -X
0x10004FB89	0x0000000A	[ 93] literal string: --version
0x10004FB93	0x00000003	[ 93] literal string: -v
0x10004FB96	0x00000003	[ 93] literal string: -O
0x10004FB99	0x00000003	[ 93] literal string: -o
0x10004FB9C	0x00000003	[ 93] literal string: -s
0x10004FB9F	0x00000012	[ 93] literal string: -msmall-int-bits=
0x10004FBB1	0x00000008	[ 93] literal string: -march=
0x10004FBB9	0x00000004	[ 93] literal string: x86
0x10004FBBD	0x00000004	[ 93] literal string: x64
0x10004FBC1	0x00000006	[ 93] literal string: armv6
0x10004FBC7	0x00000007	[ 93] literal string: armv6m
0x10004FBCE	0x00000007	[ 93] literal string: armv7m
0x10004FBD5	0x00000008	[ 93] literal string: armv7em
0x10004FBDD	0x0000000A	[ 93] literal string: armv7emsp
0x10004FBE7	0x0000000A	[ 93] literal string: armv7emdp
0x10004FBF1	0x00000007	[ 93] literal string: xtensa
0x10004FBF8	0x0000000A	[ 93] literal string: xtensawin
0x10004FC02	0x00000016	[ 93] literal string: multiple input files\n
0x10004FC18	0x0000000F	[ 93] literal string: no input file\n
0x10004FC27	0x00000018	[ 93] literal string: FATAL: uncaught NLR %p\n
0x10004FC3F	0x0000000E	[ 93] literal string: emit=bytecode
0x10004FC4D	0x0000000C	[ 93] literal string: emit=native
0x10004FC59	0x0000000B	[ 93] literal string: emit=viper
0x10004FC64	0x0000000A	[ 93] literal string: heapsize=
0x10004FC6E	0x00000277	[ 93] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
0x10004FEE5	0x0000003E	[ 93] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
0x10004FF23	0x00000004	[ 93] literal string: mpy
0x10004FF27	0x0000004C	[ 93] literal string: MicroPython v1.19.1-409-g0e8c2204d on 2022-09-17; mpy-cross emitting mpy v6
0x10004FF73	0x0000003F	[ 93] literal string:   emit={bytecode,native,viper} -- set the default code emitter
0x10004FFB4	0x00000048	[  0] compact unwind info
0x100050000	0x00000008	[  0] non-lazy-pointer-to-local: ___stack_chk_guard
0x100050008	0x00000008	[  0] non-lazy-pointer-to-local: ___stderrp
0x100050010	0x00000008	[  0] non-lazy-pointer-to-local: _mp_const_ellipsis_obj
0x100050018	0x00000008	[  0] non-lazy-pointer-to-local: _mp_fun_table
0x100050020	0x00000008	[  0] non-lazy-pointer-to-local: _mp_identity_getiter
0x100050028	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_dict_make_new
0x100050030	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_exception_make_new
0x100050038	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_instance_make_new
0x100050040	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_str_binary_op
0x100050048	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_IndexError
0x100050050	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_StopIteration
0x100050058	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_bytearray
0x100050060	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_bytes
0x100050068	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_classmethod
0x100050070	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_complex
0x100050078	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_dict
0x100050080	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_float
0x100050088	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_int
0x100050090	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_list
0x100050098	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_object
0x1000500A0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_property
0x1000500A8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_slice
0x1000500B0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_staticmethod
0x1000500B8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_str
0x1000500C0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_tuple
0x1000500C8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_type
0x1000500D0	0x00000008	[  0] non-lazy-pointer-to-local: dyld_stub_binder
0x1000500E0	0x00000AE0	[  6] _mp_qstr_const_pool
0x100050BC0	0x00000120	[ 12] _tok_kw
0x100050CE0	0x00000018	[ 13] _mp_constants_map
0x100050D00	0x00000060	[ 15] _emit_asm_table
0x100050D60	0x00000060	[ 15] _emit_native_table
0x100050DC0	0x000001D8	[ 15] _compile_function
0x100050F98	0x000001B8	[ 17] _emit_bc_method_table
0x100051150	0x000001B8	[ 20] _emit_native_x64_method_table
0x100051308	0x000001B8	[ 22] _emit_native_x86_method_table
0x1000514C0	0x000001B8	[ 24] _emit_native_thumb_method_table
0x100051678	0x00000038	[ 25] _emit_inline_thumb_method_table
0x1000516B0	0x000001B8	[ 27] _emit_native_arm_method_table
0x100051868	0x000001B8	[ 29] _emit_native_xtensa_method_table
0x100051A20	0x00000038	[ 30] _emit_inline_xtensa_method_table
0x100051A58	0x000001B8	[ 31] _emit_native_xtensawin_method_table
0x100051C10	0x00000078	[ 37] _mp_type_checked_fun
0x100051C90	0x00000080	[ 47] _mp_obj_get_type.types
0x100051D10	0x00000010	[ 48] _mp_obj_array_append_obj
0x100051D20	0x00000010	[ 48] _mp_obj_array_extend_obj
0x100051D30	0x00000078	[ 48] _mp_type_bytearray
0x100051DA8	0x00000078	[ 48] _mp_type_array_it
0x100051E20	0x00000078	[ 49] _mp_type_bool
0x100051E98	0x00000078	[ 53] _mp_type_complex
0x100051F10	0x00000078	[ 54] _mp_type_dict
0x100051F88	0x00000020	[ 54] _mp_const_empty_dict_obj
0x100051FA8	0x00000078	[ 54] _mp_type_dict_view_it
0x100052020	0x000000E0	[ 54] _dict_locals_dict_table
0x100052100	0x00000020	[ 54] _dict_locals_dict
0x100052120	0x00000010	[ 54] _dict_fromkeys_obj
0x100052130	0x00000018	[ 54] _dict_get_obj
0x100052148	0x00000018	[ 54] _dict_pop_obj
0x100052160	0x00000018	[ 54] _dict_setdefault_obj
0x100052178	0x00000010	[ 54] _dict_clear_obj
0x100052188	0x00000010	[ 54] _dict_copy_obj
0x100052198	0x00000018	[ 54] _dict_fromkeys_fun_obj
0x1000521B0	0x00000010	[ 54] _dict_items_obj
0x1000521C0	0x00000080	[ 54] _mp_type_dict_view
0x100052240	0x00000018	[ 54] _mp_dict_view_names
0x100052258	0x00000010	[ 54] _dict_keys_obj
0x100052268	0x00000010	[ 54] _dict_popitem_obj
0x100052278	0x00000018	[ 54] _dict_update_obj
0x100052290	0x00000010	[ 54] _dict_values_obj
0x1000522A0	0x00000078	[ 56] _mp_type_BaseException
0x100052318	0x00000078	[ 56] _mp_type_Exception
0x100052390	0x00000078	[ 56] _mp_type_StopIteration
0x100052408	0x00000078	[ 56] _mp_type_ArithmeticError
0x100052480	0x00000078	[ 56] _mp_type_OverflowError
0x1000524F8	0x00000078	[ 56] _mp_type_ZeroDivisionError
0x100052570	0x00000078	[ 56] _mp_type_AttributeError
0x1000525E8	0x00000078	[ 56] _mp_type_LookupError
0x100052660	0x00000078	[ 56] _mp_type_IndexError
0x1000526D8	0x00000078	[ 56] _mp_type_KeyError
0x100052750	0x00000078	[ 56] _mp_type_MemoryError
0x1000527C8	0x00000078	[ 56] _mp_type_OSError
0x100052840	0x00000078	[ 56] _mp_type_RuntimeError
0x1000528B8	0x00000078	[ 56] _mp_type_NotImplementedError
0x100052930	0x00000078	[ 56] _mp_type_SyntaxError
0x1000529A8	0x00000078	[ 56] _mp_type_IndentationError
0x100052A20	0x00000078	[ 56] _mp_type_TypeError
0x100052A98	0x00000078	[ 56] _mp_type_ViperTypeError
0x100052B10	0x00000078	[ 56] _mp_type_ValueError
0x100052B88	0x00000078	[ 56] _mp_type_UnicodeError
0x100052C00	0x00000078	[ 58] _mp_type_float
0x100052C78	0x00000078	[ 59] _mp_type_fun_builtin_1
0x100052CF0	0x00000078	[ 59] _mp_type_fun_builtin_2
0x100052D68	0x00000078	[ 59] _mp_type_fun_builtin_3
0x100052DE0	0x00000078	[ 59] _mp_type_fun_builtin_var
0x100052E58	0x00000078	[ 61] _mp_type_it
0x100052ED0	0x00000080	[ 62] _mp_type_int
0x100052F50	0x00000020	[ 62] _int_locals_dict_table
0x100052F70	0x00000020	[ 62] _int_locals_dict
0x100052F90	0x00000010	[ 62] _int_from_bytes_obj
0x100052FA0	0x00000018	[ 62] _int_to_bytes_obj
0x100052FB8	0x00000018	[ 62] _int_from_bytes_fun_obj
0x100052FD0	0x00000080	[ 64] _mp_type_list
0x100053050	0x000000B0	[ 64] _list_locals_dict_table
0x100053100	0x00000020	[ 64] _list_locals_dict
0x100053120	0x00000018	[ 64] _list_index_obj
0x100053138	0x00000018	[ 64] _list_pop_obj
0x100053150	0x00000010	[ 64] _list_append_obj
0x100053160	0x00000010	[ 64] _list_clear_obj
0x100053170	0x00000010	[ 64] _list_copy_obj
0x100053180	0x00000010	[ 64] _list_count_obj
0x100053190	0x00000010	[ 64] _list_extend_obj
0x1000531A0	0x00000010	[ 64] _list_insert_obj
0x1000531B0	0x00000010	[ 64] _list_remove_obj
0x1000531C0	0x00000010	[ 64] _list_reverse_obj
0x1000531D0	0x00000018	[ 64] _list_sort_obj
0x1000531F0	0x00000080	[ 67] _mp_type_object
0x100053270	0x00000020	[ 67] _object_locals_dict_table
0x100053290	0x00000020	[ 67] _object_locals_dict
0x1000532B0	0x00000010	[ 67] _object___new___obj
0x1000532C0	0x00000010	[ 67] _object___init___obj
0x1000532D0	0x00000010	[ 67] _object___new___fun_obj
0x1000532E0	0x00000078	[ 68] _mp_type_polymorph_iter
0x100053360	0x00000080	[ 69] _mp_type_property
0x1000533E0	0x00000030	[ 69] _property_locals_dict_table
0x100053410	0x00000020	[ 69] _property_locals_dict
0x100053430	0x00000010	[ 69] _property_getter_obj
0x100053440	0x00000010	[ 69] _property_setter_obj
0x100053450	0x00000010	[ 69] _property_deleter_obj
0x100053460	0x00000078	[ 70] _mp_type_NoneType
0x1000534D8	0x00000078	[ 74] _mp_type_singleton
0x100053550	0x00000010	[ 74] _mp_const_ellipsis_obj
0x100053560	0x00000078	[ 75] _mp_type_slice
0x1000535E0	0x00000020	[ 76] _mp_const_empty_bytes_obj
0x100053600	0x00000010	[ 76] _str_join_obj
0x100053610	0x00000018	[ 76] _str_split_obj
0x100053628	0x00000018	[ 76] _str_rsplit_obj
0x100053640	0x00000018	[ 76] _str_find_obj
0x100053658	0x00000018	[ 76] _str_rfind_obj
0x100053670	0x00000018	[ 76] _str_index_obj
0x100053688	0x00000018	[ 76] _str_rindex_obj
0x1000536A0	0x00000018	[ 76] _str_startswith_obj
0x1000536B8	0x00000018	[ 76] _str_endswith_obj
0x1000536D0	0x00000018	[ 76] _str_strip_obj
0x1000536E8	0x00000018	[ 76] _str_lstrip_obj
0x100053700	0x00000018	[ 76] _str_rstrip_obj
0x100053718	0x00000018	[ 76] _str_format_obj
0x100053730	0x00000018	[ 76] _str_replace_obj
0x100053748	0x00000018	[ 76] _str_count_obj
0x100053760	0x00000010	[ 76] _str_lower_obj
0x100053770	0x00000010	[ 76] _str_upper_obj
0x100053780	0x00000010	[ 76] _str_isspace_obj
0x100053790	0x00000010	[ 76] _str_isalpha_obj
0x1000537A0	0x00000010	[ 76] _str_isdigit_obj
0x1000537B0	0x00000010	[ 76] _str_isupper_obj
0x1000537C0	0x00000010	[ 76] _str_islower_obj
0x1000537D0	0x00000018	[ 76] _bytes_decode_obj
0x1000537E8	0x00000018	[ 76] _str_encode_obj
0x100053800	0x000001A0	[ 76] _array_bytearray_str_bytes_locals_table
0x1000539A0	0x00000020	[ 76] _mp_obj_str_locals_dict
0x1000539C0	0x00000020	[ 76] _mp_obj_bytes_locals_dict
0x1000539E0	0x00000020	[ 76] _mp_obj_bytearray_locals_dict
0x100053A00	0x00000078	[ 76] _mp_type_bytes
0x100053A78	0x00000078	[ 77] _mp_type_str
0x100053AF0	0x00000010	[ 78] _mp_const_empty_tuple_obj
0x100053B00	0x00000080	[ 78] _mp_type_tuple
0x100053B80	0x00000020	[ 78] _tuple_locals_dict_table
0x100053BA0	0x00000020	[ 78] _tuple_locals_dict
0x100053BC0	0x00000018	[ 78] _tuple_index_obj
0x100053BD8	0x00000010	[ 78] _tuple_count_obj
0x100053BE8	0x00000018	[ 79] _native_base_init_wrapper_obj
0x100053C00	0x00000078	[ 79] _mp_type_type
0x100053C78	0x00000078	[ 79] _mp_type_staticmethod
0x100053CF0	0x00000078	[ 79] _mp_type_classmethod
0x100053D68	0x00000010	[ 81] _mp_op_getitem_obj
0x100053D78	0x00000010	[ 81] _mp_op_setitem_obj
0x100053D88	0x00000010	[ 81] _mp_op_delitem_obj
0x100053DA0	0x00000010	[ 87] _mp_builtin_next_obj
0x100053DB0	0x00000010	[ 93] _mp_stderr_print
0x100054000	0x00000008	[ 96] ____chkstk_darwin
0x100054008	0x00000008	[ 96] ___assert_rtn
0x100054010	0x00000008	[ 96] ___bzero
0x100054018	0x00000008	[ 96] ___error
0x100054020	0x00000008	[ 96] ___exp10
0x100054028	0x00000008	[ 96] ___sincos_stret
0x100054030	0x00000008	[ 96] ___stack_chk_fail
0x100054038	0x00000008	[ 96] _atan2
0x100054040	0x00000008	[ 96] _close
0x100054048	0x00000008	[ 96] _exit
0x100054050	0x00000008	[ 96] _exp
0x100054058	0x00000008	[ 96] _fmod
0x100054060	0x00000008	[ 96] _fprintf
0x100054068	0x00000008	[ 96] _log
0x100054070	0x00000008	[ 96] _malloc
0x100054078	0x00000008	[ 96] _memchr
0x100054080	0x00000008	[ 96] _memcmp
0x100054088	0x00000008	[ 96] _memcpy
0x100054090	0x00000008	[ 96] _memmove
0x100054098	0x00000008	[ 96] _memset
0x1000540A0	0x00000008	[ 96] _nan
0x1000540A8	0x00000008	[ 96] _open
0x1000540B0	0x00000008	[ 96] _pow
0x1000540B8	0x00000008	[ 96] _printf
0x1000540C0	0x00000008	[ 96] _puts
0x1000540C8	0x00000008	[ 96] _read
0x1000540D0	0x00000008	[ 96] _strchr
0x1000540D8	0x00000008	[ 96] _strcmp
0x1000540E0	0x00000008	[ 96] _strlen
0x1000540E8	0x00000008	[ 96] _strncmp
0x1000540F0	0x00000008	[ 96] _strtol
0x1000540F8	0x00000008	[ 96] _write
0x100054100	0x00000008	[  0] __dyld_private
0x100054108	0x00000008	[ 93] _heap_size
0x100054110	0x00000003	[  1] _mp_dynamic_compiler
0x100054118	0x00000008	[ 93] _mp_verbose_flag
0x100054120	0x00000320	[  1] _mp_state_ctx
0x100054440	0x00000004	[ 40] _mp_fun_table
0x100054444	0x00000004	[ 93] _emit_opt

# Dead Stripped Symbols:
#        	Size    	File  Name
<<dead>> 	0x00000020	[  5] _gc_lock
<<dead>> 	0x00000020	[  5] _gc_unlock
<<dead>> 	0x00000020	[  5] _gc_sweep_all
<<dead>> 	0x000001F0	[  5] _gc_info
<<dead>> 	0x00000090	[  5] _gc_nbytes
<<dead>> 	0x000001E0	[  5] _gc_dump_info
<<dead>> 	0x000002C0	[  5] _gc_dump_alloc_table
<<dead>> 	0x00000023	[  5] literal string: GC: total: %u, used: %u, free: %u\n
<<dead>> 	0x00000045	[  5] literal string:  No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n
<<dead>> 	0x0000001B	[  5] literal string: GC memory layout; from %p:
<<dead>> 	0x0000001C	[  5] literal string: \n       (%u lines all free)
<<dead>> 	0x00000008	[  5] literal string: \n%05x: 
<<dead>> 	0x000000AE	[  6] _qstr_pool_info
<<dead>> 	0x00000002	[  6] literal string: \n
<<dead>> 	0x00000019	[  7] _vstr_init_fixed_buf
<<dead>> 	0x00000043	[  7] _vstr_new
<<dead>> 	0x0000002C	[  7] _vstr_free
<<dead>> 	0x0000000A	[  7] _vstr_hint_size
<<dead>> 	0x00000029	[  7] _vstr_add_len
<<dead>> 	0x00000016	[  7] _vstr_ins_byte
<<dead>> 	0x00000054	[  7] _vstr_ins_blank_bytes
<<dead>> 	0x00000016	[  7] _vstr_ins_char
<<dead>> 	0x0000000F	[  7] _vstr_cut_head_bytes
<<dead>> 	0x00000042	[  7] _vstr_cut_out_bytes
<<dead>> 	0x000000B2	[  7] _vstr_printf
<<dead>> 	0x00000028	[  7] _vstr_vprintf
<<dead>> 	0x00000006	[  8] _plat_print_strn
<<dead>> 	0x00000010	[  8] _mp_plat_print
<<dead>> 	0x00000026	[  9] _unichar_isident
<<dead>> 	0x0000001E	[  9] _unichar_isalnum
<<dead>> 	0x00000018	[ 10] _mpz_init_from_int
<<dead>> 	0x00000174	[ 10] _mpz_pow3_inpl
<<dead>> 	0x00000047	[ 10] _mpz_as_uint_checked
<<dead>> 	0x00000058	[ 11] _mp_reader_new_mem
<<dead>> 	0x00000022	[ 11] _mp_reader_mem_readbyte
<<dead>> 	0x00000026	[ 11] _mp_reader_mem_close
<<dead>> 	0x0000003B	[ 12] _mp_lexer_new_from_str_len
<<dead>> 	0x0000003B	[ 12] _mp_lexer_new_from_fd
<<dead>> 	0x00000005	[ 12] literal string: None
<<dead>> 	0x00000063	[ 15] _mp_compile
<<dead>> 	0x0000001C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
<<dead>> 	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
<<dead>> 	0x00000034	[ 15] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
<<dead>> 	0x0000000F	[ 15] literal string: invalid syntax
<<dead>> 	0x0000000B	[ 16] literal string: id != NULL
<<dead>> 	0x00000018	[ 19] _asm_x64_nop
<<dead>> 	0x00000045	[ 19] _asm_x64_push_r64
<<dead>> 	0x00000045	[ 19] _asm_x64_pop_r64
<<dead>> 	0x00000015	[ 20] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 20] literal string: emit->stack_size == 0
<<dead>> 	0x00000010	[ 21] literal string: num_locals >= 0
<<dead>> 	0x0000000F	[ 21] literal string: get_label_dest
<<dead>> 	0x00000020	[ 21] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 22] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 22] literal string: emitnative.c
<<dead>> 	0x00000028	[ 22] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 22] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 22] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 22] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 22] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 22] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 22] literal string: adjust_stack
<<dead>> 	0x00000033	[ 22] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 22] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 22] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 22] literal string: conversion to object
<<dead>> 	0x0000002C	[ 22] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 22] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 22] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 22] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 22] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 22] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 22] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 22] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 22] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 22] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 22] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 22] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 22] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 22] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 22] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 22] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 22] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 22] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 22] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 22] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 22] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 22] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 22] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 22] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 22] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 22] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 22] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 22] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 22] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 22] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 22] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 22] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 22] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 22] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 22] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 22] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 22] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 22] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 22] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 22] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 22] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 22] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 22] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 22] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 22] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 22] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 22] literal string: !star_flags
<<dead>> 	0x00000008	[ 22] literal string: casting
<<dead>> 	0x00000019	[ 22] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 22] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 22] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 22] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 22] literal string: n_args == 1
<<dead>> 	0x00000015	[ 22] literal string: must raise an object
<<dead>> 	0x0000000D	[ 22] literal string: native yield
<<dead>> 	0x00000010	[ 23] literal string: num_locals >= 0
<<dead>> 	0x0000000F	[ 23] literal string: get_label_dest
<<dead>> 	0x00000020	[ 23] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 24] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 24] literal string: emitnative.c
<<dead>> 	0x00000028	[ 24] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 24] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 24] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 24] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 24] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 24] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 24] literal string: adjust_stack
<<dead>> 	0x00000033	[ 24] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 24] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 24] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 24] literal string: conversion to object
<<dead>> 	0x0000002C	[ 24] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 24] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 24] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 24] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 24] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 24] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 24] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 24] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 24] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 24] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 24] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 24] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 24] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 24] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 24] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 24] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 24] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 24] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 24] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 24] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 24] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 24] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 24] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 24] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 24] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 24] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 24] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 24] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 24] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 24] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 24] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 24] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 24] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 24] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 24] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 24] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 24] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 24] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 24] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 24] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 24] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 24] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 24] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 24] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 24] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 24] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 24] literal string: !star_flags
<<dead>> 	0x00000008	[ 24] literal string: casting
<<dead>> 	0x00000019	[ 24] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 24] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 24] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 24] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 24] literal string: n_args == 1
<<dead>> 	0x00000015	[ 24] literal string: must raise an object
<<dead>> 	0x0000000D	[ 24] literal string: native yield
<<dead>> 	0x00000001	[ 25] literal string: 
<<dead>> 	0x00000027	[ 25] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
<<dead>> 	0x00000013	[ 25] literal string: asm_thumb_format_3
<<dead>> 	0x0000000B	[ 25] literal string: asmthumb.h
<<dead>> 	0x00000017	[ 25] literal string: rlo < ASM_THUMB_REG_R8
<<dead>> 	0x0000001C	[ 25] literal string: rlo_dest < ASM_THUMB_REG_R8
<<dead>> 	0x0000001B	[ 25] literal string: rlo_src < ASM_THUMB_REG_R8
<<dead>> 	0x0000001B	[ 26] _asm_arm_bkpt
<<dead>> 	0x00000029	[ 26] _asm_arm_push
<<dead>> 	0x00000029	[ 26] _asm_arm_pop
<<dead>> 	0x00000010	[ 26] literal string: num_locals >= 0
<<dead>> 	0x00000020	[ 26] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 27] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 27] literal string: emitnative.c
<<dead>> 	0x00000028	[ 27] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 27] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 27] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 27] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 27] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 27] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 27] literal string: adjust_stack
<<dead>> 	0x00000033	[ 27] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 27] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 27] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 27] literal string: conversion to object
<<dead>> 	0x0000002C	[ 27] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 27] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 27] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 27] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 27] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 27] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 27] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 27] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 27] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 27] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 27] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 27] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 27] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 27] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 27] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 27] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 27] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 27] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 27] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 27] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 27] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 27] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 27] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 27] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 27] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 27] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 27] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 27] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 27] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 27] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 27] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 27] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 27] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 27] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 27] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 27] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 27] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 27] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 27] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 27] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 27] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 27] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 27] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 27] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 27] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 27] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 27] literal string: !star_flags
<<dead>> 	0x00000008	[ 27] literal string: casting
<<dead>> 	0x00000019	[ 27] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 27] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 27] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 27] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 27] literal string: n_args == 1
<<dead>> 	0x00000015	[ 27] literal string: must raise an object
<<dead>> 	0x0000000D	[ 27] literal string: native yield
<<dead>> 	0x0000000F	[ 28] literal string: get_label_dest
<<dead>> 	0x00000020	[ 28] literal string: label < as->base.max_num_labels
<<dead>> 	0x00000017	[ 29] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 29] literal string: emitnative.c
<<dead>> 	0x00000028	[ 29] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 29] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 29] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 29] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 29] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 29] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 29] literal string: adjust_stack
<<dead>> 	0x00000033	[ 29] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 29] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 29] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 29] literal string: conversion to object
<<dead>> 	0x0000002C	[ 29] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 29] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 29] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 29] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 29] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 29] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 29] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 29] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 29] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 29] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 29] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 29] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 29] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 29] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 29] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 29] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 29] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 29] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 29] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 29] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 29] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 29] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 29] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 29] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 29] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 29] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 29] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 29] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 29] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 29] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 29] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 29] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 29] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 29] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 29] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 29] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 29] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 29] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 29] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 29] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 29] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 29] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 29] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 29] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 29] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 29] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 29] literal string: !star_flags
<<dead>> 	0x00000008	[ 29] literal string: casting
<<dead>> 	0x00000019	[ 29] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 29] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 29] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 29] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 29] literal string: n_args == 1
<<dead>> 	0x00000015	[ 29] literal string: must raise an object
<<dead>> 	0x0000000D	[ 29] literal string: native yield
<<dead>> 	0x00000021	[ 30] literal string: label_num < emit->max_num_labels
<<dead>> 	0x00000018	[ 30] literal string: '%s' expects a register
<<dead>> 	0x00000001	[ 30] literal string: 
<<dead>> 	0x00000015	[ 30] literal string: '%s' expects a label
<<dead>> 	0x00000017	[ 30] literal string: label '%q' not defined
<<dead>> 	0x00000018	[ 30] literal string: '%s' expects an integer
<<dead>> 	0x00000017	[ 31] literal string: emit_native_start_pass
<<dead>> 	0x0000000D	[ 31] literal string: emitnative.c
<<dead>> 	0x00000028	[ 31] literal string: id->local_num < emit->local_vtype_alloc
<<dead>> 	0x00000015	[ 31] literal string: emit_native_end_pass
<<dead>> 	0x00000015	[ 31] literal string: id->local_num <= 255
<<dead>> 	0x00000016	[ 31] literal string: emit->stack_size == 0
<<dead>> 	0x0000001A	[ 31] literal string: emit->exc_stack_size == 0
<<dead>> 	0x0000003B	[ 31] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
<<dead>> 	0x0000000D	[ 31] literal string: adjust_stack
<<dead>> 	0x00000033	[ 31] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
<<dead>> 	0x00000052	[ 31] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
<<dead>> 	0x00000022	[ 31] literal string: local '%q' used before type known
<<dead>> 	0x00000015	[ 31] literal string: conversion to object
<<dead>> 	0x0000002C	[ 31] literal string: local '%q' has type '%q' but source is '%q'
<<dead>> 	0x00000019	[ 31] literal string: emit_native_store_global
<<dead>> 	0x00000015	[ 31] literal string: vtype == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 31] literal string: emit_native_leave_exc_stack
<<dead>> 	0x00000019	[ 31] literal string: emit->exc_stack_size > 0
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_name
<<dead>> 	0x0000001E	[ 31] literal string: vtype_fromlist == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 31] literal string: vtype_level == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_from
<<dead>> 	0x0000001C	[ 31] literal string: vtype_module == VTYPE_PYOBJ
<<dead>> 	0x00000018	[ 31] literal string: emit_native_import_star
<<dead>> 	0x00000018	[ 31] literal string: emit_native_load_method
<<dead>> 	0x0000001A	[ 31] literal string: vtype_base == VTYPE_PYOBJ
<<dead>> 	0x00000026	[ 31] literal string: emit_get_stack_pointer_to_reg_for_pop
<<dead>> 	0x00000018	[ 31] literal string: si->kind == STACK_VALUE
<<dead>> 	0x00000015	[ 31] literal string: can't load from '%q'
<<dead>> 	0x0000001B	[ 31] literal string: can't load with '%q' index
<<dead>> 	0x00000011	[ 31] literal string: can't store '%q'
<<dead>> 	0x00000014	[ 31] literal string: can't store to '%q'
<<dead>> 	0x0000001C	[ 31] literal string: can't store with '%q' index
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_delete_subscr
<<dead>> 	0x0000001B	[ 31] literal string: vtype_index == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 31] literal string: emit_native_load_attr
<<dead>> 	0x00000017	[ 31] literal string: emit_native_store_attr
<<dead>> 	0x00000018	[ 31] literal string: emit_native_delete_attr
<<dead>> 	0x00000028	[ 31] literal string: can't implicitly convert '%q' to 'bool'
<<dead>> 	0x00000017	[ 31] literal string: emit_native_setup_with
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_pop_exc_stack
<<dead>> 	0x00000016	[ 31] literal string: e->is_active == false
<<dead>> 	0x00000015	[ 31] literal string: emit_native_get_iter
<<dead>> 	0x0000001C	[ 31] literal string: unary op %q not implemented
<<dead>> 	0x00000021	[ 31] literal string: div/mod not implemented for uint
<<dead>> 	0x0000001B	[ 31] literal string: comparison of int and uint
<<dead>> 	0x0000001D	[ 31] literal string: binary op %q not implemented
<<dead>> 	0x00000029	[ 31] literal string: can't do binary op between '%q' and '%q'
<<dead>> 	0x00000018	[ 31] literal string: emit_native_build_slice
<<dead>> 	0x0000001B	[ 31] literal string: vtype_start == VTYPE_PYOBJ
<<dead>> 	0x0000001A	[ 31] literal string: vtype_stop == VTYPE_PYOBJ
<<dead>> 	0x0000000C	[ 31] literal string: n_args == 3
<<dead>> 	0x0000001A	[ 31] literal string: vtype_step == VTYPE_PYOBJ
<<dead>> 	0x00000016	[ 31] literal string: emit_native_store_map
<<dead>> 	0x00000019	[ 31] literal string: vtype_key == VTYPE_PYOBJ
<<dead>> 	0x0000001B	[ 31] literal string: vtype_value == VTYPE_PYOBJ
<<dead>> 	0x00000019	[ 31] literal string: vtype_map == VTYPE_PYOBJ
<<dead>> 	0x00000017	[ 31] literal string: emit_native_store_comp
<<dead>> 	0x0000001A	[ 31] literal string: vtype_item == VTYPE_PYOBJ
<<dead>> 	0x00000020	[ 31] literal string: vtype_collection == VTYPE_PYOBJ
<<dead>> 	0x0000001C	[ 31] literal string: emit_native_unpack_sequence
<<dead>> 	0x00000016	[ 31] literal string: emit_native_unpack_ex
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_call_function
<<dead>> 	0x00000024	[ 31] literal string: n_positional == 1 && n_keyword == 0
<<dead>> 	0x0000000C	[ 31] literal string: !star_flags
<<dead>> 	0x00000008	[ 31] literal string: casting
<<dead>> 	0x00000019	[ 31] literal string: vtype_fun == VTYPE_PYOBJ
<<dead>> 	0x00000022	[ 31] literal string: return expected '%q' but got '%q'
<<dead>> 	0x00000019	[ 31] literal string: emit_native_return_value
<<dead>> 	0x0000001A	[ 31] literal string: emit_native_raise_varargs
<<dead>> 	0x0000000C	[ 31] literal string: n_args == 1
<<dead>> 	0x00000015	[ 31] literal string: must raise an object
<<dead>> 	0x0000000D	[ 31] literal string: native yield
<<dead>> 	0x00000010	[ 32] 16-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000008	[ 34] 8-byte-literal
<<dead>> 	0x00000010	[ 34] 16-byte-literal
<<dead>> 	0x00000001	[ 34] literal string: 
<<dead>> 	0x000000F0	[ 35] _mp_make_function_from_raw_code
<<dead>> 	0x00000039	[ 35] _mp_make_closure_from_raw_code
<<dead>> 	0x00000023	[ 35] _mp_make_function_from_raw_code.cold.1
<<dead>> 	0x00000023	[ 35] _mp_make_function_from_raw_code.cold.2
<<dead>> 	0x00000023	[ 35] _mp_make_function_from_raw_code.cold.3
<<dead>> 	0x00000023	[ 35] _mp_make_function_from_raw_code.cold.4
<<dead>> 	0x0000001F	[ 35] literal string: mp_make_function_from_raw_code
<<dead>> 	0x0000000B	[ 35] literal string: rc != NULL
<<dead>> 	0x0000005E	[ 35] literal string: def_args == NULL || def_args[0] == MP_OBJ_NULL || mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000005D	[ 35] literal string: def_args == NULL || def_args[1] == MP_OBJ_NULL || mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x0000001D	[ 35] literal string: rc->kind == MP_CODE_BYTECODE
<<dead>> 	0x0000004B	[ 37] _mp_load_name
<<dead>> 	0x0000006B	[ 37] _mp_load_global
<<dead>> 	0x0000000D	[ 37] _mp_load_build_class
<<dead>> 	0x00000023	[ 37] _mp_store_name
<<dead>> 	0x00000020	[ 37] _mp_delete_name
<<dead>> 	0x00000023	[ 37] _mp_store_global
<<dead>> 	0x00000020	[ 37] _mp_delete_global
<<dead>> 	0x00000010	[ 37] _mp_call_function_0
<<dead>> 	0x00000048	[ 37] _mp_call_function_2
<<dead>> 	0x000005D4	[ 37] _mp_call_method_n_kw_var
<<dead>> 	0x000000F3	[ 37] _mp_unpack_sequence
<<dead>> 	0x000001C6	[ 37] _mp_unpack_ex
<<dead>> 	0x00000053	[ 37] _mp_load_attr
<<dead>> 	0x0000007B	[ 37] _mp_load_method
<<dead>> 	0x0000006B	[ 37] _mp_load_method_protected
<<dead>> 	0x00000099	[ 37] _mp_store_attr
<<dead>> 	0x00000255	[ 37] _mp_resume
<<dead>> 	0x00000052	[ 37] _mp_make_raise_obj
<<dead>> 	0x00000062	[ 37] _mp_import_name
<<dead>> 	0x0000015F	[ 37] _mp_import_from
<<dead>> 	0x0000008D	[ 37] _mp_import_all
<<dead>> 	0x000000C7	[ 37] _mp_parse_compile_execute
<<dead>> 	0x00000023	[ 37] _mp_call_method_n_kw_var.cold.1
<<dead>> 	0x00000023	[ 37] _mp_call_method_n_kw_var.cold.2
<<dead>> 	0x00000023	[ 37] _mp_call_method_n_kw_var.cold.3
<<dead>> 	0x00000023	[ 37] _mp_call_method_n_kw_var.cold.4
<<dead>> 	0x00000023	[ 37] _mp_resume.cold.1
<<dead>> 	0x00000023	[ 37] _mp_resume.cold.2
<<dead>> 	0x00000023	[ 37] _mp_import_all.cold.1
<<dead>> 	0x00000010	[ 37] _mp_module___main__
<<dead>> 	0x00000018	[ 37] literal string: name '%q' isn't defined
<<dead>> 	0x00000023	[ 37] literal string: need more than %d values to unpack
<<dead>> 	0x00000028	[ 37] literal string: too many values to unpack (expected %d)
<<dead>> 	0x00000027	[ 37] literal string: type object '%q' has no attribute '%q'
<<dead>> 	0x00000022	[ 37] literal string: '%s' object has no attribute '%q'
<<dead>> 	0x0000000A	[ 37] literal string: mp_resume
<<dead>> 	0x0000003B	[ 37] literal string: (send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL)
<<dead>> 	0x0000001B	[ 37] literal string: throw_value != MP_OBJ_NULL
<<dead>> 	0x0000001F	[ 37] literal string: generator raised StopIteration
<<dead>> 	0x0000002A	[ 37] literal string: exceptions must derive from BaseException
<<dead>> 	0x00000015	[ 37] literal string: can't import name %q
<<dead>> 	0x0000001E	[ 37] literal string: mp_call_prepare_args_n_kw_var
<<dead>> 	0x0000001F	[ 37] literal string: args2_len + len <= args2_alloc
<<dead>> 	0x00000018	[ 37] literal string: args2_len < args2_alloc
<<dead>> 	0x00000029	[ 37] literal string: args2_len + 2 * map->used <= args2_alloc
<<dead>> 	0x0000001D	[ 37] literal string: args2_len + 2 <= args2_alloc
<<dead>> 	0x00000006	[ 37] literal string: obj.h
<<dead>> 	0x0000001A	[ 37] literal string: mp_obj_new_exception_arg1
<<dead>> 	0x00000030	[ 37] literal string: exc_type->make_new == mp_obj_exception_make_new
<<dead>> 	0x00000051	[ 38] _mp_call_function_1_protected
<<dead>> 	0x0000005B	[ 38] _mp_call_function_2_protected
<<dead>> 	0x00000011	[ 39] _mp_sched_exception
<<dead>> 	0x00000032	[ 39] _mp_handle_pending
<<dead>> 	0x0000006E	[ 40] _mp_native_from_obj
<<dead>> 	0x00000052	[ 40] _mp_native_to_obj
<<dead>> 	0x0000007A	[ 41] _mp_pairheap_meld
<<dead>> 	0x00000087	[ 41] _mp_pairheap_pairing
<<dead>> 	0x000000DD	[ 41] _mp_pairheap_delete
<<dead>> 	0x00000054	[ 42] _ringbuf_get16
<<dead>> 	0x00000042	[ 42] _ringbuf_peek16
<<dead>> 	0x00000056	[ 42] _ringbuf_put16
<<dead>> 	0x00000010	[ 43] _mp_stack_set_top
<<dead>> 	0x00000017	[ 43] _mp_stack_usage
<<dead>> 	0x00000010	[ 44] _mp_arg_error_terse_mismatch
<<dead>> 	0x0000001C	[ 44] literal string: argument num/types mismatch
<<dead>> 	0x000000EE	[ 45] _mp_warning
<<dead>> 	0x00000015	[ 45] _mp_emitter_warning
<<dead>> 	0x00000008	[ 45] literal string: Warning
<<dead>> 	0x00000002	[ 45] literal string: \n
<<dead>> 	0x0000002C	[ 46] _mp_set_init
<<dead>> 	0x0000013C	[ 46] _mp_set_lookup
<<dead>> 	0x000000A1	[ 46] _mp_set_rehash
<<dead>> 	0x00000061	[ 46] _mp_set_remove_first
<<dead>> 	0x00000027	[ 46] _mp_set_clear
<<dead>> 	0x00000016	[ 47] _mp_obj_print
<<dead>> 	0x0000003A	[ 47] _mp_obj_is_callable
<<dead>> 	0x00000043	[ 47] _mp_obj_get_array_fixed_n
<<dead>> 	0x00000024	[ 47] _mp_obj_id
<<dead>> 	0x0000003A	[ 47] _mp_obj_len
<<dead>> 	0x00000009	[ 47] _mp_identity
<<dead>> 	0x00000008	[ 47] 8-byte-literal
<<dead>> 	0x00000010	[ 47] _mp_identity_obj
<<dead>> 	0x00000002	[ 47] literal string: \n
<<dead>> 	0x0000002D	[ 47] literal string: requested length %d but object has length %d
<<dead>> 	0x00000021	[ 47] literal string: object of type '%s' has no len()
<<dead>> 	0x00000005	[ 49] literal string: True
<<dead>> 	0x00000006	[ 49] literal string: False
<<dead>> 	0x0000002B	[ 50] _mp_obj_new_bound_meth
<<dead>> 	0x00000062	[ 50] _bound_meth_print
<<dead>> 	0x0000001E	[ 50] _bound_meth_call
<<dead>> 	0x00000078	[ 50] _mp_type_bound_meth
<<dead>> 	0x00000012	[ 50] literal string: <bound_method %p 
<<dead>> 	0x00000002	[ 50] literal string: .
<<dead>> 	0x00000002	[ 50] literal string: >
<<dead>> 	0x00000025	[ 51] _mp_obj_new_cell
<<dead>> 	0x00000059	[ 51] _cell_print
<<dead>> 	0x00000078	[ 51] _mp_type_cell
<<dead>> 	0x0000000A	[ 51] literal string: <cell %p 
<<dead>> 	0x00000006	[ 51] literal string: (nil)
<<dead>> 	0x00000002	[ 51] literal string: >
<<dead>> 	0x000000B2	[ 52] _closure_print
<<dead>> 	0x0000011E	[ 52] _closure_call
<<dead>> 	0x0000005F	[ 52] _mp_obj_new_closure
<<dead>> 	0x00000078	[ 52] _mp_type_closure
<<dead>> 	0x0000000A	[ 52] literal string: <closure 
<<dead>> 	0x00000015	[ 52] literal string:  at %p, n_closed=%u 
<<dead>> 	0x00000006	[ 52] literal string: (nil)
<<dead>> 	0x00000002	[ 52] literal string:  
<<dead>> 	0x00000002	[ 52] literal string: >
<<dead>> 	0x00000008	[ 53] 8-byte-literal
<<dead>> 	0x00000010	[ 53] 16-byte-literal
<<dead>> 	0x00000010	[ 53] 16-byte-literal
<<dead>> 	0x00000035	[ 54] _mp_obj_new_dict
<<dead>> 	0x0000000E	[ 54] _mp_obj_dict_len
<<dead>> 	0x00000056	[ 54] _mp_obj_dict_delete
<<dead>> 	0x00000016	[ 54] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 54] literal string: obj.h
<<dead>> 	0x00000011	[ 54] literal string: pos < map->alloc
<<dead>> 	0x00000003	[ 54] literal string: , 
<<dead>> 	0x00000003	[ 54] literal string: : 
<<dead>> 	0x00000005	[ 54] literal string: next
<<dead>> 	0x00000064	[ 55] _enumerate_make_new
<<dead>> 	0x00000085	[ 55] _enumerate_iternext
<<dead>> 	0x00000021	[ 55] _enumerate_iternext.cold.1
<<dead>> 	0x00000078	[ 55] _mp_type_enumerate
<<dead>> 	0x00000020	[ 55] _enumerate_make_new.allowed_args
<<dead>> 	0x00000013	[ 55] literal string: enumerate_iternext
<<dead>> 	0x0000000F	[ 55] literal string: objenumerate.c
<<dead>> 	0x0000002C	[ 55] literal string: mp_obj_is_type(self_in, &mp_type_enumerate)
<<dead>> 	0x00000021	[ 56] _mp_obj_new_exception_args
<<dead>> 	0x00000013	[ 56] _mp_obj_exception_clear_traceback
<<dead>> 	0x00000023	[ 56] _mp_obj_new_exception_args.cold.1
<<dead>> 	0x00000003	[ 56] literal string: : 
<<dead>> 	0x00000001	[ 56] literal string: 
<<dead>> 	0x00000030	[ 56] literal string: exc_type->make_new == mp_obj_exception_make_new
<<dead>> 	0x0000001A	[ 56] literal string: mp_obj_new_exception_args
<<dead>> 	0x00000078	[ 56] _mp_type_SystemExit
<<dead>> 	0x00000078	[ 56] _mp_type_KeyboardInterrupt
<<dead>> 	0x00000078	[ 56] _mp_type_GeneratorExit
<<dead>> 	0x00000078	[ 56] _mp_type_StopAsyncIteration
<<dead>> 	0x00000078	[ 56] _mp_type_AssertionError
<<dead>> 	0x00000078	[ 56] _mp_type_EOFError
<<dead>> 	0x00000078	[ 56] _mp_type_ImportError
<<dead>> 	0x00000078	[ 56] _mp_type_NameError
<<dead>> 	0x00000054	[ 57] _filter_make_new
<<dead>> 	0x0000005D	[ 57] _filter_iternext
<<dead>> 	0x00000078	[ 57] _mp_type_filter
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000010	[ 58] 16-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000008	[ 58] 8-byte-literal
<<dead>> 	0x00000010	[ 58] _mp_const_float_e_obj
<<dead>> 	0x00000010	[ 58] _mp_const_float_pi_obj
<<dead>> 	0x0000000F	[ 58] literal string: divide by zero
<<dead>> 	0x00000039	[ 59] _fun_builtin_0_call
<<dead>> 	0x00000054	[ 59] _mp_obj_fun_get_name
<<dead>> 	0x00000030	[ 59] _fun_bc_print
<<dead>> 	0x00000182	[ 59] _fun_bc_call
<<dead>> 	0x0000010F	[ 59] _mp_obj_new_fun_bc
<<dead>> 	0x00000015	[ 59] _mp_obj_new_fun_native
<<dead>> 	0x0000003B	[ 59] _mp_obj_new_fun_asm
<<dead>> 	0x00000036	[ 59] _fun_native_call
<<dead>> 	0x00000128	[ 59] _fun_asm_call
<<dead>> 	0x000000F7	[ 59] _convert_obj_for_inline_asm
<<dead>> 	0x00000021	[ 59] _fun_builtin_0_call.cold.1
<<dead>> 	0x00000023	[ 59] _fun_bc_call.cold.1
<<dead>> 	0x00000023	[ 59] _mp_obj_new_fun_bc.cold.1
<<dead>> 	0x00000023	[ 59] _mp_obj_new_fun_bc.cold.2
<<dead>> 	0x00000023	[ 59] _fun_asm_call.cold.1
<<dead>> 	0x00000078	[ 59] _mp_type_fun_builtin_0
<<dead>> 	0x00000078	[ 59] _mp_type_fun_native
<<dead>> 	0x00000078	[ 59] _mp_type_fun_bc
<<dead>> 	0x00000078	[ 59] _mp_type_fun_asm
<<dead>> 	0x00000012	[ 59] literal string: mp_obj_new_fun_bc
<<dead>> 	0x0000002C	[ 59] literal string: mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000002B	[ 59] literal string: mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x00000013	[ 59] literal string: fun_builtin_0_call
<<dead>> 	0x00000030	[ 59] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_0)
<<dead>> 	0x00000016	[ 59] literal string: <function %q at 0x%p>
<<dead>> 	0x0000000C	[ 59] literal string: fun_bc_call
<<dead>> 	0x00000029	[ 59] literal string: vm_return_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000000D	[ 59] literal string: fun_asm_call
<<dead>> 	0x0000000C	[ 59] literal string: n_args == 4
<<dead>> 	0x000000CC	[ 60] _gen_wrap_call
<<dead>> 	0x000000DE	[ 60] _native_gen_wrap_call
<<dead>> 	0x0000016A	[ 60] _mp_obj_gen_resume
<<dead>> 	0x00000031	[ 60] _gen_instance_print
<<dead>> 	0x00000013	[ 60] _gen_instance_iternext
<<dead>> 	0x00000055	[ 60] _gen_resume_and_raise
<<dead>> 	0x0000006B	[ 60] _gen_instance_close
<<dead>> 	0x00000011	[ 60] _gen_instance_send
<<dead>> 	0x0000002D	[ 60] _gen_instance_throw
<<dead>> 	0x0000001F	[ 60] _gen_instance_pend_throw
<<dead>> 	0x00000020	[ 60] _mp_const_GeneratorExit_obj
<<dead>> 	0x00000078	[ 60] _mp_type_gen_wrap
<<dead>> 	0x00000078	[ 60] _mp_type_native_gen_wrap
<<dead>> 	0x00000080	[ 60] _mp_type_gen_instance
<<dead>> 	0x00000040	[ 60] _gen_instance_locals_dict_table
<<dead>> 	0x00000020	[ 60] _gen_instance_locals_dict
<<dead>> 	0x00000018	[ 60] _gen_instance_throw_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_close_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_send_obj
<<dead>> 	0x00000010	[ 60] _gen_instance_pend_throw_obj
<<dead>> 	0x0000001C	[ 60] literal string: generator already executing
<<dead>> 	0x00000036	[ 60] literal string: can't send non-None value to a just-started generator
<<dead>> 	0x0000001F	[ 60] literal string: generator raised StopIteration
<<dead>> 	0x0000001E	[ 60] literal string: <generator object '%q' at %p>
<<dead>> 	0x00000020	[ 60] literal string: generator ignored GeneratorExit
<<dead>> 	0x00000049	[ 63] _mp_obj_int_get_uint_checked
<<dead>> 	0x0000002C	[ 63] literal string: mp_obj_is_exact_type(self_in, &mp_type_int)
<<dead>> 	0x0000000F	[ 63] literal string: divide by zero
<<dead>> 	0x00000015	[ 63] literal string: negative shift count
<<dead>> 	0x0000000A	[ 64] _mp_obj_list_set_len
<<dead>> 	0x0000002B	[ 64] _mp_obj_list_store
<<dead>> 	0x00000003	[ 64] literal string: , 
<<dead>> 	0x00000002	[ 64] literal string: ]
<<dead>> 	0x0000007F	[ 65] _map_make_new
<<dead>> 	0x00000076	[ 65] _map_iternext
<<dead>> 	0x00000078	[ 65] _mp_type_map
<<dead>> 	0x0000004E	[ 66] _module_print
<<dead>> 	0x0000009D	[ 66] _module_attr
<<dead>> 	0x0000007D	[ 66] _mp_obj_new_module
<<dead>> 	0x0000004D	[ 66] _mp_module_get_loaded_or_builtin
<<dead>> 	0x00000047	[ 66] _mp_module_generic_attr
<<dead>> 	0x00000080	[ 66] _mp_type_module
<<dead>> 	0x00000040	[ 66] _mp_builtin_module_table
<<dead>> 	0x00000018	[ 66] _mp_builtin_module_map
<<dead>> 	0x00000001	[ 66] literal string: 
<<dead>> 	0x0000000E	[ 66] literal string: <module '%s'>
<<dead>> 	0x00000005	[ 70] literal string: None
<<dead>> 	0x00000055	[ 71] _range_print
<<dead>> 	0x0000009A	[ 71] _range_make_new
<<dead>> 	0x00000059	[ 71] _range_unary_op
<<dead>> 	0x00000050	[ 71] _range_attr
<<dead>> 	0x000000DE	[ 71] _range_subscr
<<dead>> 	0x00000023	[ 71] _range_getiter
<<dead>> 	0x0000003F	[ 71] _range_it_iternext
<<dead>> 	0x00000078	[ 71] _mp_type_range
<<dead>> 	0x00000078	[ 71] _mp_type_range_it
<<dead>> 	0x0000000F	[ 71] literal string: range(%ld, %ld
<<dead>> 	0x00000002	[ 71] literal string: )
<<dead>> 	0x00000007	[ 71] literal string: , %ld)
<<dead>> 	0x0000000A	[ 71] literal string: zero step
<<dead>> 	0x000000AB	[ 72] _reversed_make_new
<<dead>> 	0x0000002F	[ 72] _reversed_iternext
<<dead>> 	0x00000078	[ 72] _mp_type_reversed
<<dead>> 	0x000000AB	[ 73] _set_print
<<dead>> 	0x00000093	[ 73] _set_make_new
<<dead>> 	0x0000002E	[ 73] _set_unary_op
<<dead>> 	0x00000268	[ 73] _set_binary_op
<<dead>> 	0x0000002A	[ 73] _set_getiter
<<dead>> 	0x0000006C	[ 73] _mp_obj_new_set
<<dead>> 	0x00000013	[ 73] _mp_obj_set_store
<<dead>> 	0x00000025	[ 73] _set_union
<<dead>> 	0x00000025	[ 73] _set_symmetric_difference
<<dead>> 	0x0000000C	[ 73] _set_intersect
<<dead>> 	0x0000000C	[ 73] _set_diff
<<dead>> 	0x0000003F	[ 73] _set_update
<<dead>> 	0x0000004F	[ 73] _set_symmetric_difference_update
<<dead>> 	0x000000FA	[ 73] _set_intersect_int
<<dead>> 	0x00000093	[ 73] _set_diff_int
<<dead>> 	0x0000000C	[ 73] _set_issubset
<<dead>> 	0x00000015	[ 73] _set_issuperset
<<dead>> 	0x0000004C	[ 73] _set_copy
<<dead>> 	0x0000004A	[ 73] _set_update_int
<<dead>> 	0x00000019	[ 73] _set_add
<<dead>> 	0x00000014	[ 73] _set_clear
<<dead>> 	0x00000147	[ 73] _set_issubset_internal
<<dead>> 	0x00000046	[ 73] _set_it_iternext
<<dead>> 	0x00000019	[ 73] _set_discard
<<dead>> 	0x00000015	[ 73] _set_diff_update
<<dead>> 	0x0000000F	[ 73] _set_intersect_update
<<dead>> 	0x00000058	[ 73] _set_isdisjoint
<<dead>> 	0x00000027	[ 73] _set_pop
<<dead>> 	0x00000037	[ 73] _set_remove
<<dead>> 	0x00000080	[ 73] _mp_type_set
<<dead>> 	0x00000120	[ 73] _set_locals_dict_table
<<dead>> 	0x00000020	[ 73] _set_locals_dict
<<dead>> 	0x00000018	[ 73] _set_diff_obj
<<dead>> 	0x00000018	[ 73] _set_diff_update_obj
<<dead>> 	0x00000018	[ 73] _set_update_obj
<<dead>> 	0x00000010	[ 73] _set_add_obj
<<dead>> 	0x00000010	[ 73] _set_clear_obj
<<dead>> 	0x00000010	[ 73] _set_copy_obj
<<dead>> 	0x00000010	[ 73] _set_discard_obj
<<dead>> 	0x00000010	[ 73] _set_intersect_obj
<<dead>> 	0x00000010	[ 73] _set_intersect_update_obj
<<dead>> 	0x00000010	[ 73] _set_isdisjoint_obj
<<dead>> 	0x00000010	[ 73] _set_issubset_obj
<<dead>> 	0x00000010	[ 73] _set_issuperset_obj
<<dead>> 	0x00000010	[ 73] _set_pop_obj
<<dead>> 	0x00000010	[ 73] _set_remove_obj
<<dead>> 	0x00000010	[ 73] _set_symmetric_difference_obj
<<dead>> 	0x00000010	[ 73] _set_symmetric_difference_update_obj
<<dead>> 	0x00000010	[ 73] _set_union_obj
<<dead>> 	0x00000006	[ 73] literal string: set()
<<dead>> 	0x00000002	[ 73] literal string: {
<<dead>> 	0x00000003	[ 73] literal string: , 
<<dead>> 	0x00000002	[ 73] literal string: }
<<dead>> 	0x00000016	[ 73] literal string: pop from an empty set
<<dead>> 	0x0000003B	[ 75] _mp_obj_new_slice
<<dead>> 	0x00000003	[ 75] literal string: , 
<<dead>> 	0x00000002	[ 75] literal string: )
<<dead>> 	0x0000003D	[ 76] _mp_obj_new_str_from_vstr
<<dead>> 	0x00000048	[ 76] _mp_obj_str_intern
<<dead>> 	0x0000002C	[ 76] _mp_obj_str_intern_checked
<<dead>> 	0x00000046	[ 76] _mp_obj_str_get_str
<<dead>> 	0x00000003	[ 76] literal string: %c
<<dead>> 	0x00000001	[ 76] literal string: 
<<dead>> 	0x00000002	[ 76] literal string: b
<<dead>> 	0x00000031	[ 76] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000003	[ 77] literal string: %c
<<dead>> 	0x00000004	[ 77] literal string: \%c
<<dead>> 	0x00000003	[ 77] literal string: \\
<<dead>> 	0x00000003	[ 77] literal string: \n
<<dead>> 	0x00000003	[ 77] literal string: \r
<<dead>> 	0x00000003	[ 77] literal string: \t
<<dead>> 	0x00000007	[ 77] literal string: \x%02x
<<dead>> 	0x00000031	[ 77] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000021	[ 78] _mp_obj_tuple_del
<<dead>> 	0x00000023	[ 78] _mp_obj_tuple_del.cold.1
<<dead>> 	0x00000003	[ 78] literal string: , 
<<dead>> 	0x00000002	[ 78] literal string: )
<<dead>> 	0x00000031	[ 78] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000011	[ 78] literal string: mp_obj_tuple_del
<<dead>> 	0x00000028	[ 78] literal string: mp_obj_is_type(self_in, &mp_type_tuple)
<<dead>> 	0x00000069	[ 79] _mp_obj_instance_is_callable
<<dead>> 	0x00000057	[ 79] _super_print
<<dead>> 	0x00000050	[ 79] _super_make_new
<<dead>> 	0x00000152	[ 79] _super_attr
<<dead>> 	0x0000002F	[ 79] _mp_load_super_method
<<dead>> 	0x00000028	[ 79] _mp_builtin_issubclass
<<dead>> 	0x0000001F	[ 79] _mp_builtin_isinstance
<<dead>> 	0x000000BE	[ 79] _mp_obj_is_subclass
<<dead>> 	0x00000023	[ 79] _super_attr.cold.1
<<dead>> 	0x00000023	[ 79] _super_attr.cold.2
<<dead>> 	0x00000023	[ 79] _super_attr.cold.3
<<dead>> 	0x00000010	[ 79] 16-byte-literal
<<dead>> 	0x00000010	[ 79] 16-byte-literal
<<dead>> 	0x0000001B	[ 79] literal string: '%s' object isn't callable
<<dead>> 	0x00000016	[ 79] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 79] literal string: obj.h
<<dead>> 	0x00000011	[ 79] literal string: pos < map->alloc
<<dead>> 	0x00000009	[ 79] literal string: <super: 
<<dead>> 	0x00000003	[ 79] literal string: , 
<<dead>> 	0x00000002	[ 79] literal string: >
<<dead>> 	0x0000000B	[ 79] literal string: super_attr
<<dead>> 	0x00000028	[ 79] literal string: mp_obj_is_type(self_in, &mp_type_super)
<<dead>> 	0x0000002A	[ 79] literal string: mp_obj_is_type(self->type, &mp_type_type)
<<dead>> 	0x00000028	[ 79] literal string: mp_obj_is_type(items[i], &mp_type_type)
<<dead>> 	0x00000023	[ 79] literal string: issubclass() arg 1 must be a class
<<dead>> 	0x00000039	[ 79] literal string: issubclass() arg 2 must be a class or a tuple of classes
<<dead>> 	0x00000078	[ 79] _mp_type_super
<<dead>> 	0x00000010	[ 79] _mp_builtin_issubclass_obj
<<dead>> 	0x00000010	[ 79] _mp_builtin_isinstance_obj
<<dead>> 	0x00000066	[ 80] _zip_make_new
<<dead>> 	0x00000061	[ 80] _zip_iternext
<<dead>> 	0x00000078	[ 80] _mp_type_zip
<<dead>> 	0x00000027	[ 81] _op_contains
<<dead>> 	0x00000010	[ 81] _mp_op_contains_obj
<<dead>> 	0x0000008D	[ 83] _mp_stream_rw
<<dead>> 	0x00000053	[ 83] _mp_get_stream_raise
<<dead>> 	0x0000000C	[ 83] _stream_read
<<dead>> 	0x0000000F	[ 83] _stream_read1
<<dead>> 	0x0000002D	[ 83] _mp_stream_write
<<dead>> 	0x0000000F	[ 83] _mp_stream_write_adaptor
<<dead>> 	0x00000094	[ 83] _stream_write_method
<<dead>> 	0x0000003F	[ 83] _stream_write1_method
<<dead>> 	0x000000B7	[ 83] _stream_readinto
<<dead>> 	0x000000D9	[ 83] _stream_unbuffered_readline
<<dead>> 	0x00000072	[ 83] _stream_unbuffered_readlines
<<dead>> 	0x00000034	[ 83] _mp_stream_unbuffered_iter
<<dead>> 	0x00000036	[ 83] _mp_stream_close
<<dead>> 	0x00000092	[ 83] _stream_seek
<<dead>> 	0x00000052	[ 83] _stream_tell
<<dead>> 	0x00000036	[ 83] _stream_flush
<<dead>> 	0x0000008F	[ 83] _stream_ioctl
<<dead>> 	0x0000026B	[ 83] _stream_read_generic
<<dead>> 	0x0000001F	[ 83] literal string: stream operation not supported
<<dead>> 	0x00000018	[ 83] _mp_stream_read_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_read1_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_write_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_write1_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_readinto_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_unbuffered_readline_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_unbuffered_readlines_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_close_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_seek_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_tell_obj
<<dead>> 	0x00000010	[ 83] _mp_stream_flush_obj
<<dead>> 	0x00000018	[ 83] _mp_stream_ioctl_obj
<<dead>> 	0x00000056	[ 84] _mp_binary_get_int
<<dead>> 	0x00000133	[ 84] _mp_binary_get_val
<<dead>> 	0x00000107	[ 84] _mp_binary_set_val
<<dead>> 	0x0000004B	[ 85] _mp_obj_is_package
<<dead>> 	0x000002CB	[ 85] _mp_builtin___import___default
<<dead>> 	0x0000017A	[ 85] _evaluate_relative_import
<<dead>> 	0x00000054	[ 85] _stat_dir_or_file
<<dead>> 	0x00000033	[ 85] _do_load
<<dead>> 	0x00000023	[ 85] _evaluate_relative_import.cold.1
<<dead>> 	0x00000018	[ 85] _mp_builtin___import___obj
<<dead>> 	0x00000019	[ 85] literal string: evaluate_relative_import
<<dead>> 	0x00000010	[ 85] literal string: builtinimport.c
<<dead>> 	0x00000027	[ 85] literal string: current_module_name_obj != MP_OBJ_NULL
<<dead>> 	0x0000001E	[ 85] literal string: can't perform relative import
<<dead>> 	0x00000015	[ 85] literal string: no module named '%q'
<<dead>> 	0x0000000D	[ 85] literal string: /__init__.py
<<dead>> 	0x00000004	[ 85] literal string: .py
<<dead>> 	0x0000000F	[ 86] _mp_builtin_eval
<<dead>> 	0x0000000F	[ 86] _mp_builtin_exec
<<dead>> 	0x000000B4	[ 86] _eval_exec_helper
<<dead>> 	0x00000018	[ 86] _mp_builtin_eval_obj
<<dead>> 	0x00000018	[ 86] _mp_builtin_exec_obj
<<dead>> 	0x000000E2	[ 87] _mp_builtin___build_class__
<<dead>> 	0x00000012	[ 87] _mp_builtin_abs
<<dead>> 	0x00000041	[ 87] _mp_builtin_all
<<dead>> 	0x00000041	[ 87] _mp_builtin_any
<<dead>> 	0x0000004C	[ 87] _mp_builtin_bin
<<dead>> 	0x00000016	[ 87] _mp_builtin_callable
<<dead>> 	0x000000D2	[ 87] _mp_builtin_chr
<<dead>> 	0x00000102	[ 87] _mp_builtin_dir
<<dead>> 	0x00000015	[ 87] _mp_builtin_divmod
<<dead>> 	0x00000012	[ 87] _mp_builtin_hash
<<dead>> 	0x00000017	[ 87] _mp_builtin_hex
<<dead>> 	0x0000000C	[ 87] _mp_builtin_iter
<<dead>> 	0x0000000F	[ 87] _mp_builtin_max
<<dead>> 	0x0000000C	[ 87] _mp_builtin_min
<<dead>> 	0x00000017	[ 87] _mp_builtin_oct
<<dead>> 	0x00000090	[ 87] _mp_builtin_ord
<<dead>> 	0x0000002B	[ 87] _mp_builtin_pow
<<dead>> 	0x000000C9	[ 87] _mp_builtin_print
<<dead>> 	0x0000003E	[ 87] _mp_builtin___repl_print__
<<dead>> 	0x0000004B	[ 87] _mp_builtin_repr
<<dead>> 	0x0000009E	[ 87] _mp_builtin_round
<<dead>> 	0x0000005A	[ 87] _mp_builtin_sum
<<dead>> 	0x00000057	[ 87] _mp_builtin_sorted
<<dead>> 	0x00000091	[ 87] _mp_builtin_getattr
<<dead>> 	0x0000002D	[ 87] _mp_builtin_setattr
<<dead>> 	0x0000002A	[ 87] _mp_builtin_delattr
<<dead>> 	0x00000069	[ 87] _mp_builtin_hasattr
<<dead>> 	0x00000011	[ 87] _mp_builtin_globals
<<dead>> 	0x00000011	[ 87] _mp_builtin_locals
<<dead>> 	0x0000014F	[ 87] _mp_builtin_min_max
<<dead>> 	0x00000021	[ 87] _mp_builtin___build_class__.cold.1
<<dead>> 	0x00000023	[ 87] _mp_builtin_dir.cold.1
<<dead>> 	0x00000018	[ 87] _mp_builtin___build_class___obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_abs_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_all_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_any_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_bin_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_callable_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_chr_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_dir_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_divmod_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_hash_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_hex_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_iter_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_max_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_min_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_oct_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_ord_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_pow_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_print_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin___repl_print___obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_repr_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_round_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_sum_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_sorted_obj
<<dead>> 	0x00000018	[ 87] _mp_builtin_getattr_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_setattr_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_delattr_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_hasattr_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_globals_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_locals_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_id_obj
<<dead>> 	0x00000010	[ 87] _mp_builtin_len_obj
<<dead>> 	0x000005B0	[ 87] _mp_module_builtins_globals_table
<<dead>> 	0x00000020	[ 87] _mp_module_builtins_globals
<<dead>> 	0x00000010	[ 87] _mp_module_builtins
<<dead>> 	0x0000001B	[ 87] literal string: mp_builtin___build_class__
<<dead>> 	0x0000000E	[ 87] literal string: modbuiltins.c
<<dead>> 	0x0000000C	[ 87] literal string: 2 <= n_args
<<dead>> 	0x00000021	[ 87] literal string: chr() arg not in range(0x110000)
<<dead>> 	0x00000016	[ 87] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 87] literal string: obj.h
<<dead>> 	0x00000011	[ 87] literal string: pos < map->alloc
<<dead>> 	0x00000019	[ 87] literal string: arg is an empty sequence
<<dead>> 	0x0000003A	[ 87] literal string: ord() expected a character, but string of length %d found
<<dead>> 	0x0000001A	[ 87] literal string: 3-arg pow() not supported
<<dead>> 	0x00000002	[ 87] literal string: \n
<<dead>> 	0x0000002B	[ 87] literal string: must use keyword argument for key function
<<dead>> 	0x00000020	[ 87] _mp_builtin_print.allowed_args
<<dead>> 	0x0000003C	[ 88] _mp_micropython_opt_level
<<dead>> 	0x00000010	[ 88] _mp_micropython_heap_lock
<<dead>> 	0x0000001C	[ 88] _mp_micropython_heap_unlock
<<dead>> 	0x00000010	[ 88] _mp_module_micropython
<<dead>> 	0x00000050	[ 88] _mp_module_micropython_globals_table
<<dead>> 	0x00000020	[ 88] _mp_module_micropython_globals
<<dead>> 	0x00000018	[ 88] _mp_micropython_opt_level_obj
<<dead>> 	0x00000010	[ 88] _mp_micropython_heap_lock_obj
<<dead>> 	0x00000010	[ 88] _mp_micropython_heap_unlock_obj
<<dead>> 	0x0000002A	[ 89] _struct_calcsize
<<dead>> 	0x000001DD	[ 89] _struct_unpack_from
<<dead>> 	0x00000081	[ 89] _struct_pack
<<dead>> 	0x000000B3	[ 89] _struct_pack_into
<<dead>> 	0x000000F0	[ 89] _calc_size_items
<<dead>> 	0x00000049	[ 89] _get_fmt_num
<<dead>> 	0x00000172	[ 89] _struct_pack_into_internal
<<dead>> 	0x00000010	[ 89] _struct_calcsize_obj
<<dead>> 	0x00000018	[ 89] _struct_unpack_from_obj
<<dead>> 	0x00000018	[ 89] _struct_pack_obj
<<dead>> 	0x00000018	[ 89] _struct_pack_into_obj
<<dead>> 	0x00000018	[ 89] _mp_module_ustruct
<<dead>> 	0x00000060	[ 89] _mp_module_struct_globals_table
<<dead>> 	0x00000020	[ 89] _mp_module_struct_globals
<<dead>> 	0x00000011	[ 89] literal string: buffer too small
<<dead>> 	0x00001AD0	[ 90] _mp_execute_bytecode
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.1
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.2
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.3
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.4
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.5
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.6
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.7
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.8
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.9
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.10
<<dead>> 	0x00000030	[ 90] _mp_execute_bytecode.cold.11
<<dead>> 	0x00000023	[ 90] _mp_execute_bytecode.cold.12
<<dead>> 	0x0000002C	[ 90] literal string: local variable referenced before assignment
<<dead>> 	0x00000014	[ 90] literal string: mp_execute_bytecode
<<dead>> 	0x00000005	[ 90] literal string: vm.c
<<dead>> 	0x00000024	[ 90] literal string: mp_obj_is_exception_instance(TOP())
<<dead>> 	0x00000014	[ 90] literal string: exc_sp >= exc_stack
<<dead>> 	0x00000029	[ 90] literal string: &sp[-1] == MP_TAGPTR_PTR(exc_sp->val_sp)
<<dead>> 	0x00000040	[ 90] literal string: sp[-1] == mp_const_none || mp_obj_is_exception_instance(sp[-1])
<<dead>> 	0x00000018	[ 90] literal string: exc_sp == exc_stack - 1
<<dead>> 	0x0000001F	[ 90] literal string: no active exception to reraise
<<dead>> 	0x00000021	[ 90] literal string: exception chaining not supported
<<dead>> 	0x00000023	[ 90] literal string: ret_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000004C	[ 90] literal string: !mp_obj_exception_match(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))
<<dead>> 	0x00000007	[ 90] literal string: opcode
<<dead>> 	0x00000027	[ 91] _mp_decode_uint
<<dead>> 	0x00000021	[ 91] _mp_decode_uint_value
<<dead>> 	0x00000012	[ 91] _mp_decode_uint_skip
<<dead>> 	0x0000001D	[ 91] _mp_setup_code_state
<<dead>> 	0x0000059A	[ 91] _mp_setup_code_state_helper
<<dead>> 	0x00000012	[ 91] _mp_setup_code_state_native
<<dead>> 	0x00000030	[ 91] _fun_pos_args_mismatch
<<dead>> 	0x0000002F	[ 91] literal string: function got multiple values for argument '%q'
<<dead>> 	0x00000021	[ 91] literal string: unexpected keyword argument '%q'
<<dead>> 	0x00000032	[ 91] literal string: function missing required positional argument #%d
<<dead>> 	0x00000030	[ 91] literal string: function missing required keyword argument '%q'
<<dead>> 	0x00000027	[ 91] literal string: function missing keyword-only argument
<<dead>> 	0x00000035	[ 91] literal string: %q() takes %d positional arguments but %d were given
<<dead>> 	0x00000008	[ 93] _mp_import_stat
<<dead>> 	0x00000000	[ 96] ___memcpy_chk
